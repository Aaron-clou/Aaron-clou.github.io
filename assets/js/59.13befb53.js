(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{545:function(e,a,s){"use strict";s.r(a);var n=s(18),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"各种推导式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#各种推导式"}},[e._v("#")]),e._v(" 各种推导式")]),e._v(" "),s("blockquote",[s("p",[s("em",[e._v("K. Rustan M. Leino Manuscript KRML 267, 27 May 2019")])])]),e._v(" "),s("p",[s("strong",[e._v("摘要")]),e._v(" Dafny有许多类似推导式的结构。本文描述并比较了这些结构，展示了它们在语法和语义上的比较。")]),e._v(" "),s("p",[e._v("Dafny支持普遍量化和存在量化，以及用于“证明”普遍量化表达式或“利用”存在量化表达式的结构。[0]节(http://leino.science/papers/krml267.html#sec-quantifiers)描述了Dafny中的这些逻辑量词。第[1]节(http://leino.science/papers/krml267.html#sec-proof-features)显示了在推理量词时可以使用的程序语句，并指出了各种语法形式的差异。")]),e._v(" "),s("p",[e._v("集合推导式和映射推导式类似于量词，因为它们引入了范围超过特定值的绑定变量。[2]节(http://leino.science/papers/krml267.html#sec-sets-and-maps)展示了这些理解的一般和常见形式。")]),e._v(" "),s("h2",{attrs:{id:"量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[e._v("#")]),e._v(" 量词")]),e._v(" "),s("h3",{attrs:{id:"基本的量词的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本的量词的语法"}},[e._v("#")]),e._v(" 基本的量词的语法")]),e._v(" "),s("p",[e._v("在数学教科书和论文中，我们熟悉的全称量词采用了类似的符号。它说谓词对所有的值都成立。在编程语言行话中，我们说它是一个"),s("em",[e._v("绑定变量")]),e._v("，其作用域是量词的"),s("em",[e._v("主体")]),e._v("。也就是说，任何自由出现的in都被绑定到量词所引入的。")]),e._v(" "),s("p",[e._v("在Dafny中，同一个全称量词被写成"),s("code",[e._v("forall x:: P")]),e._v("。从解析的角度来看，量词的主体“尽可能地”扩展。因此，程序片段")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x :: R ==> Q\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("解析为")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("(forall x :: (R ==> Q))\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("而不是")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("(forall x :: R) ==> Q\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("请注意，“尽可能”不限于行尾。例如，一个常见的陷阱是编写(这里显示的是一个前置条件)")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("requires\n  forall x :: R ==> Q &&\n  S\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("意图是"),s("code",[e._v("forall x:: R ==> Q")]),e._v("和"),s("code",[e._v("S")]),e._v("是两个独立的前提条件。与此相反的是，这里所写的声明的意义是")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("requires (forall x :: (R ==> (Q && S)))\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果你打算写量词和S的连词，那么正确的语法是")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("requires\n  (forall x :: R ==> Q) &&\n  S\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("存在量词的一个熟悉的数学符号是。它说谓词对于某个值成立。在Dafny中，语法是"),s("code",[e._v("exists x:: P")]),e._v(" ."),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#fn-fn-emacs",target:"_blank",rel:"noopener noreferrer"}},[e._v("0"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"绑定变量的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绑定变量的类型"}},[e._v("#")]),e._v(" 绑定变量的类型")]),e._v(" "),s("p",[e._v("Dafny中的每个变量都有一个类型。通常，绑定变量的类型是推断的，但Dafny也允许显式声明该类型。例如,")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x: X :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("声明"),s("code",[e._v("x")]),e._v("的类型为"),s("code",[e._v("x")]),e._v("。为了简洁，并展示编写量词和推断的典型方法，我将在本文中省略类型，但请记住，如果愿意，您可以随时包含它们。")]),e._v(" "),s("p",[e._v("当约束变量从某个集合中提取时，量词的常用数学符号是。这个表达式的dafny式表示为")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x in S :: P  // error: syntax error\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("然而，这是不正确的Dafny语法，因为它使用了一个集合成员谓词，其中只期望绑定变量(可选的，带有类型)。在Dafny中这样一个量词的正确写法是")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x :: x in S ==> P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"多个绑定变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多个绑定变量"}},[e._v("#")]),e._v(" 多个绑定变量")]),e._v(" "),s("p",[e._v("一个限定符可以有一个以上的绑定变量。例如,")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x, y :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("P对于所有的x和y都成立。它在逻辑上等同于嵌套的量词")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x :: forall y :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("就此而言，它在逻辑上也等价于")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall y :: forall x :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Dafny的常见做法是使用多个变量的量词，而不是嵌套的形式，如果没有其他原因，只是为了更简洁。"),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#fn-fn-nested",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("如果您编写了一个绑定变量列表并显式地给出了类型，请注意，每个给定的类型只适用于它之前的变量。例如,")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x: X, y: Y :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("x的类型是x, y的类型是y。如果只包含y类型，如")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x, y: Y :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("那么你说"),s("code",[e._v("y")]),e._v("的类型是"),s("code",[e._v("y")]),e._v("而"),s("code",[e._v("x")]),e._v("的类型是可以推断的。换句话说，你可以认为这个“"),s("code",[e._v(":")]),e._v("”比“"),s("code",[e._v("，")]),e._v("”具有更强的约束力。")]),e._v(" "),s("h3",{attrs:{id:"量词主体的典型形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词主体的典型形式"}},[e._v("#")]),e._v(" 量词主体的典型形式")]),e._v(" "),s("p",[e._v("全称量词的主体通常是一种含义，如in")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x :: R ==> P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("你可以从以下几个方面来解读:")]),e._v(" "),s("blockquote",[s("p",[e._v('"对于所有的'),s("code",[e._v("x")]),e._v("，意味着"),s("code",[e._v("R ==> P")]),e._v('成立"')]),e._v(" "),s("p",[e._v('"对于所有的'),s("code",[e._v("x")]),e._v("， "),s("code",[e._v("R")]),e._v("意味着"),s("code",[e._v("P")]),e._v(' "')]),e._v(" "),s("p",[e._v('"对于所有的'),s("code",[e._v("x")]),e._v("，如果"),s("code",[e._v("R")]),e._v("成立，那么"),s("code",[e._v("P")]),e._v('也成立"')])]),e._v(" "),s("p",[e._v("然而，这个含义的先行词("),s("code",[e._v("R")]),e._v(")通常起到限制(不仅仅是"),s("code",[e._v("x")]),e._v("的类型)所考虑的"),s("code",[e._v("x")]),e._v("的值的作用。换句话说，“R”告诉你“x”的范围。在这种情况下，你可以从下面的一种方式来解读上面的量词:")]),e._v(" "),s("blockquote",[s("p",[e._v('"对于所有满足R的'),s("code",[e._v("x")]),e._v("， "),s("code",[e._v("P")]),e._v("成立")]),e._v(" "),s("p",[e._v('"对于所有的'),s("code",[e._v("x")]),e._v("，使"),s("code",[e._v("R")]),e._v("成立，"),s("code",[e._v("P")]),e._v(' "')]),e._v(" "),s("p",[e._v('"对于所有的'),s("code",[e._v("x")]),e._v("(其中"),s("code",[e._v("x")]),e._v("满足"),s("code",[e._v("R")]),e._v(")， "),s("code",[e._v("P")]),e._v('保持"')]),e._v(" "),s("p",[e._v("“对于所有的"),s("code",[e._v("x")]),e._v("[为"),s("code",[e._v("R")]),e._v("插入你自己的描述性阶段]，"),s("code",[e._v("P")]),e._v("”")])]),e._v(" "),s("p",[e._v("作为最后一个短语的具体实例，你可以读到"),s("code",[e._v("forall x:: x in S ==> x % 2 == 0")]),e._v(" As")]),e._v(" "),s("blockquote",[s("p",[e._v('"对于'),s("code",[e._v("S")]),e._v("中的所有"),s("code",[e._v("x")]),e._v("， "),s("code",[e._v("x")]),e._v('是偶数"')])]),e._v(" "),s("p",[e._v("你可以读到"),s("code",[e._v("forall i:: 0 <= i < a. length ==> a[i] == 5")]),e._v(" as")]),e._v(" "),s("blockquote",[s("p",[e._v('"对于数组'),s("code",[e._v("a")]),e._v("的每个下标"),s("code",[e._v("i")]),e._v("， "),s("code",[e._v("a")]),e._v(" -sub- "),s("code",[e._v("i")]),e._v("是"),s("code",[e._v("5")]),e._v(' "')])]),e._v(" "),s("p",[e._v("和我刚才说的全称量词类似，存在量词的典型形式是连词，比如")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("exists x :: R && P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("例如：")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("exists x :: x in S && x % 2 == 0\n\nexists i :: 0 <= i < a.Length && a[i] == 5\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("再把R看成是告诉你x的范围，你可以把这些存在量词看成")]),e._v(" "),s("blockquote",[s("p",[e._v('"在'),s("code",[e._v("S")]),e._v("中有一个"),s("code",[e._v("x")]),e._v("，其中"),s("code",[e._v("x % 2 == 0")]),e._v('适用"')]),e._v(" "),s("p",[e._v('"在a中有一个索引i，使a -sub- i等于5 "')])]),e._v(" "),s("p",[e._v("在Why3 ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#boogie2011:why3",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),s("OutboundLink")],1),e._v("]之后，如果你将"),s("code",[e._v("R ==> P")]),e._v("作为存在量词的主体，Dafny会发出警告，因为这几乎总是一个用户错误(一个打字错误或一个思考-o)。如果这真的是你想要写的，你可以通过编写以下任何表达式来抑制警告:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("exists x :: (R ==> P)\nexists x :: !R || P\nexists x :: P <== R\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"范围谓词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范围谓词"}},[e._v("#")]),e._v(" 范围谓词")]),e._v(" "),s("p",[e._v("为什么我要花一页来告诉你量词的发音?因为这个讨论强调了一个事实，条件R，在任何一个")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x :: R ==> P\nexists x :: R && P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("扮演着特殊的角色，尽管“R”实际上只是这些量词主体的一部分。事实上，其他人已经为量词采用了一种表示法，该表示法为这个"),s("em",[e._v("范围谓词")]),e._v(" "),s("code",[e._v("R")]),e._v("设置了一个特殊的位置。下面是一些例子:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th"),e._v(" "),s("th"),e._v(" "),s("th")])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Universal quantifier")]),e._v(" "),s("td",[e._v("Existential quantifier")]),e._v(" "),s("td",[e._v("Source")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td")]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("Dijkstra ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#dijkstra:discipline",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("Chandy and Misra ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#chandymisra:book",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("Gries and Schneider ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#griesschneider:proofs",target:"_blank",rel:"noopener noreferrer"}},[e._v("4"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("\\forall X x; R; P")])]),e._v(" "),s("td",[s("code",[e._v("\\exists X x; R; P")])]),e._v(" "),s("td",[e._v("JML ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#leavensbakerruby99a",target:"_blank",rel:"noopener noreferrer"}},[e._v("5"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td")])])]),e._v(" "),s("p",[e._v("(在上面的JML中，"),s("code",[e._v("X")]),e._v("表示"),s("code",[e._v("X")]),e._v("的类型。)在使用这些符号的教科书中，经常有人说:“为了简洁，如果‘R’是‘正确’的，或者是根据上下文理解的，那么它(对于上面的一些作者来说，一些相邻的标点符号)就被省略了。”这些缩写形式是:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th"),e._v(" "),s("th"),e._v(" "),s("th")])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Range listed separately")]),e._v(" "),s("td",[e._v("Range "),s("code",[e._v("true")]),e._v(" or omitted")]),e._v(" "),s("td",[e._v("Source")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td")]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("Dijkstra ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#dijkstra:discipline",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("Chandy and Misra ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#chandymisra:book",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("Gries and Schneider ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#griesschneider:proofs",target:"_blank",rel:"noopener noreferrer"}},[e._v("4"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("\\forall X x; R; P")])]),e._v(" "),s("td",[s("code",[e._v("\\forall X x;; P")])]),e._v(" "),s("td",[e._v("JML ["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#leavensbakerruby99a",target:"_blank",rel:"noopener noreferrer"}},[e._v("5"),s("OutboundLink")],1),e._v("]")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td")])])]),e._v(" "),s("p",[e._v("还有更多的。通过使用一些区分“R”和“P”的符号，量词的德摩根定律看起来特别好:")]),e._v(" "),s("p",[e._v("回到Dafny。如果您喜欢将绑定变量的范围从量词主体的其余部分分隔开的符号，那么您将很高兴地了解到，您也可以在Dafny中这样做。语法是:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x | R :: P\nexists x | R :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"用于量词推理的程序语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用于量词推理的程序语句"}},[e._v("#")]),e._v(" 用于量词推理的程序语句")]),e._v(" "),s("p",[e._v("Dafny包含了一些在推理涉及量词的程序或定理时非常有用的证明特性。它们的语法与量词相似，但也有区别。")]),e._v(" "),s("h3",{attrs:{id:"聚合语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聚合语句"}},[e._v("#")]),e._v(" 聚合语句")]),e._v(" "),s("p",[e._v("Dafny中的"),s("code",[e._v("forall")]),e._v("语句是一个"),s("em",[e._v("聚合语句")]),e._v(":它具有执行多个同时操作的效果。当这句话用于证明时，其形式如下:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x | R\n  ensures P\n{\n  S;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("它用于建立属性"),s("code",[e._v("forall x | R:: P")]),e._v("，即"),s("code",[e._v("forall x:: R == >p")]),e._v("。它是通过检验命题"),s("code",[e._v("S")]),e._v("为任何满足"),s("code",[e._v("R")]),e._v("的"),s("code",[e._v("x")]),e._v("建立"),s("code",[e._v("P")]),e._v("来实现的。在逻辑中，这个命题的结果被称为“普遍引入”。")]),e._v(" "),s("p",[e._v("举个简单的例子，假设你有一个引理可以证明"),s("code",[e._v("n <= Fib(n)")]),e._v("对于任何"),s("code",[e._v("n")]),e._v("至少是"),s("code",[e._v("5")]),e._v("，其中"),s("code",[e._v("Fib")]),e._v("是通常的Fibonacci函数:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Fib(n: nat): nat {\n  if n < 2 then n else Fib(n-2) + Fib(n-1)\n}\n\nlemma FibProperty(n: nat)\n  requires 5 <= n\n  ensures n <= Fib(n)\n{\n  // some proof goes here\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("这个引理给出了一个给定"),s("code",[e._v("n")]),e._v("的属性"),s("code",[e._v("n <= Fib(n)")]),e._v("。但假设你想让这个性质以普遍量子化的形式存在。也就是说，你要证明下面的引理:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("lemma FibPropertyAll()\n  ensures forall n :: 5 <= n ==> n <= Fib(n)\n{\n  // some proof to go here\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("我们怎么写这个证明呢?"),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#fn-fn-fibpropertyall",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("答案是对每个"),s("code",[e._v("n")]),e._v("调用"),s("code",[e._v("FibProperty")]),e._v("一次。一次。对于“n”有无数个不同的值。这就是你对聚合语句"),s("code",[e._v("forall")]),e._v("所做的:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall n | 5 <= n\n  ensures n <= Fib(n)\n{\n  FibProperty(n);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("一般来说，forall语句的主体要比单个引理调用复杂得多。但是当主体"),s("em",[e._v("是")]),e._v("只是一个引理调用或只是一个"),s("code",[e._v("calc")]),e._v("语句时，Dafny会自动推断"),s("code",[e._v("ensure")]),e._v("子句，所以你可以省略它:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall n | 5 <= n {\n  FibProperty(n);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"存在引入与排除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存在引入与排除"}},[e._v("#")]),e._v(" 存在引入与排除")]),e._v(" "),s("p",[e._v("使用存在量化还使用了一系列的证明特征。我将通过写一个证明来证明斐波那契数可以是任意大的:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("lemma EverBigger(k: nat)\n  ensures exists n :: k <= Fib(n)\n{\n  // proof to go here\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("让我们从一些简单的例子开始证明，比如当k很小的时候，比如0或1:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("if k < 2 {\n  // simple case: proof for k being 0 or 1 goes here\n} else {\n  // difficult case: proof for larger k goes here\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("Dafny不能自动证明这两种情况，所以我们需要自己给出更多的证明。")]),e._v(" "),s("p",[e._v("为了证明这个引理在简单的情况下，它足以向验证者证明存在量词持有的一个特定的"),s("code",[e._v("n")]),e._v("。也就是说，我们想给存在量词一个"),s("em",[e._v("见证")]),e._v("。一个这样的见证是"),s("code",[e._v("1")]),e._v("，因为"),s("code",[e._v("k <= 1 == Fib(1)")]),e._v("。另一个这样的见证是"),s("code",[e._v("12")]),e._v("，因为"),s("code",[e._v("k <= 144 == Fib(12)")]),e._v("。另一个这样的见证是"),s("code",[e._v("k")]),e._v("，因为在我们的简单例子中"),s("code",[e._v("k <= k == Fib(k)")]),e._v("。让我们继续这个，所以我们在引理主体的“if”语句的“then”分支中添加一个断言:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("assert k <= Fib(k);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Dafny将证明这个断言"),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#fn-fn-dual-rail-encoding",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),s("OutboundLink")],1),e._v("，然后会注意到"),s("code",[e._v("k")]),e._v("是一个证明后置条件的存在见证。在逻辑中，这被称为“存在论导言”。这意味着，如果你有一个满足特定属性的值，那么这个值就存在。换句话说，如果你有一个“在你手中”的价值，那么这个价值就存在了——这似乎是如此明显，以至于我们谈起它时几乎会感到尴尬(你的邻居听到你以这个为生肯定会认为你疯了)。")]),e._v(" "),s("p",[e._v("那么这个棘手的案例呢?我们可以通过归纳法来证明，首先得到一个n，它的斐波那契值至少为k-1，然后再从中构建一个更大的斐波那契值。首先，我们在“k-1”上递归地调用引理:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("EverBigger(k-1);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这让我们获得了"),s("code",[e._v("EverBigger(k-1)")]),e._v("的后置条件。为了在我们的证明中明确地写下这一点——为了检查验证者是否得出了我们期望从引理调用中得到的结论，并提醒我们自己什么属性——我们可以写一个断言:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("assert exists n` :: k-1 <= Fib(n`);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("好到目前为止。接下来，我们想构造一个至少比Fib(n)大"),s("code",[e._v("1")]),e._v("的斐波那契数，因为这样可以完成证明。但是我刚才提到的n是什么?上面的所有断言都告诉我们存在这样的“n”。我们希望有这样一个“n”在我们手中，这样我们就可以使用它。")]),e._v(" "),s("p",[e._v("从我们知道存在的东西到“在我们手中”的东西被称为“Skolemization”或“existenelimination”。你在Dafny中通过"),s("em",[e._v("assign-such-that")]),e._v("语句实现:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var m: nat :| k-1 <= Fib(m);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这个语句引入了一个局部变量"),s("code",[e._v("m")]),e._v("，并给它一个任意值，满足"),s("code",[e._v("k-1 <= Fib(m)")]),e._v("。当然，如果不存在这样的值，这是不可能的，所以赋值-such-that语句引起了一个证明义务，证明这样的"),s("code",[e._v("m")]),e._v("存在。这个证明义务来自于我们上面断言的属性。")]),e._v(" "),s("p",[e._v("差不多了。为了建立引理的后置条件，我们剩下的计划就是构造一个严格大于"),s("code",[e._v("Fib(m)")]),e._v("的斐波那契数。我们观察到"),s("code",[e._v("Fib(m) + Fib(m+1)")]),e._v("严格大于"),s("code",[e._v("Fib(m)")]),e._v("，因此我们有"),s("code",[e._v("Fib(m+2)")]),e._v("严格大于"),s("code",[e._v("Fib(m)")]),e._v("。")]),e._v(" "),s("p",[e._v("好吧，我们直说了吧。也许我们并没有“观察”到这一点，而是“希望”、“猜想”或“松散地认为”它可能成立。好吧，确实如此。(唷!)我们可以通过询问验证者它是否能为我们证明来验证:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("assert k <= Fib(m) + Fib(m + 1) == Fib(m + 2);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("验证者立即证明了这个断言。"),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#fn-fn-proof",target:"_blank",rel:"noopener noreferrer"}},[e._v("4"),s("OutboundLink")],1),e._v("此外，通过写下这个断言，我们也向验证者展示了见证"),s("code",[e._v("m+2")]),e._v("，它证明了引理的后置条件中的存在量词。")]),e._v(" "),s("p",[e._v("我用这个例子来说明的重点是，你可以用Skolemize一个量词")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("exists x :: P\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("通过assign-such-that语句")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var x :| P;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("注意标点符号的区别。")]),e._v(" "),s("h3",{attrs:{id:"带外参数的引理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带外参数的引理"}},[e._v("#")]),e._v(" 带外参数的引理")]),e._v(" "),s("p",[e._v("我刚刚给你们看了一个涉及存在量词的例子。这个例子表明，“EverBigger”引理的“证明”两次使用了存在性介绍(在简单情况下为"),s("code",[e._v("Fib(k)")]),e._v("，在困难情况下为"),s("code",[e._v("Fib(m+2)")]),e._v(")，从而将“我们手中”的"),s("code",[e._v("k")]),e._v("和"),s("code",[e._v("m+2")]),e._v("转换为存在性量化。这个例子还展示了(递归调用)引理的"),s("em",[e._v("调用")]),e._v("使用存在消除来将引理的后置条件中的存在量化转换为“我们手中的”一个"),s("code",[e._v("m")]),e._v("。让人印象深刻的是，Dafny有这样的特性，它还有一个更有用的特性，可以让你在一开始就避免这些存在-量词转换:引理-参数。")]),e._v(" "),s("p",[e._v("在数学中，引理是由它们所提到的变量参数化的。这些都是参数。一个数学引理很少或永远不会被认为具有外参数。在Dafny中，引理实际上就是一个幽灵方法，一个方法可以同时具有输入参数和输出参数。这是非常有用的。与其用引理来证明某个值的“存在”，还不如直接“返回”某个这样的值。")]),e._v(" "),s("p",[e._v("下面是上面的“EverBigger”引理，但将"),s("code",[e._v("n")]),e._v("声明为out形参:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("lemma EverBigger(k: nat) returns (n: nat)\n  ensures k <= Fib(n)\n{\n  if k < 2 {\n    n := k;\n  } else {\n    var m := EverBigger(k-1);\n    n := m + 2;\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h3",{attrs:{id:"绑定警卫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绑定警卫"}},[e._v("#")]),e._v(" 绑定警卫")]),e._v(" "),s("p",[e._v("Dafny还包含了另一个特性，使量词的使用更加流畅:带有*binding guard *的"),s("code",[e._v("if")]),e._v("语句。这样的语句回答了“如果有一个，给我一个在我手里”的命令。")]),e._v(" "),s("p",[e._v("假设我们写一个证明，根据y是否为斐波那契数分成两种情况。然后我们可以这样写:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("if exists n :: y == Fib(n) {\n  var n :| y == Fib(n);\n  // y is the nth Fibonacci number\n} else {\n  // y is not a Fibonacci number\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("这表达了我们想要的，但感觉有点笨拙，因为我们重复了条件"),s("code",[e._v("y == Fib(n)")]),e._v("。我们可以将这个“if”语句写成")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("if n :| y == Fib(n) {\n  // y is the nth Fibonacci number\n} else {\n  // y is not a Fibonacci number\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("code",[e._v(":|")]),e._v("与赋值such-that语句中的标点相同，而不是存在量词中类似位置的"),s("code",[e._v("::")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"集合和映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合和映射"}},[e._v("#")]),e._v(" 集合和映射")]),e._v(" "),s("p",[e._v("逻辑量词和其他结构引入了一些绑定变量，并以某种方式限制了这些绑定变量的取值范围。集合理解和映射理解也是如此。")]),e._v(" "),s("h3",{attrs:{id:"集合理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合理解"}},[e._v("#")]),e._v(" 集合理解")]),e._v(" "),s("p",[e._v("很容易在Dafny写下一组。例如,")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{ 2, 3, 5 }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("是三个最小素数的集合。这样的表达式，其中集合的元素被显式列出，称为"),s("em",[e._v("set display")]),e._v("。但是，如果您想要定义的集合不能写成集合显示，该怎么办?")]),e._v(" "),s("p",[e._v("集合理解以图解的方式定义了一组元素。在普通数学符号中集合理解的一个例子是")]),e._v(" "),s("p",[e._v("定义了最小的100个自然数的集合。另一个例子是")]),e._v(" "),s("p",[e._v("它定义了100个最小的完全平方数。这两个推导式中的绑定变量都是，指定range的值由谓词定义。让范围超过这些值，第一个集合然后包含表单的元素，而第二个集合包含表单的元素。也就是说，在第一个集合中，元素是自身的合法值，而在第二个集合中，元素是每个合法值的平方。")]),e._v(" "),s("p",[e._v("更一般地说，数学符号的形状是这样的。读者应该理解这是绑定变量。理解为绑定变量，我们可以通过精确描述集合何时包含一个元素来定义集合推导式:")]),e._v(" "),s("p",[e._v("或者，使用存在函数的取值范围单独给出的符号:")]),e._v(" "),s("p",[e._v("在Dafny中，同样的集合理解有如下形式:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set x | R :: f(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("x")]),e._v("是绑定变量(或者，更普遍地说，一个绑定变量的列表)，"),s("code",[e._v("R")]),e._v("是绑定变量的范围谓词，而"),s("code",[e._v("f(x)")]),e._v("是集合推导的"),s("em",[e._v("项表达式")]),e._v("。绑定变量被显式列出，不像普通的数学符号，读者必须推断绑定变量是什么。上面给出的两个示例集在Dafny中写如下:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set x | 0 <= x < 100 :: x\nset x | 0 <= x < 100 :: x*x\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("虽然乍一看不太简洁，但显式列出绑定变量的表示法有一些细微之处。")]),e._v(" "),s("p",[e._v("一个细微之处是，就像上面一样，量词的定义显示了符号的相似性:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("y in (set x | R :: f(x))   <==>   exists x | R :: y == f(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("另一个优点是可以很容易地列出附加的绑定变量。假设"),s("code",[e._v("R")]),e._v("是"),s("code",[e._v("x")]),e._v("和"),s("code",[e._v("z")]),e._v("的谓词，那么这里有两个例子:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set x,n | Fib(n) <= x < Fib(n) + n :: f(x)\nset x,n | Fib(n) <= x < Fib(n) + n :: g(x,n)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("第一个集合包含f(x)对于每个在"),s("code",[e._v("n")]),e._v("范围内的"),s("code",[e._v("x")]),e._v("对于某些"),s("code",[e._v("n")]),e._v("的"),s("code",[e._v("Fib(n)")]),e._v("。用普通的数学符号来表示它的一种等价的方式是:")]),e._v(" "),s("p",[e._v("第二个集合包含"),s("code",[e._v("g(x,n)")]),e._v("对于每个"),s("code",[e._v("x")]),e._v("和"),s("code",[e._v("n")]),e._v("，使"),s("code",[e._v("x")]),e._v("在"),s("code",[e._v("Fib(n)")]),e._v("的"),s("code",[e._v("n")]),e._v("之内。在这里，等效的数学符号更笨拙，需要使用另一个绑定变量:")]),e._v(" "),s("p",[e._v("Dafny使绑定变量显式的一般表示法也被许多作者使用(例如，["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#dijkstra:discipline",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),s("OutboundLink")],1),e._v("， "),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#griesschneider:proofs",target:"_blank",rel:"noopener noreferrer"}},[e._v("4"),s("OutboundLink")],1),e._v("])。它也类似于其他语言中使用的列表理解表示法。例如，Dafny系列")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set x,y | 0 <= x <= y <= 100 && x + y == 100 :: (x,y)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("它包含一对自然数之和为"),s("code",[e._v("100")]),e._v("，包含与Python列表相同的元素:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[(x,y) for x in range(0, 101) for y in range(x, 101) if x + y == 100]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Haskell名单:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[(x,y) | x <- [0..100], y <- [x..100], x + y = 100]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"简化的集合理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简化的集合理解"}},[e._v("#")]),e._v(" 简化的集合理解")]),e._v(" "),s("p",[e._v("我刚刚花了很多文字来描述Dafny中的一般集合理解符号。然而，在实践中的许多集合推导中，只有一个约束变量，而术语表达式就是那个约束变量。例如，我们已经看到，最小的“100”自然数的集合是:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set x | 0 <= x < 100 :: x\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("对于这种常见的情况，Dafny允许你省略术语表达式，只需要写:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set x | 0 <= x < 100\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这个表达式看起来像普通的数学符号。事实上，对于这些简化的集合推导式，很容易“理解”数学符号想要表达的约束变量是什么。")]),e._v(" "),s("p",[e._v("作为Dafny中验证器的一个注释，自动化倾向于更好地工作于简化的集合推导式，其中术语表达式可以被省略。")]),e._v(" "),s("h3",{attrs:{id:"映射理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#映射理解"}},[e._v("#")]),e._v(" 映射理解")]),e._v(" "),s("p",[e._v("一个"),s("em",[e._v("map")]),e._v("本质上是一组对，其中对的左元素是唯一的(也就是说，每个左元素在功能上决定了相应的右元素)。与集合的显示表达式一样，map可以通过"),s("em",[e._v("map display")]),e._v("来定义。例如,")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map[2 := `c`, 137 := `a`]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("将整数"),s("code",[e._v("2")]),e._v("映射到字符"),s("code",[e._v("c")]),e._v("，将整数"),s("code",[e._v("137")]),e._v("映射到字符"),s("code",[e._v("a")]),e._v("。每一对像"),s("code",[e._v("2:= c")]),e._v("可以被称为一个"),s("em",[e._v("maplet")]),e._v("。此外，maplet的左元素称为a "),s("em",[e._v("key")]),e._v("，右元素获得不可描述的名称"),s("em",[e._v("value")]),e._v("。")]),e._v(" "),s("p",[e._v("与集合的理解一样，映射可以通过"),s("em",[e._v("map理解")]),e._v("来定义。它的形式是:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map x | R :: f(x) := g(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("例如，")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map x | 0 <= x < 100 :: x*x := x\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("是从前100个完全平方数到它们各自的平方根的映射。")]),e._v(" "),s("p",[e._v("如果您将映射理解理解为一组具有唯一键的maplets，那么您基本上已经理解了符号。不过，我将提供一些注释并指出映射特有的一些特性。")]),e._v(" "),s("p",[e._v("需要注意的一点是，maplets必须具有唯一的键。例如，验证者会抱怨，如果你试着写一个像这样的映射理解")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map x | -10 <= x <= 10 :: x*x := x\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("因为它说把4映射到2和-2上，这是没用的。")]),e._v(" "),s("p",[e._v("一般的映射理解表达是相当灵活的。例如，假设"),s("code",[e._v("m")]),e._v("是一个从数字到字符的映射，并假设我们想要创建一个新的映射"),s("code",[e._v("n")]),e._v("，从"),s("code",[e._v("m")]),e._v("中的键的子集到其他一些字符。更准确地说，当"),s("code",[e._v("m")]),e._v("中的键在函数"),s("code",[e._v("f")]),e._v("的图像中，比如一个键"),s("code",[e._v("f(x)")]),e._v("对于某个"),s("code",[e._v("x")]),e._v("，然后我们想让"),s("code",[e._v("n")]),e._v("将这个键映射到"),s("code",[e._v("h(x)")]),e._v("。然后我们将n定义为")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map x | f(x) in m.Keys :: f(x) := h(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("然而，大多数时候，我们倾向于写的映射理解具有这种形式")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map x | R :: x := g(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("对于这些常见的映射，Dafny允许我们省略“"),s("code",[e._v("x:=")]),e._v("”，只写")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map x | R :: g(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在实践中，几乎所有的映射理解都可以用这种简化的形式来写。但是当简化形式不充分时(就像上面的maplets "),s("code",[e._v("f(x):= h(x)")]),e._v("的例子一样)，一般形式是可用的。")]),e._v(" "),s("h3",{attrs:{id:"lambda-expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda-expressions"}},[e._v("#")]),e._v(" Lambda expressions")]),e._v(" "),s("p",[e._v("最后，要注意映射和函数之间的区别。您可以将map看作是一个预先计算好的表，而函数则是从一个给定的键中计算出一个值。为了进行比较，让我们考虑编写映射")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("map x | R :: g(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("作为一个函数。")]),e._v(" "),s("p",[e._v("通常，函数是用名称声明的。上面的映射是沿着线写的")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function F(x: X): Y\n  requires R\n{\n  g(x)\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("函数也可以是匿名的，在这种情况下，它通常被称为"),s("em",[e._v("lambda表达式")]),e._v("。然后编写示例映射")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("x requires R => g(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),s("p",[e._v("以下是本文中讨论的语法形式:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("forall x :: P\nforall x | R :: P\nforall x | R ensures P { S; }\nexists x :: P\nexists x | R :: P\nvar x :| P;\nif x :| P { S; }\nset x | R :: f(x)\nset x | R\nmap x | R :: f(x) := h(x)\nmap x | R :: g(x)\nfunction F(x: X): Y { g(x) }\nx requires R => g(x)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("h2",{attrs:{id:"致谢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#致谢"}},[e._v("#")]),e._v(" 致谢")]),e._v(" "),s("p",[e._v("我很感谢Jay Lorch在这张便条上的许多有帮助的评论。")]),e._v(" "),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),s("p",[e._v("[0]Nada Amin, K. Rustan M. Leino, and Tiark Rompf. Computing with an SMT solver. In Martina Seidl and Nikolai Tillmann, editors, "),s("em",[e._v("Tests and Proofs — 8th International Conference, TAP 2014")]),e._v(", volume 8570 of "),s("em",[e._v("Lecture Notes in Computer Science")]),e._v(", pages 20–35. Springer, July 2014. "),s("a",{attrs:{href:"http://www.bing.com/search?q=Computing+with+solver++Nada+Amin+Rustan+Leino+Tiark+Rompf+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("[1]François Bobot, Jean-Christophe Filliâtre, Claude Marché, and Andrei Paskevich. Why3: Shepherd your herd of provers. In "),s("em",[e._v("Boogie 2011: First International Workshop on Intermediate Verification Languages")]),e._v(", pages 53–64, Wrocław, Poland, August 2011. "),s("a",{attrs:{href:"https://hal.inria.fr/hal-00790310",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://hal.inria.fr/hal-00790310"),s("OutboundLink")],1),e._v(". "),s("a",{attrs:{href:"http://www.bing.com/search?q=Fran+Bobot+Jean+Christophe+Filli+Claude+March+Andrei+Paskevich+Why3+Shepherd+your+herd+provers+_Boogie+First+International+Workshop+Intermediate+Verification+Languages_+pages+Wroc+Poland+August+https+inria++",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("[2]K. Mani Chandy and Jayadev Misra. "),s("em",[e._v("Parallel Program Design: A Foundation")]),e._v(". Addison-Wesley, 1988. "),s("a",{attrs:{href:"http://www.bing.com/search?q=_Parallel+Program+Design+Foundation_+++Mani+Chandy+Jayadev+Misra+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("[3]Edsger W. Dijkstra. "),s("em",[e._v("A Discipline of Programming")]),e._v(". Prentice Hall, Englewood Cliffs, NJ, 1976. "),s("a",{attrs:{href:"http://www.bing.com/search?q=+Discipline+Programming_++Edsger+Dijkstra+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("[4]David Gries and Fred B. Schneider. "),s("em",[e._v("A Logical Approach to Discrete Math")]),e._v(". Texts and Monographs in Computer Science. Springer-Verlag, 1994. "),s("a",{attrs:{href:"http://www.bing.com/search?q=+Logical+Approach+Discrete+Math_++David+Gries+Fred+Schneider+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("[5]Gary T. Leavens, Albert L. Baker, and Clyde Ruby. JML: A notation for detailed design. In Haim Kilov, Bernhard Rumpe, and Ian Simmonds, editors, "),s("em",[e._v("Behavioral Specifications of Businesses and Systems")]),e._v(", pages 175–188. Kluwer Academic Publishers, 1999. "),s("a",{attrs:{href:"http://www.bing.com/search?q=+notation+detailed+design++Gary+Leavens+Albert+Baker+Clyde+Ruby+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("[6]K. Rustan M. Leino and Clément Pit-Claudel. Trigger selection strategies to stabilize program verifiers. In Swarat Chaudhuri and Azadeh Farzan, editors, "),s("em",[e._v("Computer Aided Verification - 28th International Conference, CAV 2016, Proceedings, Part I")]),e._v(", volume 9779 of "),s("em",[e._v("Lecture Notes in Computer Science")]),e._v(", pages 361–381. Springer, 2016. "),s("a",{attrs:{href:"http://www.bing.com/search?q=Trigger+selection+strategies+stabilize+program+verifiers+++Rustan+Leino+ment+Claudel+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),s("OutboundLink")],1)]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("0.用于Dafny排版的Emacs IDE某些Dafny结构的符号你更可能在论文中看到。默认情况下，它显示"),s("code",[e._v("forall x:: P")]),e._v(" as和显示"),s("code",[e._v("exists x:: P")]),e._v(" as。[↩](http://leino.science/papers/krml267.html # back-fn-fn-emacs)")]),e._v(" "),s("p",[e._v("1.在内部，Dafny验证器可以更有效地使用某些量词。验证者试图检测一个给定量词的另一种形式何时可能执行得更好，并将在这些情况下自动重写量词["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#leinopit-claudel:cav2016",target:"_blank",rel:"noopener noreferrer"}},[e._v("6"),s("OutboundLink")],1),e._v("]。例如，它可以选择解除某些量词的嵌套。这种重写的目标是在获得良好的验证性能的同时支持自然外观的程序。[↩](http://leino.science/papers/krml267.html # back-fn-fn-nested)")]),e._v(" "),s("p",[e._v("2.事实证明，Dafny的自动归纳将自动证明"),s("code",[e._v("FibProperty")]),e._v("和"),s("code",[e._v("FibPropertyAll")]),e._v("。如果这是我们唯一关心的引理，那就没有什么好说或做的了。尽管如此，我还是用这个例子来展示“forall”语句。如果你想要确保我将要说的是一个证明，你可以通过使用属性"),s("code",[e._v("{:induction false}")]),e._v("来关闭"),s("code",[e._v("FibPropertyAll")]),e._v("的自动感应。[↩](http://leino.science/papers/krml267.html # back-fn-fn-fibpropertyall)")]),e._v(" "),s("p",[e._v("3.Dafny也可以证明类似断言"),s("code",[e._v("assert Fib(12) == 144;")]),e._v("。在内部，Dafny使用了函数的“双轨编码”，使其能够获得"),s("code",[e._v("Fib(12)")]),e._v("的值(因为"),s("code",[e._v("12")]),e._v("是一个文字常量)和"),s("code",[e._v("Fib(k)")]),e._v("(其中"),s("code",[e._v("k")]),e._v("是一个变量)。如果您对这是如何实现的感兴趣，我建议您访问["),s("a",{attrs:{href:"http://leino.science/papers/krml267.html#aminetal:computingwithsmt",target:"_blank",rel:"noopener noreferrer"}},[e._v("0"),s("OutboundLink")],1),e._v("]。[↩](http://leino.science/papers/krml267.html # back-fn-fn-dual-rail-encoding)")]),e._v(" "),s("p",[e._v("4.这里是断言"),s("code",[e._v("k <= Fib(m) + Fib(m+1)")]),e._v("的一个证明。在我们的证明中，“困难的情况”适用于当"),s("code",[e._v("k")]),e._v("至少为"),s("code",[e._v("2")]),e._v("时，所以"),s("code",[e._v("k-1")]),e._v("至少为"),s("code",[e._v("1")]),e._v("，所以我们知道"),s("code",[e._v("Fib(m)")]),e._v("至少为"),s("code",[e._v("1")]),e._v("。由此可以得出结论，对于Fib(0) == 0， "),s("code",[e._v("m")]),e._v("不能为"),s("code",[e._v("0")]),e._v("。这很重要，因为这意味着"),s("code",[e._v("m+1")]),e._v("至少等于"),s("code",[e._v("2")]),e._v("，因此适用于"),s("code",[e._v("Fib")]),e._v("定义的归纳情况。换句话说，我们有"),s("code",[e._v("Fib(m+1) == Fib(m) + Fib(m-1)")]),e._v("。我们已经得出，Fib(m)至少等于1。以"),s("code",[e._v("Fib")]),e._v("返回"),s("code",[e._v("nat")]),e._v("为例，我们知道"),s("code",[e._v("Fib(m-1)")]),e._v("至少为"),s("code",[e._v("0")]),e._v("。所以，Fib(m+1)至少等于1。换句话说，"),s("code",[e._v("Fib(m) + Fib(m+1)")]),e._v("至少比"),s("code",[e._v("Fib(m)")]),e._v("大于"),s("code",[e._v("1")]),e._v("，而"),s("code",[e._v("Fib(m)")]),e._v("至少等于"),s("code",[e._v("k-1")]),e._v("。因此，"),s("code",[e._v("Fib(m) + Fib(m+1)")]),e._v("至少等于"),s("code",[e._v("k")]),e._v("。")]),e._v(" "),s("p",[e._v("如果我们把“简单的情况”和“困难的情况”分开，使“简单的情况”只包含“k == 0”，那么我们不可能在上面的论证中得出“m != 0”的结论。其他交互式证明助手的一些用户可能会对此感到困扰，因为他们会说"),s("code",[e._v("k")]),e._v("具有"),s("code",[e._v("nat")]),e._v("类型，因此对"),s("code",[e._v("k")]),e._v("的归纳应该使用"),s("code",[e._v("k == 0")]),e._v("作为基本情况。数学对归纳法没有这样的限制，事实上，正如这个证明所显示的，我们可以从将“EverBigger”的情况分成“k < 2”和“2 <= k”中获益。[↩](http://leino.science/papers/krml267.html # back-fn-fn-proof)")])])}),[],!1,null,null,null);a.default=r.exports}}]);
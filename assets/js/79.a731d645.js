(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{563:function(e,s,t){"use strict";t.r(s);var a=t(18),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Dafny Power User:\nFunctions over Set Elements")]),e._v(" "),t("p",[e._v("K. Rustan M. Leino")]),e._v(" "),t("p",[e._v("Manuscript KRML 274, 16 February 2020")]),e._v(" "),t("p",[t("strong",[e._v("Abstract.")]),e._v(" In natural language, it is easy to say and understand a phrase like “the sum of the numbers in a set”. Defining and working with such functions in a formal settings is more work. The problem has to do with how a recursively defined function picks the next element from a set. This note describes a representative example and describes how to make the formal mumbo-jumbo work out. The solution can be applied to any commutative and associative operation on a set.")]),e._v(" "),t("h2",{attrs:{id:"_0-summing-the-elements-of-a-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-summing-the-elements-of-a-set"}},[e._v("#")]),e._v(" 0. Summing the elements of a set")]),e._v(" "),t("p",[e._v("Suppose we have a function that returns the sum of the integers in a set:")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Sum(s: set<int>): int\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("If we add an element "),t("code",[e._v("y")]),e._v(" to a set, we expect its sum to go up by "),t("code",[e._v("y")]),e._v(". That is, we expect that the following method is correctly implemented:")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("method AddElement(s: set<int>, a: int, y: int) returns (t: set<int>, b: int)\n  requires a == Sum(s) && y !in s\n  ensures t == s + {x} && b == Sum(t)\n{\n  t := s + {y};\n  b := a + y;\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("It turns out, the proof is not automatic. Let's look at the details and fill in the proof.")]),e._v(" "),t("h2",{attrs:{id:"_1-recursive-definition-of-sum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-recursive-definition-of-sum"}},[e._v("#")]),e._v(" 1. Recursive definition of Sum")]),e._v(" "),t("p",[e._v("Function "),t("code",[e._v("Sum")]),e._v(" is defined recursively. The sum of the empty set is "),t("code",[e._v("0")]),e._v(". If the set is nonempty, pick one of its elements, say "),t("code",[e._v("x")]),e._v(". Then, add "),t("code",[e._v("x")]),e._v(" to the recursively computed sum of the remaining elements.")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Sum(s: set<int>): int {\n  if s == {} then 0 else\n    var x := Pick(s);\n    x + Sum(s - {x})\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("This definition uses a function "),t("code",[e._v("Pick")]),e._v(", which returns an arbitrary element from a given set. Here is its definition:")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Pick(s: set<int>): int\n  requires s != {}\n{\n  var x :| x in s; x\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("I'll come back to "),t("code",[e._v("Pick")]),e._v(" later. All you need to understand at this time is that the caller of "),t("code",[e._v("Pick")]),e._v(" has no control over which element of "),t("code",[e._v("s")]),e._v(" is returned.")]),e._v(" "),t("h2",{attrs:{id:"_2-the-proof-that-fails"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-the-proof-that-fails"}},[e._v("#")]),e._v(" 2. The proof that fails")]),e._v(" "),t("p",[e._v("To prove "),t("code",[e._v("AddElement")]),e._v(", we need to show "),t("code",[e._v("b == Sum(t)")]),e._v(" holds in its final state. Working backwards over the assignments, this means we need to show")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a + y == Sum(s + {y})\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("in the initial state. Since "),t("code",[e._v("a")]),e._v(" is "),t("code",[e._v("Sum(s)")]),e._v(", our proof obligation comes down to")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Sum(s) + y == Sum(s + {y})\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("where we are given that "),t("code",[e._v("y")]),e._v(" is not in "),t("code",[e._v("s")]),e._v(".")]),e._v(" "),t("p",[e._v("Suppose "),t("code",[e._v("Pick(s + {y})")]),e._v(" returns "),t("code",[e._v("y")]),e._v(". Then, we have")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  Sum(s + {y});\n==  // def. Sum\n  var x := Pick(s + {y}); x + Sum(s + {y} - {x});\n==  // using the assumption Pick(s + {y}) == y\n  y + Sum(s + {y} - {y});\n==  // sets, since y !in s\n  y + Sum(s);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("That was easy and straightforward. But for this proof, we assumed that the relevant call to "),t("code",[e._v("Pick")]),e._v(" returned "),t("code",[e._v("y")]),e._v(". What if "),t("code",[e._v("Pick")]),e._v(" returns a different element from "),t("code",[e._v("s")]),e._v("?")]),e._v(" "),t("h2",{attrs:{id:"_3-picking-something-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-picking-something-else"}},[e._v("#")]),e._v(" 3. Picking something else")]),e._v(" "),t("p",[e._v("Before you realize "),t("code",[e._v("Pick")]),e._v(" can choose a different element than the one you have in mind, the clouds start to clear. What we need is a lemma that says the choice is immaterial. That is, the lemma will let us treat "),t("code",[e._v("Sum")]),e._v(" as if it picks, when doing its recursive call, an element that we specify.")]),e._v(" "),t("p",[e._v("Here is that lemma. The proof is also a little tricky at first. It comes down to letting "),t("code",[e._v("Pick")]),e._v(" choose whatever element it chooses, and then applying the induction hypothesis on the smaller set that "),t("code",[e._v("Sum")]),e._v(" recurses on.")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("lemma SumMyWay(s: set<int>, y: int)\n  requires y in s\n  ensures Sum(s) == y + Sum(s - {y})\n{\n  var x := Pick(s);\n  if y == x {\n  } else {\n    calc {\n      Sum(s);\n    ==  // def. Sum\n      x + Sum(s - {x});\n    ==  { SumMyWay(s - {x}, y); }\n      x + y + Sum(s - {x} - {y});\n    ==  { assert s - {x} - {y} == s - {y} - {x}; }\n      y + x + Sum(s - {y} - {x});\n    ==  { SumMyWay(s - {y}, x); }\n      y + Sum(s - {y});\n    }\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br")])]),t("p",[e._v("I stated the lemma to look like the expressions in the body of "),t("code",[e._v("Sum")]),e._v(", so the two arguments to "),t("code",[e._v("Sum")]),e._v(" are "),t("code",[e._v("s")]),e._v(" and "),t("code",[e._v("s - {y}")]),e._v(". Alternatively, we can state the property in terms of calls to "),t("code",[e._v("Sum")]),e._v(" with the arguments "),t("code",[e._v("s + {y}")]),e._v(" and "),t("code",[e._v("s")]),e._v(". This alternative is a simple corollary of the lemma above:")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("lemma AddToSum(s: set<int>, y: int)\n  requires y !in s\n  ensures Sum(s + {y}) == Sum(s) + y\n{\n  SumMyWay(s + {y}, y);\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("Using the lemma")]),e._v(" "),t("p",[e._v("Equipped with the useful lemma, it's easy to get the proof of "),t("code",[e._v("AddElement")]),e._v(" go through: change its body to")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("t := s + {y};\nb := a + y;\nAddToSum(s, y);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h2",{attrs:{id:"_4-inlining-pick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-inlining-pick"}},[e._v("#")]),e._v(" 4. Inlining Pick")]),e._v(" "),t("p",[e._v("In the development above, I define "),t("code",[e._v("Pick")]),e._v(" as a separate function. Reading the word “pick” in the program text may help understand what "),t("code",[e._v("Sum")]),e._v(" and "),t("code",[e._v("SumMyWay")]),e._v(" do. But it's such a small function, so why not just inline it in the two places where it's used. Let's try it:")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Sum(s: set<int>): int {\n  if s == {} then 0 else\n    var x :| x in s;  // this line takes the place of a call to Pick\n    x + Sum(s - {x})\n}\n\nlemma SumMyWay(s: set<int>, y: int)\n  requires y in s\n  ensures Sum(s) == y + Sum(s - {y})\n{\n  var x :| x in s;  // this line takes the place of a call to Pick\n  if y == x {  // error: postcondition might not hold on this path\n  } else {\n    calc {\n      Sum(s);\n    ==  // def. Sum        // error: this step might not hold\n      x + Sum(s - {x});\n    ==  { SumMyWay(s - {x}, y); }\n      x + y + Sum(s - {x} - {y});\n    ==  { assert s - {x} - {y} == s - {y} - {x}; }\n      y + x + Sum(s - {y} - {x});\n    ==  { SumMyWay(s - {y}, x); }\n      y + Sum(s - {y});\n    }\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br")])]),t("p",[e._v("We now get two errors!")]),e._v(" "),t("p",[e._v("To explain what's going on, let me say a little more about "),t("code",[e._v(":|")]),e._v(" and what makes it unusual.")]),e._v(" "),t("h2",{attrs:{id:"_5-let-such-that"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-let-such-that"}},[e._v("#")]),e._v(" 5. Let such that")]),e._v(" "),t("p",[e._v("The let-such-that construct in Dafny has the form")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var x :| P; E\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("It evaluates to "),t("code",[e._v("E")]),e._v(", where "),t("code",[e._v("x")]),e._v(" is bound to some value satisfying "),t("code",[e._v("P")]),e._v(". For example,")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var x :| 7 <= x < 10; 2 * x\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("evaluates to "),t("code",[e._v("14")]),e._v(", "),t("code",[e._v("16")]),e._v(", or "),t("code",[e._v("18")]),e._v(". As the programmer, you have no control over which value of "),t("code",[e._v("x")]),e._v(" is chosen. But you do get to know two important things. One is that "),t("code",[e._v("x")]),e._v(" will be chosen to be a value that satisfies "),t("code",[e._v("P")]),e._v(". (The Dafny verifier gives an error if it cannot prove such a value to exist.) The other is that you will get the same value every time you evaluate the expression with the same inputs. In other words, the operator is deterministic.")]),e._v(" "),t("p",[e._v("Here is another example to illustrate the point about determinism:")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var x :| x in {2, 3, 5}; x\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("This expression chooses "),t("code",[e._v("x")]),e._v(" to be one of the three smallest primes ("),t("code",[e._v("2")]),e._v(", "),t("code",[e._v("3")]),e._v(", or "),t("code",[e._v("5")]),e._v(") and then returns it. You don't know which of the three values you get, but you are guaranteed that every time this expression is evaluated within one run of a program, you will get the same value.")]),e._v(" "),t("p",[e._v("Let's be more precise about what I mean by “this expression”. In Dafny, every "),t("em",[e._v("textual occurrence")]),e._v(" of a let-such-that expression gets to make its own choices. One way to think about this is to go through the text of your program and to color each "),t("code",[e._v(":|")]),e._v(" operator with a unique color. Then, you can rely on choices being the same only if they are performed by the same-color "),t("code",[e._v(":|")]),e._v(".")]),e._v(" "),t("p",[e._v("Here is an illustrative example.")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("lemma Choices(s: set<int>)\n  requires s != {}\n{\n  var a := Pick(s);\n  var b := Pick(s);\n  assert a == b;  // this is provable\n  a := var x :| x in s; x;\n  b := var x :| x in s; x;\n  assert a == b;  // error: not provable\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("The first values assigned to "),t("code",[e._v("a")]),e._v(" and "),t("code",[e._v("b")]),e._v(" originate from the same "),t("code",[e._v(":|")]),e._v(" operator. They are the results of choices of the same color. Therefore, they are known to be the same. In contrast, the next values assigned to "),t("code",[e._v("a")]),e._v(" and "),t("code",[e._v("b")]),e._v(" originate from different "),t("code",[e._v(":|")]),e._v(" operators—ones of different colors. Therefore, you cannot be sure "),t("code",[e._v("a")]),e._v(" and "),t("code",[e._v("b")]),e._v(" are equal.")]),e._v(" "),t("p",[e._v("Actually, if you think about it a little more (or, maybe, a little less), then you realize that we know the first values assigned to "),t("code",[e._v("a")]),e._v(" and "),t("code",[e._v("b")]),e._v(" to be equal even without knowing anything about the body of "),t("code",[e._v("Pick")]),e._v(". After all, "),t("code",[e._v("Pick")]),e._v(" is a function, and if you call a function twice on the same arguments, it will give you back the same value. Mathematics guarantees this, and so does Dafny. So, then what about the second assignments to "),t("code",[e._v("a")]),e._v(" and "),t("code",[e._v("b")]),e._v("; aren't the "),t("code",[e._v(":|")]),e._v(" operators in those expressions also functions? Yes, they are, but they are different functions. They are functions of different colors, to follow that analogy. As long as you think of every occurrence of "),t("code",[e._v(":|")]),e._v(" in your program as being a "),t("em",[e._v("different")]),e._v(" function, then all mathematics work out as you'd expect.")]),e._v(" "),t("p",[e._v("This is why it was easier for me to describe the "),t("code",[e._v("Sum")]),e._v(" situation if I could use just one "),t("code",[e._v(":|")]),e._v(". To reuse that same "),t("code",[e._v(":|")]),e._v(", I placed it in a function, which I named "),t("code",[e._v("Pick")]),e._v(". I recommend you do the same if you're working with ghost functions that involve choices that you want to prove properties about.")]),e._v(" "),t("h2",{attrs:{id:"_6-different-choices"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-different-choices"}},[e._v("#")]),e._v(" 6. Different choices")]),e._v(" "),t("p",[e._v("If you tried to define "),t("code",[e._v("Sum")]),e._v(" and use it in "),t("code",[e._v("AddElement")]),e._v(" before understanding these issues, you would be perplexed. Now, you know that it is easier to put "),t("code",[e._v(":|")]),e._v(" into a function by itself, and you know that you'll need to write a lemma like "),t("code",[e._v("SumMyWay")]),e._v(". You may be curious if it's possible to do without the "),t("code",[e._v("Pick")]),e._v(" function. That is, you may wonder if there's any way to use one "),t("code",[e._v(":|")]),e._v(" operator in "),t("code",[e._v("Sum")]),e._v(" and another "),t("code",[e._v(":|")]),e._v(" operator in "),t("code",[e._v("SumMyWay")]),e._v(". Yes, it is possible. Let me show you how.")]),e._v(" "),t("p",[e._v("Suppose we inline "),t("code",[e._v("Pick")]),e._v(" in function "),t("code",[e._v("Sum")]),e._v(". That is, suppose we define "),t("code",[e._v("Sum")]),e._v(" as in Section "),t("a",{attrs:{href:"http://leino.science/papers/krml274.html#sec-inlining-pick",target:"_blank",rel:"noopener noreferrer"}},[e._v("4"),t("OutboundLink")],1),e._v(" above. In that section, I mentioned that you'll get a couple of errors if you also inline "),t("code",[e._v("Pick")]),e._v(" in "),t("code",[e._v("SumMyWay")]),e._v(". Both of those errors stem from the fact that "),t("code",[e._v("Sum")]),e._v(" and "),t("code",[e._v("SumMyWay")]),e._v(" make different choices. But we can be more specific in the lemma, to force it to choose the same element as the one chosen in "),t("code",[e._v("Sum")]),e._v(".")]),e._v(" "),t("p",[e._v("You can do that by saying you want "),t("code",[e._v("x")]),e._v(" not just to be in "),t("code",[e._v("s")]),e._v(", but to be a value that makes")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Sum(s) == x + Sum(s - {x})\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("hold true. Only one such "),t("code",[e._v("x")]),e._v(" exists, and it's the one that "),t("code",[e._v("Sum")]),e._v(" chooses. So, if you write lemma as follows:")]),e._v(" "),t("div",{staticClass:"language-dafnyx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("lemma SumMyWay(s: set<int>, y: int)\n  requires y in s\n  ensures Sum(s) == y + Sum(s - {y})\n{\n  var x :| x in s && Sum(s) == x + Sum(s - {x});\n  if y == x {\n  } else {\n    // same calc statement as before...\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("then it verifies! This is good to know, but it seems cleaner to introduce the function "),t("code",[e._v("Pick")]),e._v(" around your "),t("code",[e._v(":|")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"_7-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-summary"}},[e._v("#")]),e._v(" 7. Summary")]),e._v(" "),t("p",[e._v("Beware that every textual occurrence of "),t("code",[e._v(":|")]),e._v(" in your program is a different function. You'll have a simpler time working with "),t("code",[e._v(":|")]),e._v(" if you roll it into a function that you name, because then you reduce the chance of becoming confused because of different kinds (different “colors”) of choices.")]),e._v(" "),t("p",[e._v("Also, beware that the choice made by "),t("code",[e._v(":|")]),e._v(" may not be the choice you need. You'll probably want to prove a lemma that says any choice gives the same result in the end. Use lemma "),t("code",[e._v("SumMyWay")]),e._v(" above as a template for your proof.")])])}),[],!1,null,null,null);s.default=n.exports}}]);
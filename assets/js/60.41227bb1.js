(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{546:function(s,a,e){"use strict";e.r(a);var n=e(18),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"不同类型的证明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同类型的证明"}},[s._v("#")]),s._v(" 不同类型的证明")]),s._v(" "),e("blockquote",[e("p",[e("em",[s._v("K. Rustan M. Leino Manuscript KRML 276, 9 March 2020")])])]),s._v(" "),e("p",[e("strong",[s._v("摘要")]),s._v(" 就像写作和口语中有不同的句子结构来表达不同的想法一样，也有不同的证明结构来表达证明。这条注释显示了在Dafny中可能出现的一些变化。")]),s._v(" "),e("p",[s._v("让我们考虑不同的证明写作风格。作为一个运行的例子，我们将首先定义一个函数及其行为的一些公理。")]),s._v(" "),e("h2",{attrs:{id:"一个示例问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个示例问题"}},[s._v("#")]),s._v(" 一个示例问题")]),s._v(" "),e("p",[s._v("考虑一个带有两个参数的整数函数"),e("code",[s._v("f")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function f(x: int, y: int): int\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("因为我没有为这个函数提供一个函数体，所以Dafny将它视为一个"),e("em",[s._v("未解释的")]),s._v("函数。也就是说我们对它一无所知。我们知道它是一个函数，这意味着它的结果值完全由它的输入决定。例如，我们不知道f(7,3)计算的是哪个整数，但是知道如果你用相同的参数再次调用f，你会继续得到相同的值。")]),s._v(" "),e("p",[s._v("为了证明关于f的一些东西，我们想知道更多关于f的性质。下面是三个引理的声明，它们表达了这样的属性:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("lemma Associativity(x: int, y: int, z: int)\n  ensures f(x, f(y, z)) == f(f(x, y), z)\n\nlemma Monotonicity(y: int, z: int)\n  requires y <= z\n  ensures forall w :: f(w, y) <= f(w, z)\n\nlemma DiagonalIdentity(x: int)\n  ensures f(x, x) == x\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("就像函数本身一样，这些引理没有实体。它是引理的主体来证明引理的后置条件。换句话说，主体是证明引理的东西。因为这些引理没有证明，所以它们实际上是“公理”(也就是说，你必须在没有证明的情况下接受它)。")]),s._v(" "),e("p",[s._v("如果你通过Dafny "),e("em",[s._v("编译器")]),s._v("运行这个函数和这些引理，你会收到抱怨，说它们没有实体。但出于本文的目的，我们并不关心从编译器获取正在执行的代码。我们的重点是证明，而Dafny "),e("em",[s._v("验证者")]),s._v("对无实体声明没有异议。就验证者而言，无主体声明只是说没有什么可检查的。")]),s._v(" "),e("p",[s._v("我们将以不同的风格来证明这个性质:")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("a")]),s._v(","),e("code",[s._v("b")]),s._v(", "),e("code",[s._v("c")]),s._v(",和"),e("code",[s._v("x")]),s._v(",如果"),e("code",[s._v("c < = x = = f (a, b)")]),s._v(",然后"),e("code",[s._v("f (a、f (b, c)) < = x")]),s._v("。")])]),s._v(" "),e("p",[s._v("这个性质的证明使用了上面的三个公理。")]),s._v(" "),e("h2",{attrs:{id:"证明计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#证明计算"}},[s._v("#")]),s._v(" 证明计算")]),s._v(" "),e("p",[s._v("有时，一个简单的“断言”语句就足以提示Dafny验证器完成一个证明。其他时候，您需要调用一个引理。当情况没有这么简单时，在Dafny中编写证明的最常见方法是"),e("em",[s._v("证明计算")]),s._v(" ["),e("a",{attrs:{href:"http://leino.science/papers/krml276.html#dijkstrafeijen:book",target:"_blank",rel:"noopener noreferrer"}},[s._v("0"),e("OutboundLink")],1),s._v("， "),e("a",{attrs:{href:"http://leino.science/papers/krml276.html#leinopolikarpova:calc",target:"_blank",rel:"noopener noreferrer"}},[s._v("3"),e("OutboundLink")],1),s._v("]。")]),s._v(" "),e("p",[s._v("证明计算是一系列的证明步骤。每一步证明一个等式(例如，"),e("code",[s._v("A == B")]),s._v(")、不等式(例如，"),e("code",[s._v("A <= B")]),s._v(")或逻辑推论(例如，"),e("code",[s._v("A ==> B")]),s._v(")。")]),s._v(" "),e("p",[s._v("一个步骤是垂直书写的，以给一些空间来证明为什么这个步骤是成立的。下面是一个原型步骤:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  A;\n==  // explain why A equals B\n  B;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如本步骤所示，链中的每个公式都以分号结束。")]),s._v(" "),e("p",[s._v("在上面的原型步骤中，我将理由(也称为"),e("em",[s._v("hint")]),s._v(")作为注释编写。这样的注释是有用的文档。如果验证者不能在没有帮助的情况下检查您的步骤，则提示需要不仅仅是注释。然后，用花括号写一段代码，验证者使用从代码中获得的知识来证明这一步。例如,")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  A;\n==  { LemmaThatJustifiesABEquality();  }\n  B;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("是时候写证明了。这里是:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("lemma CalculationalStyleProof(a: int, b: int, c: int, x: int)\n  requires c <= x == f(a, b)\n  ensures f(a, f(b, c)) <= x\n{\n  calc {\n    f(a, f(b, c));\n  ==  { Associativity(a, b, c); }\n    f(f(a, b), c);\n  ==  { assert f(a, b) == x; }\n    f(x, c);\n  <=  { assert c <= x; Monotonicity(c, x); }\n    f(x, x);\n  ==  { DiagonalIdentity(x); }\n    x;\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("让我们来看看这个证明计算。")]),s._v(" "),e("p",[s._v("第一步说，根据结合律，表达式"),e("code",[s._v("f(a, f(b, c))")]),s._v("等于f"),e("code",[s._v("(f(a, b)， c)")]),s._v("注意，这个提示使用特定参数"),e("code",[s._v("a")]),s._v("， "),e("code",[s._v("b")]),s._v("和"),e("code",[s._v("c")]),s._v("调用结合性引理。")]),s._v(" "),e("p",[s._v("第二步说"),e("code",[s._v("f(f(a, b)， c)")]),s._v("和"),e("code",[s._v("f(x, c)")]),s._v("是一样的，因为我们要证明的引理的前提(即先决条件)说"),e("code",[s._v("x")]),s._v("等于"),e("code",[s._v("f(a, b)")]),s._v("。验证者根据我们要证明的引理的前提知道"),e("code",[s._v("x == f(a, b)")]),s._v("这个等式，所以验证者在这个证明步骤中不需要明确的提示。但是，有时候用机器检查的方式来做这样的语句会很好，你可以用“assert”语句来做，就像我在这里展示的那样。")]),s._v(" "),e("p",[s._v("第三步证明"),e("code",[s._v("f(x, c) <= f(x, x)")]),s._v("。这一步的理由是"),e("code",[s._v("c <= x")]),s._v("保持不变(它是在引理前提条件下给出的)，因此可以将引理称为单调性(这需要"),e("code",[s._v("c <= x")]),s._v("作为前提条件)。调用单调性"),e("code",[s._v("(c, x)")]),s._v("引理给了我们")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("forall w :: f(w, c) <= f(w, x)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("验证者指出，用"),e("code",[s._v("x")]),s._v("为"),e("code",[s._v("w")]),s._v("实例化这个量词给出了我们在这一步中试图证明的不等式。")]),s._v(" "),e("p",[s._v("第四步证明了f(x, x) = x。这个属性直接遵循DiagonalIdentity公理，用参数"),e("code",[s._v("x")]),s._v("调用。")]),s._v(" "),e("p",[s._v("我们的四个证明步骤证明了以下四个相应的性质:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("f(a, f(b, c)) == f(f(a, b), c)\nf(f(a, b), c) == f(x, c)\nf(x, c) <= f(x, x)\nf(x, x) == x\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("通过"),e("code",[s._v("==")]),s._v("和"),e("code",[s._v("<=")]),s._v("的传递性，这四个性质给了我们")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("f(a, f(b, c)) <= x\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这就是我们要证明的。")]),s._v(" "),e("h2",{attrs:{id:"连接和线型计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接和线型计算"}},[s._v("#")]),s._v(" 连接和线型计算")]),s._v(" "),e("p",[s._v("一般来说，我发现证明计算是令人信服的，容易阅读。您可以分别检查每一步，并可以看到公式是如何从一行“转换”到一行的。")]),s._v(" "),e("p",[s._v("很多时候(但并非总是如此)，我也发现证明计算对作者来说很简单。在上面的例子中，我们从公式的左边开始计算")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("f(a, f(b, c)) <= x\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("我们要证明。然后，我们看一下证明的当前行，找出关于这个表达式我们知道什么性质，以及我们接下来可以应用什么变换。为了在这个过程中获得更多的指导，通常最好从我们试图证明的公式的更复杂的一面开始。举个例子，如果你从")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("calc {\n  x;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("现在还远不清楚下一步会怎样")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("==  { DiagonalIdentity(x); }\n  f(x, x);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("我们可以继续这个证明，将上一节的步骤按相反的顺序写下来，并在每一步中反转运算符的方向(例如，将"),e("code",[s._v("<=")]),s._v("更改为"),e("code",[s._v(">=")]),s._v("):")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(">=  { assert c <= x; Monotonicity(c, x); }\n  f(x, c);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("不管我们往哪个方向走，到目前为止，我所展示的计算中的每一行都有类型"),e("code",[s._v("int")]),s._v("。也可以在每一行用一个布尔公式来写证明。这里有一个这样的例子:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("calc {\n  f(a, f(b, c)) <= x;\n==  { DiagonalIdentity(x); }\n  f(a, f(b, c)) <= f(x, x);\n==  { Associativity(a, b, c); }\n  f(f(a, b), c) <= f(x, x);\n==  { assert f(a, b) == x; }\n  f(x, c) <= f(x, x);\n==  { assert c <= x; Monotonicity(c, x); }\n  true;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("通过"),e("code",[s._v("==")]),s._v("的传递性，证明了公式"),e("code",[s._v("f(a, f(b, c)) <= x")]),s._v("的值为"),e("code",[s._v("true")]),s._v("。")]),s._v(" "),e("p",[s._v("如果您为您的证明计算行选择这样的布尔表达式，那么每一步的操作符通常是逻辑暗示("),e("code",[s._v("==>")]),s._v("，即“逻辑弱化”)或逻辑“解释”("),e("code",[s._v("<==")]),s._v("，“逻辑强化”，或“从后”)。当然，你必须选择这两个方向中的一个，而不是同时使用，否则你的证明计算就没有意义了。在这些方向中，"),e("code",[s._v("<==")]),s._v("通常会给你一个更好的起点，因为你会从你要证明的公式开始，最后你会得到"),e("code",[s._v("true")]),s._v("。然而，根据我的经验，我发现许多初学者被"),e("code",[s._v("<==")]),s._v("的方向搞糊涂了，他们把计算写得好像他们是在"),e("code",[s._v("==>")]),s._v("的方向上。用任何对你有意义的方向。")]),s._v(" "),e("h2",{attrs:{id:"最简证明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最简证明"}},[s._v("#")]),s._v(" 最简证明")]),s._v(" "),e("p",[s._v("证明计算是一种构造证明步骤的方法。它通常包含比验证者需要的更多的信息，特别是如果您为了自己的利益，将证明写在小的步骤中。如果你认为一个证明有太多的细节，你可以删除一些不需要的东西。这是否是个好主意——或者，什么时候是个好主意，删除多少内容——主要取决于个人喜好。如果您稍后再回到证明，额外的细节可能会提供有用的文档，说明证明最初是如何构造的。")]),s._v(" "),e("p",[s._v("如果你想减少上面的证明计算中的提示，你可能要做的第一件事是删除作为证明的一部分的两个"),e("code",[s._v("assert")]),s._v("语句，或者至少删除断言"),e("code",[s._v("c <= x")]),s._v("。但是你可以做的更多。")]),s._v(" "),e("p",[s._v("通过前面的计算，我们可以很容易地看到使用了哪些引理，更重要的是，这些引理实例化了哪些值。一旦你知道了这一点，你就可以完全不用计算证明了。整个证明是这样的:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("lemma MinimalProof(a: int, b: int, c: int, x: int)\n  requires c <= x == f(a, b)\n  ensures f(a, f(b, c)) <= x\n{\n  Associativity(a, b, c);\n  Monotonicity(c, x);\n  DiagonalIdentity(x);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h2",{attrs:{id:"结构化断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构化断言"}},[s._v("#")]),s._v(" 结构化断言")]),s._v(" "),e("p",[s._v("为了说明这一点，不写calc语句的计算证明是有益的。这是它看起来的样子:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("lemma AssertProof(a: int, b: int, c: int, x: int)\n  requires c <= x == f(a, b)\n  ensures f(a, f(b, c)) <= x\n{\n  Associativity(a, b, c);\n  assert f(a, f(b, c)) == f(f(a, b), c);\n\n  assert f(a, b) == x;\n  assert f(f(a, b), c) == f(x, c);\n\n  assert c <= x; Monotonicity(c, x);\n  assert f(x, c) <= f(x, x);\n\n  DiagonalIdentity(x);\n  assert f(x, x) == x;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("这四组语句中的每一组都对应于[1]节(http://leino.science/papers/krml276.html#sec-calc)计算中的一个步骤。在这个步骤证明的等式或不等式的断言之前，"),e("code",[s._v("calc")]),s._v("语句的提示是什么?验证者然后把四个结论粘在一起来证明引理的后置条件。")]),s._v(" "),e("h2",{attrs:{id:"作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[s._v("#")]),s._v(" 作用域")]),s._v(" "),e("p",[s._v("[1]节(http://leino.science/papers/krml276.html#sec-calc)中的"),e("code",[s._v("calc")]),s._v("语句与[4]节(http://leino.science/papers/krml276.html#sec-linear-asserts)中的拆分的"),e("code",[s._v("assert")]),s._v("语句之间存在差异。不同之处在于，计算中的每一个提示对于证明步骤来说都是局部的。也就是说，提示的"),e("em",[s._v("作用域")]),s._v("就是步骤本身。例如，假设您将"),e("a",{attrs:{href:"http://leino.science/papers/krml276.html#sec-calc",target:"_blank",rel:"noopener noreferrer"}},[s._v("1"),e("OutboundLink")],1),s._v("部分中"),e("code",[s._v("calc")]),s._v("语句的所有提示移动到第一个证明步骤。然后，两个证明步骤将不再验证:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("calc {\n  f(a, f(b, c));\n==  { Associativity(a, b, c);\n      assert f(a, b) == x;\n      assert c <= x; Monotonicity(c, x);\n      DiagonalIdentity(x);\n    }\n  f(f(a, b), c);\n==\n  f(x, c);\n<=  // error: step not verified\n  f(x, x);\n==  // error: step not verified\n  x;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("也就是说，在第一步中调用提示中的三个引理所获得的信息不会影响到其他步骤。相反，如果你收集引理主体开始的提示，四个等式和不等式就可以很好地验证:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// hints\nAssociativity(a, b, c);\nassert f(a, b) == x;\nassert c <= x; Monotonicity(c, x);\nDiagonalIdentity(x);\n// equalities and inequalities\nassert f(a, f(b, c)) == f(f(a, b), c);\nassert f(f(a, b), c) == f(x, c);\nassert f(x, c) <= f(x, x);\nassert f(x, x) == x;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("你可以把calc表述的每一步都看作是一个引理，引理的证明就放在这一步的提示里。这在编写证明时很重要，不仅因为它告诉人类读者某个提示适用于特定的证明步骤，还因为它限制了验证者应用提示的范围。对于复杂的证明，这在实践中会产生很大的不同，因为验证者可能会被太多的信息“弄糊涂”——这表现为验证者的性能差或某些“蝴蝶效应”["),e("a",{attrs:{href:"http://leino.science/papers/krml276.html#leinopit-claudel:cav2016",target:"_blank",rel:"noopener noreferrer"}},[s._v("2"),e("OutboundLink")],1),s._v("]。")]),s._v(" "),e("p",[s._v("总之，在证明中区分提示是很好的。"),e("code",[s._v("calc")]),s._v("语句在这方面做得很好，但你也可以用"),e("code",[s._v("assert")]),s._v("语句的形式来做。下面我们来看一下。")]),s._v(" "),e("h2",{attrs:{id:"断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[s._v("#")]),s._v(" 断言")]),s._v(" "),e("p",[e("code",[s._v("assert E;")]),s._v("表述了三件事:")]),s._v(" "),e("ol",[e("li",[s._v("它表明你期望条件E成立")]),s._v(" "),e("li",[s._v("它要求验证者证明"),e("code",[s._v("E")]),s._v("\n3.它让后面的断言假设E")])]),s._v(" "),e("p",[s._v("您可能没有考虑过将断言的这三个方面分开，但是这样做很有用，因为Dafny提供了(1)和(2)的替代方案。")]),s._v(" "),e("p",[s._v("该声明")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("assert E by { Hint }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("改变方面(1)说"),e("code",[s._v("E")]),s._v("是在给定的提示下被证明的，其中"),e("code",[s._v("hint")]),s._v("是一个命题。提示的作用域只是断言本身，所以它在断言的下游不可用。这样，"),e("code",[s._v("assert by")]),s._v("语句等价于:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("calc {\n  E;\n==  { Hint }\n  true;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("我们可以使用"),e("code",[s._v("assert by")]),s._v("重写"),e("a",{attrs:{href:"http://leino.science/papers/krml276.html#sec-linear-asserts",target:"_blank",rel:"noopener noreferrer"}},[s._v("4"),e("OutboundLink")],1),s._v("部分的证明:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("assert f(a, f(b, c)) == f(f(a, b), c) by {\n  Associativity(a, b, c);\n}\nassert f(f(a, b), c) == f(x, c) by {\n  assert f(a, b) == x;\n}\nassert f(x, c) <= f(x, x) by {\n  assert c <= x; Monotonicity(c, x);\n}\nassert f(x, x) == x by {\n  DiagonalIdentity(x);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("这提供了更好的分区，从而更直接地表达了为什么每个断言的条件保持不变。")]),s._v(" "),e("h2",{attrs:{id:"原型显性证明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型显性证明"}},[s._v("#")]),s._v(" 原型显性证明")]),s._v(" "),e("p",[e("a",{attrs:{href:"http://leino.science/papers/krml276.html#sec-assert-by",target:"_blank",rel:"noopener noreferrer"}},[s._v("6"),e("OutboundLink")],1),s._v("部分中的证明包含两个断言，它们重申了在前置条件中所写的内容。这些断言背后的思想是明确使用这些先决条件的地方。然而，这有两个缺点。")]),s._v(" "),e("p",[s._v("一个缺点是，必须将断言中的表达式与证明中的其他表达式进行比较，才能意识到断言只是在重申一个以前可用的假设。如果我们可以标记条件，然后引用标签，那就好了。")]),s._v(" "),e("p",[s._v("另一个缺点是，无论是否在断言中重述条件，前提条件都是可用的。如果我们忘记编写断言(可能是因为我们没有意识到我们依赖于这个条件)，或者如果我们意外地编写了错误的前提条件，那么证明仍然有效。也就是说，"),e("em",[s._v("验证器")]),s._v("已经能够使用前置条件，所以它不关心你是重述条件，还是陈述一个不同的(真)条件，或者什么也不陈述。如果我们能更明确地说明这些假设的范围，那就太好了。")]),s._v(" "),e("p",[s._v("还有一种形式的断言by语句。它放松了[6]部分(http://leino.science/papers/krml276.html#sec-assert-by)的aspect(2)。这个表单看起来像这样:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("assert Label: E { Hint }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这个有标记的断言语句表示你期望条件E成立，它提供了一个提示语句作为E的证明。在条件前使用标签会抑制“E”作为下游假设的使用。")]),s._v(" "),e("p",[s._v("例如，要证明"),e("code",[s._v("f(12,12) == 12")]),s._v("，需要使用"),e("code",[s._v("DiagonalIdentity")]),s._v("公理。如果你使用带标签的"),e("code",[s._v("assert by")]),s._v("来证明这个事实，那么在带标签的assert之后，被证明的事实仍然不可用:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("assert Label: f(12, 12) == 12 by {\n  DiagonalIdentity(12);\n}\nassert f(12, 12) == 12;  // error: assertion not verified\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("如果你不能用你证明的事实，为什么要用这种说法呢?好吧，我应该说事实在标记的断言之后不是“自动”可用的。但是您可以明确地请求它。你可以用“揭示”声明来做到这一点，在声明中你提到了标签。")]),s._v(" "),e("p",[s._v("下面又是一个例子，但带有“reveal”语句:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("assert Label: f(12, 12) == 12 by {\n  DiagonalIdentity(12);\n}\nreveal Label;  // this recalls the condition from the prior assertion\nassert f(12, 12) == 12;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("你可以在前提条件上使用同样的技巧。也就是说，通常在引理(或方法或函数)中，是一个先决条件")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("requires E\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("在引理的整个正文中都有。但如果你给它贴上标签，你就必须使用“揭示”语句来引出这个假设:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("requires Label: E\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("在我们看到它的实际应用之前，让我先谈谈标签。Dafny中的标签可以是任何标识符，但它也可以是文本上看起来像数字字面量的东西。以下是五个标签示例:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MyLabel    Label57    L57    57    000_057\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这是五个不同的标签——事实上，“57”和“000_057”作为数字字面量表示相同的数字，并不意味着它们是相同的标签。如果它们在印刷页上看起来不一样，它们就是不同的标签。(对于类中的字段名、数据类型的析构函数和其他类型成员也是如此，它们也具有允许看起来像文字的标识符的扩展语法。)")]),s._v(" "),e("p",[s._v("好了，现在我们准备在运行的例子中使用带标签的断言:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("lemma DifferentStyleOfProof(a: int, b: int, c: int, x: int)\n  requires A: c <= x\n  requires B: x == f(a, b)\n  ensures f(a, f(b, c)) <= x\n{\n  assert 0: f(a, f(b, c)) == f(f(a, b), c) by {\n    Associativity(a, b, c);\n  }\n\n  assert 1: f(f(a, b), c) == f(x, c) by {\n    reveal B;\n  }\n\n  assert 2: f(x, c) <= f(x, x) by {\n    assert c <= x by { reveal A; }\n    Monotonicity(c, x);\n  }\n\n  assert 3: f(x, x) == x by {\n    DiagonalIdentity(x);\n  }\n\n  assert 4: f(a, f(b, c)) == f(x, c) by {\n    reveal 0, 1;\n  }\n\n  assert 5: f(x, c) <= x by {\n    reveal 2, 3;\n  }\n\n  assert f(a, f(b, c)) <= x by {\n    reveal 4, 5;\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[s._v("在这种类型的证明中(在一些逻辑学文本中很常见)，每个断言都通过其相关性显式地证明。如果您认为断言之间的依赖关系构成了一个"),e("em",[s._v("证明DAG")]),s._v("，那么这种证明风格就是对DAG中的祖先进行显式的证明。您可以使用嵌套的"),e("code",[s._v("assert by")]),s._v("语句和标记的断言的层次结构来近似lamport风格的证明["),e("a",{attrs:{href:"http://leino.science/papers/krml276.html#lamport:howtowrite21stcenturyproof",target:"_blank",rel:"noopener noreferrer"}},[s._v("1"),e("OutboundLink")],1),s._v("]。")]),s._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("p",[s._v("校样的写作风格有很多种。最简单的证明是那些自动完成的，不需要进一步证明的证明。其他简单的证明需要一个断言或引理。证明步骤可以使用"),e("code",[s._v("calc")]),s._v("语句和"),e("code",[s._v("assert by")]),s._v("语句组织。通过标记一个“assert By”语句或一个前置条件，这个条件在证明中被抑制了，直到你使用一个“reveal”语句明确地请求它回来。")]),s._v(" "),e("p",[s._v("构造证明是一个好主意，为了可读性和清晰度，以及改善机械证明性能。你可以把一个证明命题想象成有一些输入条件。这些是证明语句上下文中可用的条件和标签。证明语句的输出是"),e("code",[s._v("calc")]),s._v("语句的第一行和最后一行的传递连接，无标记的"),e("code",[s._v("assert")]),s._v("或"),e("code",[s._v("assert by")]),s._v("语句中的条件，以及有标记的断言的标签。")]),s._v(" "),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),e("p",[s._v("[0]Edsger W. Dijkstra and W. H. J. Feijen. "),e("em",[s._v("A Method of Programming")]),s._v(". Addison-Wesley, July 1988. "),e("a",{attrs:{href:"http://www.bing.com/search?q=+Method+Programming_++Edsger+Dijkstra+Feijen+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("[1]Leslie Lamport. How to write a 21st century proof. Technical report, Microsoft Research, 2011. "),e("a",{attrs:{href:"https://lamport.azurewebsites.net/pubs/proof.pdf",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://lamport.azurewebsites.net/pubs/proof.pdf"),e("OutboundLink")],1),s._v(". "),e("a",{attrs:{href:"http://www.bing.com/search?q=+write+century+proof++Leslie+Lamport+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("[2]K. Rustan M. Leino and Clément Pit-Claudel. Trigger selection strategies to stabilize program verifiers. In Swarat Chaudhuri and Azadeh Farzan, editors, "),e("em",[s._v("Computer Aided Verification - 28th International Conference, CAV 2016, Proceedings, Part I")]),s._v(", volume 9779 of "),e("em",[s._v("Lecture Notes in Computer Science")]),s._v(", pages 361–381. Springer, 2016. "),e("a",{attrs:{href:"http://www.bing.com/search?q=Trigger+selection+strategies+stabilize+program+verifiers+++Rustan+Leino+ment+Claudel+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("[3]K. Rustan M. Leino and Nadia Polikarpova. Verified calculations. In Ernie Cohen and Andrey Rybalchenko, editors, "),e("em",[s._v("Verified Software: Theories, Tools, Experiments — 5th International Conference, VSTTE 2013, Revised Selected Papers")]),s._v(", volume 8164 of "),e("em",[s._v("Lecture Notes in Computer Science")]),s._v(", pages 170–190. Springer, 2014. "),e("a",{attrs:{href:"http://www.bing.com/search?q=Verified+calculations+++Rustan+Leino+Nadia+Polikarpova+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=t.exports}}]);
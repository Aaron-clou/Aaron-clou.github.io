(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{547:function(s,a,n){"use strict";n.r(a);var e=n(18),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"集合元素上的函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合元素上的函数"}},[s._v("#")]),s._v(" 集合元素上的函数")]),s._v(" "),n("blockquote",[n("p",[n("em",[s._v("K. Rustan M. Leino Manuscript KRML 274, 16 February 2020")])])]),s._v(" "),n("p",[n("strong",[s._v("摘要")]),s._v(" 在自然语言中，像“一组数字的和”这样的短语很容易说和理解。在正式设置中定义和使用这些函数需要更多的工作。这个问题与递归定义的函数如何从集合中选取下一个元素有关。本文描述了一个具有代表性的例子，并描述了如何使正式的繁文缛节发挥作用。该解可应用于集合上的任何交换运算和结合运算。")]),s._v(" "),n("h2",{attrs:{id:"对集合的元素求和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对集合的元素求和"}},[s._v("#")]),s._v(" 对集合的元素求和")]),s._v(" "),n("p",[s._v("假设我们有一个函数，它返回集合中所有整数的和:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Sum(s: set<int>): int\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果我们把一个元素y加到一个集合中，我们期望它的和增加y。也就是说，我们希望正确实现以下方法:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("method AddElement(s: set<int>, a: int, y: int) returns (t: set<int>, b: int)\n  requires a == Sum(s) && y !in s\n  ensures t == s + {x} && b == Sum(t)\n{\n  t := s + {y};\n  b := a + y;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("事实证明，证明不是自动的。让我们看看细节并填写证明。")]),s._v(" "),n("h2",{attrs:{id:"求和的递归定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#求和的递归定义"}},[s._v("#")]),s._v(" 求和的递归定义")]),s._v(" "),n("p",[s._v("函数“Sum”是递归定义的。空集合的和为"),n("code",[s._v("0")]),s._v("。如果集合非空，选择其中一个元素，比如"),n("code",[s._v("x")]),s._v("。然后，在递归计算的剩余元素的和上加上"),n("code",[s._v("x")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Sum(s: set<int>): int {\n  if s == {} then 0 else\n    var x := Pick(s);\n    x + Sum(s - {x})\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这个定义使用了一个函数"),n("code",[s._v("Pick")]),s._v("，它返回给定集合中的任意元素。以下是它的定义:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Pick(s: set<int>): int\n  requires s != {}\n{\n  var x :| x in s; x\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("我待会再讲Pick。此时您需要了解的是，"),n("code",[s._v("Pick")]),s._v("的调用者无法控制返回"),n("code",[s._v("s")]),s._v("中的哪个元素。")]),s._v(" "),n("h2",{attrs:{id:"不合格证明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不合格证明"}},[s._v("#")]),s._v(" 不合格证明")]),s._v(" "),n("p",[s._v("为了证明"),n("code",[s._v("AddElement")]),s._v("，我们需要证明"),n("code",[s._v("b == Sum(t)")]),s._v("在它的最终状态是成立的。回顾作业，这意味着我们需要展示")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a + y == Sum(s + {y})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在初始状态。由于"),n("code",[s._v("a")]),s._v("是"),n("code",[s._v("Sum(s)")]),s._v("，我们的证明义务可以归结为")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Sum(s) + y == Sum(s + {y})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("我们已知y不在s中。")]),s._v(" "),n("p",[s._v("假设"),n("code",[s._v("Pick(s + {y})")]),s._v("返回"),n("code",[s._v("y")]),s._v("。然后,我们有")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  Sum(s + {y});\n==  // def. Sum\n  var x := Pick(s + {y}); x + Sum(s + {y} - {x});\n==  // using the assumption Pick(s + {y}) == y\n  y + Sum(s + {y} - {y});\n==  // sets, since y !in s\n  y + Sum(s);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这很简单也很直接。但对于这个证明，我们假设对"),n("code",[s._v("Pick")]),s._v("的相关调用返回了"),n("code",[s._v("y")]),s._v("。如果"),n("code",[s._v("Pick")]),s._v("返回与"),n("code",[s._v("s")]),s._v("不同的元素怎么办?")]),s._v(" "),n("h2",{attrs:{id:"选择其他东西"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择其他东西"}},[s._v("#")]),s._v(" 选择其他东西")]),s._v(" "),n("p",[s._v("在你意识到“挑选”可以选择一个不同于你所想的元素之前，乌云开始散去。我们需要的是一个引理，它表明选择是无关紧要的。也就是说，引理会让我们把“Sum”看作是，在做递归调用时，我们指定的一个元素。")]),s._v(" "),n("p",[s._v("这就是那个引理。这个证明一开始也有点棘手。归根到底就是让“Pick”选择它所选择的任何元素，然后对“Sum”递归的更小的集合应用归纳假设。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma SumMyWay(s: set<int>, y: int)\n  requires y in s\n  ensures Sum(s) == y + Sum(s - {y})\n{\n  var x := Pick(s);\n  if y == x {\n  } else {\n    calc {\n      Sum(s);\n    ==  // def. Sum\n      x + Sum(s - {x});\n    ==  { SumMyWay(s - {x}, y); }\n      x + y + Sum(s - {x} - {y});\n    ==  { assert s - {x} - {y} == s - {y} - {x}; }\n      y + x + Sum(s - {y} - {x});\n    ==  { SumMyWay(s - {y}, x); }\n      y + Sum(s - {y});\n    }\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("我说这个引理看起来像"),n("code",[s._v("Sum")]),s._v("的表达式，所以"),n("code",[s._v("Sum")]),s._v("的两个参数是"),n("code",[s._v("s")]),s._v("和"),n("code",[s._v("s - {y}")]),s._v("。或者，我们可以用s + {y}和s来调用"),n("code",[s._v("Sum")]),s._v("来声明该属性。这个选择是上述引理的一个简单推论:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma AddToSum(s: set<int>, y: int)\n  requires y !in s\n  ensures Sum(s + {y}) == Sum(s) + y\n{\n  SumMyWay(s + {y}, y);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("使用引理")]),s._v(" "),n("p",[s._v("有了这个有用的引理，就很容易得到“AddElement”的证明:将其主体更改为")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("t := s + {y};\nb := a + y;\nAddToSum(s, y);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"内联选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内联选择"}},[s._v("#")]),s._v(" 内联选择")]),s._v(" "),n("p",[s._v("在上面的开发中，我将‘Pick’定义为一个单独的函数。阅读程序文本中的单词“pick”可能有助于理解“Sum”和“SumMyWay”做什么。但它是一个如此小的函数，所以为什么不直接在使用它的两个地方内联它呢。让我们试一试:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Sum(s: set<int>): int {\n  if s == {} then 0 else\n    var x :| x in s;  // this line takes the place of a call to Pick\n    x + Sum(s - {x})\n}\n\nlemma SumMyWay(s: set<int>, y: int)\n  requires y in s\n  ensures Sum(s) == y + Sum(s - {y})\n{\n  var x :| x in s;  // this line takes the place of a call to Pick\n  if y == x {  // error: postcondition might not hold on this path\n  } else {\n    calc {\n      Sum(s);\n    ==  // def. Sum        // error: this step might not hold\n      x + Sum(s - {x});\n    ==  { SumMyWay(s - {x}, y); }\n      x + y + Sum(s - {x} - {y});\n    ==  { assert s - {x} - {y} == s - {y} - {x}; }\n      y + x + Sum(s - {y} - {x});\n    ==  { SumMyWay(s - {y}, x); }\n      y + Sum(s - {y});\n    }\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("现在我们得到两个错误!")]),s._v(" "),n("p",[s._v("为了解释发生了什么，让我多说一点关于"),n("code",[s._v(":|")]),s._v("以及它的不同寻常之处。")]),s._v(" "),n("h2",{attrs:{id:"let-such-that"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#let-such-that"}},[s._v("#")]),s._v(" Let such that")]),s._v(" "),n("p",[s._v("Dafny中的let-such-that结构有这样一种形式")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var x :| P; E\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("它的计算结果是"),n("code",[s._v("E")]),s._v("，其中"),n("code",[s._v("x")]),s._v("被绑定到某个满足"),n("code",[s._v("P")]),s._v("的值。例如,")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var x :| 7 <= x < 10; 2 * x\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("计算结果为“14”、“16”或“18”。作为程序员，你无法控制选择"),n("code",[s._v("x")]),s._v("的哪个值。但你会知道两件重要的事。一是x将被选为满足P的值。(如果Dafny验证器不能证明这样的值存在，则会给出一个错误。)另一种方法是，每次使用相同的输入对表达式求值时，都将得到相同的值。换句话说，这个算子是确定性的。")]),s._v(" "),n("p",[s._v("下面是另一个关于决定论的例子:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var x :| x in {2, 3, 5}; x\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这个表达式选择"),n("code",[s._v("x")]),s._v("为最小的三个素数之一("),n("code",[s._v("2")]),s._v("、"),n("code",[s._v("3")]),s._v("或"),n("code",[s._v("5")]),s._v(")，然后返回它。您不知道您得到的是这三个值中的哪一个，但您可以保证每次在程序的一次运行中计算这个表达式时，您将得到相同的值。")]),s._v(" "),n("p",[s._v("让我们更准确地理解我所说的“这个表达”。在Dafny中，let-such-that表达式的每一个“文本出现”都可以做出自己的选择。考虑这个问题的一种方法是遍历程序的文本，并用唯一的颜色为每个"),n("code",[s._v(":|")]),s._v("操作符着色。然后，你可以依赖于相同的选项，只有当它们由相同颜色的"),n("code",[s._v(":|")]),s._v("执行时。")]),s._v(" "),n("p",[s._v("这里有一个说明性的例子。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma Choices(s: set<int>)\n  requires s != {}\n{\n  var a := Pick(s);\n  var b := Pick(s);\n  assert a == b;  // this is provable\n  a := var x :| x in s; x;\n  b := var x :| x in s; x;\n  assert a == b;  // error: not provable\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("赋给"),n("code",[s._v("a")]),s._v("和"),n("code",[s._v("b")]),s._v("的第一个值来自相同的"),n("code",[s._v(":|")]),s._v("操作符。它们是相同颜色选择的结果。因此，它们被认为是相同的。相反，赋给"),n("code",[s._v("a")]),s._v("和"),n("code",[s._v("b")]),s._v("的下一个值来自不同的"),n("code",[s._v(":|")]),s._v("操作符——不同颜色的操作符。因此，您不能确定‘a’和‘b’是相等的。")]),s._v(" "),n("p",[s._v("实际上，如果你多想一点(或者少想一点)，你就会意识到，我们知道赋给"),n("code",[s._v("a")]),s._v("和"),n("code",[s._v("b")]),s._v("的第一个值是相等的，即使不知道"),n("code",[s._v("Pick")]),s._v("的任何内容。毕竟，"),n("code",[s._v("Pick")]),s._v("是一个函数，如果你对相同的参数调用一个函数两次，它会返回相同的值。数学保证了这一点，Dafny也是如此。那么，对a和b的第二个赋值呢;那些表达式中的"),n("code",[s._v(":|")]),s._v("操作符不也是函数吗?是的，它们是，但它们是不同的功能。它们是不同颜色的函数，以此类推。只要你把程序中出现的每一个"),n("code",[s._v(":|")]),s._v("看作是一个"),n("em",[s._v("不同的")]),s._v("函数，那么所有的数学运算就会如你所期望的那样。")]),s._v(" "),n("p",[s._v("这就是为什么我可以更容易地描述“Sum”的情况，如果我可以使用一个“😐”。为了重用相同的"),n("code",[s._v(":|")]),s._v("，我把它放在一个函数中，我命名为"),n("code",[s._v("Pick")]),s._v("。我建议你做同样的事情如果你在处理涉及到你想要证明属性的选择的幽灵函数。")]),s._v(" "),n("h2",{attrs:{id:"多种选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多种选择"}},[s._v("#")]),s._v(" 多种选择")]),s._v(" "),n("p",[s._v("在理解这些问题之前，如果你试图定义“Sum”并在“AddElement”中使用它，你会感到困惑。现在，您知道单独将"),n("code",[s._v(":|")]),s._v("放入函数中更容易，并且您知道您需要编写一个类似"),n("code",[s._v("SumMyWay")]),s._v("的引理。您可能会好奇，如果没有"),n("code",[s._v("Pick")]),s._v("函数，是否可以做到这一点。也就是说，你可能想知道是否有任何方法可以在"),n("code",[s._v("Sum")]),s._v("中使用一个"),n("code",[s._v(":|")]),s._v("操作符，在"),n("code",[s._v("SumMyWay")]),s._v("中使用另一个"),n("code",[s._v(":|")]),s._v("操作符。是的，这是可能的。我来教你怎么做。")]),s._v(" "),n("p",[s._v("假设我们在函数Sum中内联"),n("code",[s._v("Pick")]),s._v("。也就是说，假设我们像上面"),n("a",{attrs:{href:"http://leino.science/papers/krml274.html#sec-inlining-pick",target:"_blank",rel:"noopener noreferrer"}},[s._v("4"),n("OutboundLink")],1),s._v("节那样定义“Sum”。在那一节中，我提到，如果你也内联"),n("code",[s._v("Pick")]),s._v("在"),n("code",[s._v("SumMyWay")]),s._v("，你会得到一些错误。这两个错误都是因为“Sum”和“SumMyWay”做出了不同的选择。但我们可以在引理中更具体一些，强制它选择与"),n("code",[s._v("Sum")]),s._v("中选择的元素相同的元素。")]),s._v(" "),n("p",[s._v("你可以这样做，你想让x不只是在s中，而是一个值")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Sum(s) == x + Sum(s - {x})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("没错。只有一个这样的x存在，它是由“Sum”选择的。所以，如果你这样写引理:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma SumMyWay(s: set<int>, y: int)\n  requires y in s\n  ensures Sum(s) == y + Sum(s - {y})\n{\n  var x :| x in s && Sum(s) == x + Sum(s - {x});\n  if y == x {\n  } else {\n    // same calc statement as before...\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("然后验证!知道这一点很好，但是在你的"),n("code",[s._v(":|")]),s._v("周围引入"),n("code",[s._v("Pick")]),s._v("函数似乎更干净。")]),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("注意，程序中出现的每一个"),n("code",[s._v(":|")]),s._v("文本都是一个不同的函数。如果你将它整合到一个你命名的函数中，你将更容易使用"),n("code",[s._v(":|")]),s._v("，因为这样你就减少了因为不同种类(不同“颜色”)的选择而感到困惑的机会。")]),s._v(" "),n("p",[s._v("另外，请注意"),n("code",[s._v(":|")]),s._v("所做的选择可能不是您需要的选择。你可能想要证明一个引理，它说任何选择最后都会得到相同的结果。使用上面的“SumMyWay”引理作为你的证明模板。")])])}),[],!1,null,null,null);a.default=t.exports}}]);
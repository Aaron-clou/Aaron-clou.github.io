(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{544:function(s,a,n){"use strict";n.r(a);var e=n(18),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"定义、证明、算法正确性的案例研究-gcd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义、证明、算法正确性的案例研究-gcd"}},[s._v("#")]),s._v(" 定义、证明、算法正确性的案例研究:GCD")]),s._v(" "),n("blockquote",[n("p",[n("em",[s._v("K. Rustan M. Leino Manuscript KRML 279, 22 June 2021")])])]),s._v(" "),n("p",[n("strong",[s._v("摘要")]),s._v(" 本文的目的是展示一个程序开发的示例，介绍支持程序规范的定义，陈述和证明那些定义的引理，并使用引理来证明程序的正确性。以欧几里得的计算最大公约数的减法算法为例。")]),s._v(" "),n("h2",{attrs:{id:"问题描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[s._v("#")]),s._v(" 问题描述")]),s._v(" "),n("p",[s._v("让我们指定并验证一个算法来计算两个数的最大公约数(GCD)。在规范中，我们将引入一个函数，它的定义“显然是正确的”。我们不会使用这个函数来计算GCD，因为如果直接编译的话，“明显正确”的定义会给出非常低效的代码。相反，我们将使用Euclid算法来计算“明显正确”函数定义的值。我们将证明这个算法确实计算出了这个值。")]),s._v(" "),n("p",[s._v("本质上，我们有")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Gcd(x: pos, y: pos): pos\n\nmethod EuclidGcd(x: pos, y: pos) returns (gcd: pos)\n  ensures gcd == Gcd(x, y)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("其中"),n("code",[s._v("pos")]),s._v("表示正整数的类型。")]),s._v(" "),n("h2",{attrs:{id:"正整数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正整数"}},[s._v("#")]),s._v(" 正整数")]),s._v(" "),n("p",[s._v("我们所做的一切都与正整数有关。Dafny为自然数(即非负整数)而非正整数构建了一种类型。我们可以在Dafny中使用"),n("em",[s._v("子集类型")]),s._v("来定义它们:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type pos = x | 1 <= x  // error: cannot find witness to show type is inhabited\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("Dafny想知道这种类型是否有居民，但它自己不知道。对于我们的示例来说，这无关紧要，但是我们确实需要处理我们得到的错误。为此，我们提供了"),n("code",[s._v("witness")]),s._v("条款:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type pos = x | 1 <= x witness 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果我们真的不愿意显示显示该类型为非空的witness，我们可以写"),n("code",[s._v("witness *")]),s._v("，这导致Dafny将"),n("code",[s._v("pos")]),s._v("类型视为可能为空。对于我们的例子，你可以选择其中一种，但因为提供一个实际的证人很容易，所以我们就这么做。")]),s._v(" "),n("p",[s._v("在续集中，当我指的是正整数时，我会说"),n("em",[s._v("number")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"因素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#因素"}},[s._v("#")]),s._v(" 因素")]),s._v(" "),n("p",[s._v("一个数的"),n("em",[s._v("除数")]),s._v("是它的因数。我们定义了一个谓词，它说明了数字"),n("code",[s._v("p")]),s._v("是数字"),n("code",[s._v("x")]),s._v("的因数是什么意思:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("predicate IsFactor(p: pos, x: pos) {\n  exists q :: p * q == x\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("换句话说，"),n("code",[s._v("p")]),s._v("是"),n("code",[s._v("x")]),s._v("的因子，如果存在一个被乘数"),n("code",[s._v("q")]),s._v("，那么"),n("code",[s._v("x")]),s._v("就是"),n("code",[s._v("p * q")]),s._v("的乘积。")]),s._v(" "),n("p",[s._v("为了讨论一个数字的"),n("em",[s._v("所有")]),s._v("因子，我们引入了一个函数"),n("code",[s._v("factors")]),s._v("，我们使用集合理解来定义它。一个简单的定义是:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Factors(x: pos): set<pos> {\n  set p: pos | IsFactor(p, x)  // error: set constructed must be finite\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在Dafny中，"),n("code",[s._v("set")]),s._v("表示一个有限的集合(对于可能的"),n("em",[s._v("无限")]),s._v("集合，使用"),n("code",[s._v("isset")]),s._v(")。在这种情况下，Dafny并没有立即发现这个理解会生成一个有限集。幸运的是，我们可以简单地在理解中添加另一个连词，让Dafny看到集合是有限的:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Factors(x: pos): set<pos> {\n  set p: pos | p <= x && IsFactor(p, x)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在添加这个连词时，我们可能会犯一个错误，因为新的集合可能没有包含我们想要的所有因素。我们的结合点"),n("code",[s._v("p <= x")]),s._v("当然看起来很简单，但为什么不证明加上它不会意外遗漏任何因子呢?我们可以证明这个集合的元素与可能无限集相同:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma FactorsHasAllFactors(x: pos)\n  ensures forall n :: n in Factors(x) <==> n in iset p: pos | IsFactor(p, x)\n{\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("引理的证明是在引理主体中给出的(也就是说，在引理规范后面的一对花括号之间)。在这种情况下，证明是空的，因为Dafny自动地证明了引理，而不需要我们提供任何进一步的帮助。")]),s._v(" "),n("p",[s._v("在离开因子的定义之前，让我们说明和证明两个简单的引理。这些引理可以作为对我们定义的检查，它们在以后的开发中也会很有帮助。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma FactorsContains1(x: pos)\n  ensures 1 in Factors(x)\n{\n  assert 1 * x == x;\n}\n\nlemma FactorsContainsSelf(x: pos)\n  ensures x in Factors(x)\n{\n  assert x * 1 == x;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("为了证明一个数字"),n("code",[s._v("n")]),s._v("(这里是"),n("code",[s._v("1")]),s._v("或"),n("code",[s._v("x")]),s._v(")在集合"),n("code",[s._v("Factors(x)")]),s._v("中，我们需要确定"),n("code",[s._v("n")]),s._v("满足集合理解的条件(在"),n("code",[s._v("Factors(x)")]),s._v("主体中)。连词"),n("code",[s._v("n <= x")]),s._v("被自动证明，但"),n("code",[s._v("IsFactor(n, x)")]),s._v("不是。根据IsFactor的定义，我们需要证明"),n("code",[s._v("n * q == x")]),s._v("的被乘数"),n("code",[s._v("q")]),s._v("的存在性。这种证明通常包括证明证人，这就是上面两个引理中的断言陈述所做的。由这些断言，验证者完成了引理的证明。")]),s._v(" "),n("h2",{attrs:{id:"集合的最大值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合的最大值"}},[s._v("#")]),s._v(" 集合的最大值")]),s._v(" "),n("p",[s._v("为了讨论"),n("em",[s._v("最大")]),s._v("公约数，我们需要一个函数来挑选集合中最大的数。一种有点声明性的方法是使用such-that结构。特别地，对于集合"),n("code",[s._v("s")]),s._v(", let-such-that表达式")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var x :| x in s && forall y :: y in s ==> y <= x;\nx\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("表示将"),n("code",[s._v("x")]),s._v("绑定到满足条件"),n("code",[s._v("x在s &&中的所有y:: y在s ==> y <= x")]),s._v("的值，然后返回表达式"),n("code",[s._v("x")]),s._v("的值。这个条件说x在集合s中，并且在集合s中，x是最大的。")]),s._v(" "),n("p",[s._v("使用such-that结构有一个证明义务，即满足给定条件的值存在。如果我们要求"),n("code",[s._v("s")]),s._v("为非空，那么"),n("code",[s._v("x in s")]),s._v("条件很容易满足，但它需要更多的工作来说服验证者"),n("code",[s._v("x")]),s._v("的值满足量词。为此，我们将定义一个引理。我们将引理命名为"),n("code",[s._v("MaxExists")]),s._v("，然后我们可以这样写我们的函数"),n("code",[s._v("Max")]),s._v(":")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Max(s: set<pos>): pos\n  requires s != {}\n{\n  MaxExists(s);\n  var x :| x in s && forall y :: y in s ==> y <= x;\n  x\n}\n\nlemma MaxExists(s: set<pos>)\n  requires s != {}\n  ensures exists x :: x in s && forall y :: y in s ==> y <= x\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("Dafny使用引理调用"),n("code",[s._v("MaxExists(s)")]),s._v("来建立后续表达式的格式良好性。顺便说一下，注意"),n("code",[s._v("Max")]),s._v("(以及引理"),n("code",[s._v("MaxExists")]),s._v(")有一个前置条件"),n("code",[s._v("s !={}")]),s._v("(关键字"),n("code",[s._v("requires")]),s._v(")。这意味着函数(以及引理)只能在非空集合中调用。")]),s._v(" "),n("p",[s._v("那么我们如何证明"),n("code",[s._v("MaxExists")]),s._v("呢?证明这样一个"),n("code",[s._v("x")]),s._v("存在的最直接的方法是计算一个满足所需性质的"),n("code",[s._v("x")]),s._v("。我们将引入另一个计算最大值的函数，称为"),n("code",[s._v("FindMax")]),s._v("，并在"),n("code",[s._v("MaxExists")]),s._v("引理的证明中使用它。函数"),n("code",[s._v("FindMax")]),s._v("将被递归实现。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma MaxExists(s: set<pos>)\n  requires s != {}\n  ensures exists x :: x in s && forall y :: y in s ==> y <= x\n{\n  var x := FindMax(s);\n}\n \nfunction FindMax(s: set<pos>): pos\n  requires s != {}\n  ensures max in s && forall y :: y in s ==> y <= FindMax(s)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("我们现在不是在兜圈子吗?是的，在某些方面，我们让生活变得比必要的更困难。如果我们有"),n("code",[s._v("FindMax")]),s._v("，我们不需要"),n("code",[s._v("Max")]),s._v("，然后我们也不需要引理"),n("code",[s._v("MaxExists")]),s._v("。事实上，我们可以只编写和使用"),n("code",[s._v("FindMax")]),s._v("，而不引入"),n("code",[s._v("Max")]),s._v("或"),n("code",[s._v("MaxExists")]),s._v("。但在这个例子中，我希望主要的定义尽可能清晰，而不考虑如何计算。从这个意义上说，"),n("code",[s._v("Max")]),s._v("的主体比我们将要为"),n("code",[s._v("FindMax")]),s._v("编写的主体更具声明性。")]),s._v(" "),n("p",[s._v("以下是"),n("code",[s._v("FindMax")]),s._v("的完整定义:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function FindMax(s: set<pos>): (max: pos)\n  requires s != {}\n  ensures max in s && forall y :: y in s ==> y <= max\n{\n  var x :| x in s;\n  if s == {x} then\n    x\n  else\n    var s' := s - {x};\n    assert s == s' + {x};\n    var y := FindMax(s');\n    if x < y then y else x\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("当函数的后置条件想要提到函数的结果值时，你可以使用函数本身，给出参数:"),n("code",[s._v("FindMax(s)")]),s._v("。我在上面第一次介绍"),n("code",[s._v("FindMax")]),s._v("时就这样做了。在完整的定义中，我展示了另一种方法，即为结果值引入一个名称:"),n("code",[s._v("max")]),s._v("。该名称只能在函数的后置条件中使用。很多时候，为结果引入这样的名称会导致更短的规范。")]),s._v(" "),n("h2",{attrs:{id:"gcd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gcd"}},[s._v("#")]),s._v(" GCD")]),s._v(" "),n("p",[s._v("有了我们定义的函数，现在就可以定义GCD了。取"),n("code",[s._v("x")]),s._v("的因子与"),n("code",[s._v("y")]),s._v("的因子，与之相交，得到它们的公因式，取其最大值:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Gcd(x: pos, y: pos): pos {\n  var common := Factors(x) * Factors(y);\n  Max(common)  // error: common must be nonempty\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("对于这个简单的定义，验证者报告了一个前提条件的违反，因为它无法证明"),n("code",[s._v("common")]),s._v("满足"),n("code",[s._v("Max")]),s._v("的前提条件。我们知道"),n("code",[s._v("公因数")]),s._v("是非空的，因为我们知道"),n("code",[s._v("1")]),s._v("是任意两个数"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("的公因数。为了引起验证者的注意，我们写了一个断言:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Gcd(x: pos, y: pos): pos {\n  var common := Factors(x) * Factors(y);\n  assert 1 in common;  // error: assertion violation\n  Max(common)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("唉，验证者不能证明这个断言。但我们可以看到，这一主张的存在足以消除先决条件的违反。现在我们来证明这个断言。这就是我们使用前面介绍的"),n("code",[s._v("FactorsContains1")]),s._v("引理的地方。对该引理的两次调用将证明断言，在程序文本中最好的捕获方法是将"),n("code",[s._v("assert")]),s._v("更改为"),n("code",[s._v("assert by")]),s._v("，并在"),n("code",[s._v("by")]),s._v("块中给出断言的证明:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Gcd(x: pos, y: pos): pos {\n  var common := Factors(x) * Factors(y);\n  assert 1 in common by {\n    FactorsContains1(x);\n    FactorsContains1(y);\n  }\n  Max(common)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("够了!我们现在已经给出了"),n("code",[s._v("Gcd")]),s._v("的一个格式良好的定义。")]),s._v(" "),n("h2",{attrs:{id:"gcd的性质"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gcd的性质"}},[s._v("#")]),s._v(" GCD的性质")]),s._v(" "),n("p",[s._v("我们将证明我们的"),n("code",[s._v("Gcd")]),s._v("函数的三个属性——如果你愿意，可以称之为健全检查。(我们还需要第四个属性，稍后再介绍。)")]),s._v(" "),n("p",[s._v("作为第一个完整性检查，我们期望"),n("code",[s._v("Gcd(x, y)")]),s._v("返回一个同时是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("因子的数字。此外，在所有同时是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("因数的数字中，"),n("code",[s._v("Gcd(x, y)")]),s._v("的收益应该是最大的。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma AboutGcd(x: pos, y: pos)\n  ensures IsFactor(Gcd(x, y), x)\n  ensures IsFactor(Gcd(x, y), y)\n  ensures forall p: pos :: IsFactor(p, x) && IsFactor(p, y) ==> p <= Gcd(x, y)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这个引理的前两个后置条件是自动证明的，但第三个不是。我们如何证明一个全称量词(也就是forall表达式)是成立的?我们使用达夫尼的"),n("code",[s._v("forall")]),n("em",[s._v("语句")]),s._v('。当用于证明时，forall命题对应于逻辑中的“普遍引入”规则。这个规则说的是"如果你想要证明'),n("code",[s._v("对于所有的x:: P(x)")]),s._v("，那么你所需要做的就是任意选择一个"),n("code",[s._v("x")]),s._v("，然后对那个"),n("code",[s._v("x")]),s._v("证明"),n("code",[s._v("P(x)")]),s._v("。")]),s._v(" "),n("p",[s._v("我们像这样引入"),n("code",[s._v("forall")]),s._v("语句:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  forall p: pos | IsFactor(p, x) && IsFactor(p, y)\n    ensures p <= Gcd(x, y)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("为了证明它，我们只需要提出这样一个事实，即"),n("code",[s._v("p")]),s._v("，既是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("的因子，又是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("的因子的交集。验证者就能够完成证明。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma AboutGcd(x: pos, y: pos)\n  ensures IsFactor(Gcd(x, y), x)\n  ensures IsFactor(Gcd(x, y), y)\n  ensures forall p: pos :: IsFactor(p, x) && IsFactor(p, y) ==> p <= Gcd(x, y)\n{\n  forall p: pos | IsFactor(p, x) && IsFactor(p, y)\n    ensures p <= Gcd(x, y)\n  {\n    assert p in Factors(x) * Factors(y);\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("Dafny验证器经常需要这样的属性帮助。要证明它们，就把它们写成断言。换句话说，验证者"),n("em",[s._v("知道")]),s._v("集合交集的这个性质，但它没有足够的创意将这个性质引入证明中。通过断言该属性，我们要求验证者确认该属性(它能够这样做)，然后在其余的证明中使用该属性(在本例中，这就完成了证明)。")]),s._v(" "),n("p",[s._v("作为第二个完整性检查，我们证明了"),n("code",[s._v("Gcd")]),s._v("是对称的。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma GcdSymmetric(x: pos, y: pos)\n  ensures Gcd(x, y) == Gcd(y, x)\n{\n  assert Factors(x) * Factors(y) == Factors(y) * Factors(x);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这个证明归结到集合交点是对称的这个事实，我们把它写成引理来引起验证者的注意。")]),s._v(" "),n("p",[s._v("作为第三个健全的检验，我们证明"),n("code",[s._v("Gcd")]),s._v("是幂等的。也就是说，如果你给它相同的参数两次，它会返回那个参数。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma GcdIdempotent(x: pos)\n  ensures Gcd(x, x) == x\n{\n  FactorsContainsSelf(x);\n  assert x in Factors(x) * Factors(x);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这个性质的证明可以归结为集合交点是幂等的，以及一个数是它自己的因子之一的性质。")]),s._v(" "),n("h2",{attrs:{id:"欧几里德算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#欧几里德算法"}},[s._v("#")]),s._v(" 欧几里德算法")]),s._v(" "),n("p",[s._v("欧几里得的求取两个数的GCD的减法算法是将两个数中的较大数反复减去较小的数，直到它们相等。每一个这样的减法都保留了GCD——一个我们需要证明的不变量——两个相等的数的GCD就是那个数——这个数是我们通过上面的“GCD幂等”引理建立的。")]),s._v(" "),n("p",[s._v("该算法具有循环不变量和幂等引理，其结果如下:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("method EuclidGcd(X: pos, Y: pos) returns (gcd: pos)\n  ensures gcd == Gcd(X, Y)\n{\n  var x, y := X, Y;\n  while\n    invariant Gcd(x, y) == Gcd(X, Y)  // error: invariant not maintained\n    decreases x + y\n  {\n    case x < y =>\n      y := y - x;\n    case y < x =>\n      x := x - y;\n  }\n  GcdIdempotent(x);\n  return x;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("此方法使用"),n("code",[s._v("while")]),s._v(" - "),n("code",[s._v("case")]),s._v("循环。(如果您熟悉Dijkstra的保护命令["),n("a",{attrs:{href:"http://leino.science/papers/krml279.html#dijkstra:discipline",target:"_blank",rel:"noopener noreferrer"}},[s._v("1"),n("OutboundLink")],1),s._v("]，这是"),n("strong",[s._v("do-od")]),s._v("循环。)这个循环的每次迭代都会选择一个case来执行。所选的"),n("code",[s._v("case")]),s._v("必须是一个其守护条件求值为"),n("code",[s._v("true")]),s._v("的对象(如果几个"),n("code",[s._v("case")]),s._v("的守护条件求值为"),n("code",[s._v("true")]),s._v("，则循环在这些"),n("code",[s._v("case")]),s._v("之间任意选择)。如果没有这样的保护条件，则循环停止迭代。"),n("code",[s._v("EuclidGcd")]),s._v("中的循环当然可以是一个普通的"),n("code",[s._v("while x != y")]),s._v("循环，但"),n("code",[s._v("while")]),s._v(" - "),n("code",[s._v("case")]),s._v("循环提供的两种情况的对称性使其美观。")]),s._v(" "),n("p",[s._v("除了一个循环不变式外，循环还声明了一个终止度量(关键字"),n("code",[s._v("decreases")]),s._v(")。证明循环终止归结为证明每次迭代使终止度量的值减小(按照Dafny内置的基于良好基础的整数顺序)。")]),s._v(" "),n("p",[s._v("上面的"),n("code",[s._v("EuclidGcd")]),s._v("方法没有验证，因为验证器无法证明每次迭代都保持循环不变。为此，我们需要我在上面提到的GCD的第四个性质:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma GcdSubtract(x: pos, y: pos)\n  requires x < y\n  ensures Gcd(x, y) == Gcd(x, y - x)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("利用这个引理和GCD的对称性，我们可以完成"),n("code",[s._v("GCD")]),s._v("的证明:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("method EuclidGcd(X: pos, Y: pos) returns (gcd: pos)\n  ensures gcd == Gcd(X, Y)\n{\n  var x, y := X, Y;\n  while\n    invariant Gcd(x, y) == Gcd(X, Y)\n    decreases x + y\n  {\n    case x < y =>\n      GcdSubtract(x, y);\n      y := y - x;\n    case y < x =>\n      calc {\n        Gcd(x, y);\n      ==  { GcdSymmetric(x, y); }\n        Gcd(y, x);\n      ==  { GcdSubtract(y, x); }\n        Gcd(y, x - y);\n      ==  { GcdSymmetric(y, x - y); }\n        Gcd(x - y, y);\n      }\n      x := x - y;\n  }\n  GcdIdempotent(x);\n  return x;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("这个版本在循环的第一个分支中添加了对"),n("code",[s._v("GcdSubtract")]),s._v("的调用。在循环的第二个分支中，证明计算使用保持等式的步骤将表达式"),n("code",[s._v("Gcd(x, y)")]),s._v("转换为"),n("code",[s._v("Gcd(x - y, y)")]),s._v("。步骤中给出的提示求助于"),n("code",[s._v("GcdSubtract")]),s._v("和"),n("code",[s._v("GcdSymmetric")]),s._v("引理。")]),s._v(" "),n("h2",{attrs:{id:"gcd减性质"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gcd减性质"}},[s._v("#")]),s._v(" GCD减性质")]),s._v(" "),n("p",[s._v("在这个案例中，"),n("code",[s._v("GcdSubtract")]),s._v("的证明比其他任何定义和引理都要复杂。")]),s._v(" "),n("p",[s._v("证明首先引入Gcd"),n("code",[s._v("(x, y)")]),s._v("的名称:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  var p := Gcd(x, y);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("由"),n("code",[s._v("Gcd")]),s._v("的定义可知，"),n("code",[s._v("p")]),s._v("是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("的因子，我们可以证明"),n("code",[s._v("p")]),s._v("也是"),n("code",[s._v("y - x")]),s._v("的因子:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  assert IsFactor(p, y - x) by {\n    var a :| p * a == x;\n    var b :| p * b == y;\n    calc {\n      y - x;\n    ==\n      p * b - p * a;\n    ==\n      p * (b - a);\n    }\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("为了证明"),n("code",[s._v("IsFactor(p, y - x)")]),s._v("，我们对"),n("code",[s._v("IsFactor")]),s._v("的定义告诉我们存在的被乘数引入"),n("code",[s._v("a")]),s._v("和"),n("code",[s._v("b")]),s._v("名称(因为"),n("code",[s._v("p")]),s._v("是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("的因子)。用基本的算术步骤进行简单的计算，我们就可以得到p可以乘上另一个数(即"),n("code",[s._v("b - A")]),s._v(")得到"),n("code",[s._v("y - x")]),s._v("。")]),s._v(" "),n("p",[s._v("因为"),n("code",[s._v("p")]),s._v("同时是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y - x")]),s._v("的因子，所以它是"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y - x")]),s._v("的公因式。我们写了两行代码来确保验证器使用了这个属性，用集合交集来表达:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  var common := Factors(x) * Factors(y - x);\n  assert p in common;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("最后，我们需要证明"),n("code",[s._v("p")]),s._v("是这个公因式的最大。我们使用"),n("code",[s._v("forall")]),s._v("语句来声明这个属性:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  forall q | q in common\n    ensures q <= p\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("为了证明这个性质，我们填充了"),n("code",[s._v("forall")]),s._v("语句体。对于表示“公共性”集合中的任意数字"),n("code",[s._v("q")]),s._v("，我们分别将生成"),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y - x")]),s._v("乘积的被乘数命名为:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  {\n    var a :| q * a == x;\n    var b :| q * b == y - x;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("使用简单的算术步骤，我们可以用一个证明计算来确定"),n("code",[s._v("q")]),s._v("也是"),n("code",[s._v("y")]),s._v("的因子:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    assert IsFactor(q, y) by {\n      calc {\n        y;\n      ==\n        x + (y - x);\n      ==\n        q * a + q * b;\n      ==\n        q * (a + b);\n      }\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("所以，因为"),n("code",[s._v("q")]),s._v("既是"),n("code",[s._v("x")]),s._v("又是"),n("code",[s._v("y")]),s._v("的因子，所以"),n("code",[s._v("Gcd(x, y)")]),s._v("的定义告诉我们"),n("code",[s._v("q <= Gcd(x, y)")]),s._v("通过给出另一个关于集合交集的提示:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    assert q in Factors(x) * Factors(y);\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("验证者完成验证。")]),s._v(" "),n("h2",{attrs:{id:"更多的对称"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更多的对称"}},[s._v("#")]),s._v(" 更多的对称")]),s._v(" "),n("p",[s._v("虽然我们现在已经有了GCD算法的完整证明，但您的美感可能会因为我们在两种情况下提供证明的方式的不对称性而受到影响。既然"),n("code",[s._v("while")]),s._v(" - "),n("code",[s._v("case")]),s._v("循环为我们提供了这两种情况的对称表述，如果我们也能使这两种情况的证明更加相似就好了。")]),s._v(" "),n("p",[s._v("有几种方法可以改善这种情况。一种是重构第二个case的证明计算到它自己的引理中。然后，每个“案例”都有一行证明。")]),s._v(" "),n("p",[s._v("为了好玩，让我来描述另一个“技巧”，让这两种情况(不完全对称，但至少)更相似。诀窍在于使(已经不对称的)"),n("code",[s._v("GcdSubtract")]),s._v("引理也把参数转换为"),n("code",[s._v("Gcd")]),s._v("。我们将其改写为:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma GcdSubtract(x: pos, y: pos)\n  requires x < y\n  ensures Gcd(y, x) == Gcd(x, y - x)\n{\n  GcdSymmetric(x, y);\n  // ... the proof continues as before\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("注意后置条件的左边现在是"),n("code",[s._v("Gcd(y, x)")]),s._v("，而不是"),n("code",[s._v("Gcd(x, y)")]),s._v("就像我们在这个引理的第一个版本中一样。这个证明所需要的唯一改变就是诉诸于"),n("code",[s._v("Gcd")]),s._v("的对称性，我们可以通过引理内部的一个引理来做到这一点。这给了我们一个重新表述的“GcdSubtract”引理的证明。")]),s._v(" "),n("p",[s._v("通过这种重新表述，我们可以简化EuclidGcd的第二个“情形”，以使第一个“情形”更加复杂为代价。本质上，我们把一个引理调用从第二种情况移到第一种情况，所以不是有1和3个引理调用在两种情况下，我们会有2和2。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    case x < y =>\n      GcdSubtract(x, y);\n      GcdSymmetric(y, x);\n      y := y - x;\n    case y < x =>\n      GcdSymmetric(x - y, y);\n      GcdSubtract(y, x);\n      x := x - y;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("它不是完全对称的，但也许你还是喜欢它。或者你可能会在另一种情况下记住这个技巧，当鞋子非常合适的时候。如果没有别的，您可以坚持使用我们在上面开发的第一个完整的证明。")]),s._v(" "),n("h2",{attrs:{id:"主方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主方法"}},[s._v("#")]),s._v(" 主方法")]),s._v(" "),n("p",[s._v("如果证明本身不满足你，你仍然想看到算法的运行，你可以写一个"),n("code",[s._v("Main")]),s._v("方法，编译并运行程序。(在命令行中使用"),n("code",[s._v("dafny")]),s._v("工具的"),n("code",[s._v("/compile:3")]),s._v("选项是一种简单的方法。它将验证然后运行程序。)")]),s._v(" "),n("p",[s._v("下面是一个"),n("code",[s._v("Main")]),s._v("的例子:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('method Main() {\n  Test(15, 9);\n  Test(14, 22);\n  Test(371, 1);\n  Test(1, 2);\n  Test(1, 1);\n  Test(13, 13);\n  Test(60, 60);\n}\n\nmethod Test(x: pos, y: pos) {\n  var gcd := EuclidGcd(x, y);\n  print x, " gcd ", y, "  =  ", gcd, "\\n";\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"结论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[s._v("#")]),s._v(" 结论")]),s._v(" "),n("p",[s._v("这个案例研究展示了如何定义一个感兴趣的领域(这里是数字因子，导致了GCD的定义)，陈述和证明关于这些定义的一些引理，然后在一个小程序的证明中使用这些引理。")]),s._v(" "),n("p",[s._v("该程序，包括所有引理和其他与定义相关的证明义务，只需要少于3秒的Dafny验证器验证。您可以在Dafny测试套件["),n("a",{attrs:{href:"http://leino.science/papers/krml279.html#leino:gcd",target:"_blank",rel:"noopener noreferrer"}},[s._v("3"),n("OutboundLink")],1),s._v("]中找到整个程序。")]),s._v(" "),n("p",[s._v("欧几里德的GCD算法是一个常见的教科书例子。它在不同的验证器中以不同的形式被证明。例如，TLA+教程以这个程序为例["),n("a",{attrs:{href:"http://leino.science/papers/krml279.html#tla:tutorial",target:"_blank",rel:"noopener noreferrer"}},[s._v("0"),n("OutboundLink")],1),s._v("]。它假设了我们在这里证明的GCD的数学性质。Why3程序库包含欧几里德GCD算法的一个版本，它在每一步中使用模而不是减法，这样可以减少迭代次数["),n("a",{attrs:{href:"http://leino.science/papers/krml279.html#why3:gcd",target:"_blank",rel:"noopener noreferrer"}},[s._v("2"),n("OutboundLink")],1),s._v("]。")]),s._v(" "),n("h2",{attrs:{id:"致谢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#致谢"}},[s._v("#")]),s._v(" 致谢")]),s._v(" "),n("p",[s._v("我感谢Reto Kramer提出这个问题作为一个有用的案例研究。")]),s._v(" "),n("h2",{attrs:{id:"参考文献"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),n("p",[s._v("[0]TLA proof system. "),n("a",{attrs:{href:"https://tla.msr-inria.inria.fr/tlaps/content/Documentation/Tutorial/The_example.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://tla.msr-inria.inria.fr/tlaps/content/Documentation/Tutorial/The_example.html"),n("OutboundLink")],1),s._v(". "),n("a",{attrs:{href:"http://www.bing.com/search?q=+++proof+system+https+inria+inria+tlaps+content+Documentation+Tutorial+The_example+html++",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("[1]Edsger W. Dijkstra. "),n("em",[s._v("A Discipline of Programming")]),s._v(". Prentice Hall, Englewood Cliffs, NJ, 1976. "),n("a",{attrs:{href:"http://www.bing.com/search?q=+Discipline+Programming_++Edsger+Dijkstra+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("[2]Jean-Christophe Filliâtre and Claude Marché. Greatest common divisor, using the euclidean algorithm. "),n("a",{attrs:{href:"http://toccata.lri.fr/gallery/gcd.en.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://toccata.lri.fr/gallery/gcd.en.html"),n("OutboundLink")],1),s._v(". "),n("a",{attrs:{href:"http://www.bing.com/search?q=Greatest+common+divisor+using+euclidean+algorithm++Jean+Christophe+Filli+Claude+March+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("[3]K. Rustan M. Leino. gcd.dfy. "),n("a",{attrs:{href:"https://github.com/dafny-lang/dafny/blob/master/Test/dafny4/gcd.dfy",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/dafny-lang/dafny/blob/master/Test/dafny4/gcd.dfy"),n("OutboundLink")],1),s._v(", June 2021. "),n("a",{attrs:{href:"http://www.bing.com/search?q=+++Rustan+Leino+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=t.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{549:function(e,a,t){"use strict";t.r(a);var s=t(18),v=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"dafny-type-system"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dafny-type-system"}},[e._v("#")]),e._v(" Dafny Type System")]),e._v(" "),t("p",[t("em",[e._v("Dafny语言参考的这一部分描述了Dafny编程语言中的类型。所描述的是Dafny版本1.9.3.20107中实现的内容，异步任务类型尚未进入主分支。")])]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-basic-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("0. 基本类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-booleans",target:"_blank",rel:"noopener noreferrer"}},[e._v("0.0. 布尔值"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-numeric-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("0.1. 数字类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-char",target:"_blank",rel:"noopener noreferrer"}},[e._v("0.2. 字符"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-type-parameters",target:"_blank",rel:"noopener noreferrer"}},[e._v("1. 类型参数"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-collection-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("2. 集合类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-sets",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.0. 集合"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-multisets",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.1. 多集"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-sequences",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.2. 序列"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-string",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.2.0. 字符串"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-finite-and-infinite-maps",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.3. 有限与无限图"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-types-that-stand-for-other-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("3. 象征类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-type-synonyms",target:"_blank",rel:"noopener noreferrer"}},[e._v("3.0. 同义词类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-opaque-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("3.1. 不透明类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-datatypes",target:"_blank",rel:"noopener noreferrer"}},[e._v("4. 数据类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-inductive-datatypes",target:"_blank",rel:"noopener noreferrer"}},[e._v("4.0. 归纳数据类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-tuple-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("4.1. 元组类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-co-inductive-datatypes",target:"_blank",rel:"noopener noreferrer"}},[e._v("4.2. 共同归纳类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-reference-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("5. 参照类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.0. 类"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-arrays",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.1. 数组"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-one-dimensional-arrays",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.1.0. 一维数组"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-multi-dimensional-arrays",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.1.1. 多维数组"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-traits",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.2. 特征"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-type-object",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.3. 类型 "),t("code",[e._v("object")]),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-iterator-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.4. 迭代器类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-async-task-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.5. 异步任务类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-function-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("6. 函数类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-lambda-expressions",target:"_blank",rel:"noopener noreferrer"}},[e._v("6.0. Lambda表达式"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-newtypes",target:"_blank",rel:"noopener noreferrer"}},[e._v("7. 新类型"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-numeric-conversions",target:"_blank",rel:"noopener noreferrer"}},[e._v("7.0. 数字转化操作"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-subset-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("8. 子集类型"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"_0-基本类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-基本类型"}},[e._v("#")]),e._v(" 0. 基本类型")]),e._v(" "),t("p",[e._v("Dafny提供了三种基本类型，"),t("code",[e._v("bool")]),e._v("表示布尔，"),t("code",[e._v("int")]),e._v("表示整数，"),t("code",[e._v("real")]),e._v("表示实数。")]),e._v(" "),t("h3",{attrs:{id:"_0-0-booleans"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-0-booleans"}},[e._v("#")]),e._v(" 0.0. Booleans")]),e._v(" "),t("p",[e._v("有两个布尔值，每个值在语言中都有一个对应的文本："),t("code",[e._v("false")]),e._v("和"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[e._v("除了在所有类型上定义的相等（"),t("code",[e._v("=")]),e._v("）和disequality（"),t("code",[e._v("！=")]),e._v("），类型"),t("code",[e._v("bool")]),e._v("还支持以下操作：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<==>")])]),e._v(" "),t("td",[e._v("当且仅当")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("==>")])]),e._v(" "),t("td",[e._v("蕴含")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<==")])]),e._v(" "),t("td",[e._v("反向蕴含")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("&&")])]),e._v(" "),t("td",[e._v("连接(且)")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("||")])]),e._v(" "),t("td",[e._v("析取(或)")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("!")])]),e._v(" "),t("td",[e._v("否定(非)")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("否定是一元的；其他的是二进制的。该表显示了一组结合力不断增强的运算符，等式结合比合取和析取强，比否定弱。在每个组中，不同的运算符不关联，因此需要使用括号。例如,")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A && B || C    // error\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("将是不明确的，而必须写为")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(A && B) || C\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("或")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A && (B || C)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("取决于预期的意思。")]),e._v(" "),t("p",[e._v("表达式"),t("code",[e._v("A<=>B")]),e._v("和"),t("code",[e._v("A==B")]),e._v("给出了相同的值，但请注意，"),t("code",[e._v("<=>")]),e._v("是关联的，"),t("code",[e._v("=")]),e._v("是链接的。所以")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A <==> B <==> C\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("与下式相同")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A <==> (B <==> C)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("和")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(A <==> B) <==> C\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("鉴于")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A == B == C\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("只是下式的速记")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A == B && B == C\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("合取是关联的，析取也是。这些运算符是"),t("em",[e._v("短路（从左到右）")]),e._v("，这意味着只有在第一个操作数的计算不确定表达式的值时，才会计算它们的第二个参数。从逻辑上讲，表达式"),t("code",[e._v("A&&B")]),e._v("是在定义了"),t("code",[e._v("A")]),e._v("并且"),t("code",[e._v("A")]),e._v("的计算结果为"),t("code",[e._v("false")]),e._v("或"),t("code",[e._v("B")]),e._v("时定义的。定义"),t("code",[e._v("A&&B")]),e._v("时，其含义与普通的对称数学连词相同∧. | | |和∨.")]),e._v(" "),t("p",[e._v("含义是“右关联”，从左到右短路。反向蕴涵"),t("code",[e._v("B<==A")]),e._v("与"),t("code",[e._v("A==>B")]),e._v("完全相同，但可以按相反的顺序写入操作数。因此，反向含义是“左关联”，是从“右”到“左”的短路。为了说明关联性规则，以下四行中的每一行都表示了相同的属性，即"),t("code",[e._v("bool")]),e._v("类型的任何"),t("code",[e._v("A")]),e._v("、"),t("code",[e._v("B")]),e._v("和"),t("code",[e._v("C")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A ==> B ==> C\nA ==> (B ==> C)  // parentheses redundant, since ==> is right associative\nC <== B <== A\n(C <== B) <== A  // parentheses redundant, since <== is left associative\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("为了说明短路规则，请注意，表达式"),t("code",[e._v("a.Length")]),e._v("仅在"),t("code",[e._v("a")]),e._v("不为"),t("code",[e._v("null")]),e._v("时才为数组"),t("code",[e._v("a")]),e._v("定义 (见 小节 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-reference-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("5"),t("OutboundLink")],1),e._v("), 这意味着以下两个表达式格式正确：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a != null ==> 0 <= a.Length\n0 <= a.Length <== a != null\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("这两种表达的反作用是：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a.Length < 0 ==> a == null  // not well-formed\na == null <== a.Length < 0  // not well-formed\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("但这些表达式的格式不好，因为格式好要求左（和右）操作数"),t("code",[e._v("a.Length<0")]),e._v("本身格式良好。")]),e._v(" "),t("p",[e._v("蕴涵"),t("code",[e._v("A==>B")]),e._v("相当于析取"),t("code",[e._v("！A | | B")]),e._v("，但有时（尤其是在规范中）更清晰易读。由于"),t("code",[e._v("||")]),e._v("是从左向右短路，请注意")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a == null || 0 <= a.Length\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("结构良好，而")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("0 <= a.Length || a == null  // not well-formed\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("结构较差。")]),e._v(" "),t("p",[e._v("此外，布尔语支持"),t("em",[e._v("逻辑量词")]),e._v("（forall和exists），在Dafny语言参考的另一部分中有描述。")]),e._v(" "),t("h3",{attrs:{id:"_0-1-数字类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-数字类型"}},[e._v("#")]),e._v(" 0.1. 数字类型")]),e._v(" "),t("p",[e._v("Dafny 支持两种 "),t("em",[e._v("numeric 类型")]),e._v("，"),t("em",[e._v("integer-based")]),e._v("，包括所有整数的基本类型 "),t("code",[e._v("int")]),e._v("，和 "),t("em",[e._v("real-based")]),e._v("，包括所有实数的基本类型 "),t("code",[e._v("real")]),e._v("。 用户定义的基于 "),t("code",[e._v("int")]),e._v(" 和 "),t("code",[e._v("real")]),e._v(" 的数字类型，称为 "),t("em",[e._v("newtypes")]),e._v("，在第 [7] 节(http://leino.science/papers/krml243.html#sec-newtypes) 中有描述。 此外，代表 "),t("code",[e._v("int")]),e._v(" 的非负子范围的 "),t("em",[e._v("subset type")]),e._v(" "),t("code",[e._v("nat")]),e._v(" 在第 [8] 节（http://leino.science/papers/krml243.html#sec-subset-types）中进行了描述 .\n该语言包含每个非负整数的文字，例如“0”、“13”和“1985”。 整数也可以使用前缀“0x”以十六进制书写，如“0x0”、“0xD”和“0x7c1”（始终使用小写“x”，但十六进制数字本身不区分大小写）。 允许使用前导零。 要形成负整数，请使用一元减号运算符。\n一些非负实数也有文字。 这些被写成一个小数点，两边都有一个非空的十进制数字序列。 例如，“1.0”、“1609.344”和“0.5772156649”。\n对于整数（十进制和十六进制形式）和实数，文字中的任何两位数字都可以用下划线分隔，以提高文字的可读性。 例如：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1_000_000        // easier to read than 1000000\n0_12_345_6789    // strange but legal formatting of 123456789\n0x8000_0000      // same as 0x80000000 -- hex digits are often placed in groups of 4\n0.000_000_000_1  // same as 0.0000000001 -- 1 Ångström\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("除了相等和不相等之外，数值类型还支持以下关系运算：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("operator")]),e._v(" "),t("td",[e._v("description")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("<")]),e._v(" "),t("td",[e._v("less than")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<=")])]),e._v(" "),t("td",[e._v("at most")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">=")])]),e._v(" "),t("td",[e._v("at least")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">")])]),e._v(" "),t("td",[e._v("greater than")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("就像相等和不相等一样，这些运算符是链接的，只要它们链接在“相同的方向”。 那就是说，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A <= B < C == D <= E\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("is simply a shorthand for")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A <= B && B < C && C == D && D <= E\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("而")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A < B > C\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("不被允许。\n每种数字类型也有运算符：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("+")])]),e._v(" "),t("td",[e._v("加")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("-")])]),e._v(" "),t("td",[e._v("减")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("*")])]),e._v(" "),t("td",[e._v("乘")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("/")])]),e._v(" "),t("td",[e._v("除")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("%")])]),e._v(" "),t("td",[e._v("取模")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("-")])]),e._v(" "),t("td",[e._v("否定 (一元减)")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("二元运算符是左结合的，它们在两组中相互关联。 这些组按绑定能力增加的顺序列出，等式绑定比乘法运算符更强，比一元运算符弱。 仅基于整数的数值类型支持模数。 整数除法和模数是"),t("em",[e._v("欧几里得除法和模数")]),e._v("。 这意味着无论两个操作数的符号如何，模数始终返回非负数。 更准确地说，对于任何整数"),t("code",[e._v("a")]),e._v("和非零整数"),t("code",[e._v("b")]),e._v("，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a == a / b * b + a % b\n0 <= a % b < B\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("其中“B”表示“b”的绝对值。\n基于实数的数值类型有一个成员 "),t("code",[e._v("Trunc")]),e._v("，它返回实数值的 "),t("em",[e._v("floor")]),e._v("，即不超过实数值的最大整数。 例如，对于任何类型为“real”的“r”和“r”，以下属性成立：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("3.14.Trunc == 3\n(-2.5).Trunc == -3\n-2.5.Trunc == -2\nreal(r.Trunc) <= r\nr <= r' ==> r.Trunc <= r'.Trunc\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("请注意，在第三行中，成员访问（如 "),t("code",[e._v(".Trunc")]),e._v("）的绑定比一元减号更强。 第四行使用从 "),t("code",[e._v("int")]),e._v(" 到 "),t("code",[e._v("real")]),e._v(" 的转换函数 "),t("code",[e._v("real")]),e._v("，如第 [7.0] 节 (http://leino.science/papers/krml243.html#sec-numeric-conversions) 中所述")]),e._v(" "),t("h3",{attrs:{id:"_0-2-字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-2-字符"}},[e._v("#")]),e._v(" 0.2. 字符")]),e._v(" "),t("p",[e._v("Dafny 支持 "),t("em",[e._v("characters")]),e._v(" 的 "),t("code",[e._v("char")]),e._v(" 类型。 字符文字用单引号括起来，如 "),t("code",[e._v("'D'")]),e._v("。 要将单引号写成字符文字，必须使用"),t("em",[e._v("转义序列")]),e._v("。 转义序列也可用于写入其他字符。 支持的转义序列如下：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("转义字符")]),e._v(" "),t("td",[e._v("含义")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\'")])]),e._v(" "),t("td",[e._v("字符 "),t("code",[e._v("'")])])]),e._v(" "),t("tr",[t("td",[t("code",[e._v('\\"')])]),e._v(" "),t("td",[e._v('字符 "')])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\\\")])]),e._v(" "),t("td",[e._v("字符 "),t("code",[e._v("\\")])])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\0")])]),e._v(" "),t("td",[e._v("空字符，同 "),t("code",[e._v("\\u0000")])])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\n")])]),e._v(" "),t("td",[e._v("换行")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\r")])]),e._v(" "),t("td",[e._v("回车")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\t")])]),e._v(" "),t("td",[e._v("水平制表")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\u*xxxx*")])]),e._v(" "),t("td",[e._v("十六进制编码通用字符 "),t("code",[e._v("*xxxx*")])])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("双引号的转义序列是多余的，因为 '\"' 和 '\"' 表示相同的字符——提供这两种形式是为了支持与字符串文字相同的转义序列（第 [2.2.0] 节（http: //leino.science/papers/krml243.html#sec-string))。 在 "),t("code",[e._v("\\u*xxxx*")]),e._v(" 形式中，"),t("code",[e._v("u")]),e._v(" 总是小写，但四个十六进制数字不区分大小写。\n字符值是有序的，可以使用标准关系运算符进行比较：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<")])]),e._v(" "),t("td",[e._v("少于")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<=")])]),e._v(" "),t("td",[e._v("至多")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">=")])]),e._v(" "),t("td",[e._v("至少")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">")])]),e._v(" "),t("td",[e._v("大于")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("字符序列表示字符串，如第 2.2.0 节所述。(http://leino.science/papers/krml243.html#sec-string).")]),e._v(" "),t("h2",{attrs:{id:"_1-类型参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型参数"}},[e._v("#")]),e._v(" 1. 类型参数")]),e._v(" "),t("p",[e._v("Dafny 中的许多类型（以及函数和方法）都可以通过类型进行参数化。 这些"),t("em",[e._v("类型参数")]),e._v("通常在尖括号内声明，可以代表任何类型。 有时需要限制这些类型参数，以便它们只能由某些类型的系列实例化。 因此，Dafny 不仅在幽灵上下文中而且在编译上下文中区分支持相等操作的类型。 为了表明一个类型参数被限制为这种"),t("em",[e._v("支持平等的")]),e._v("类型，类型参数的名称采用后缀“"),t("code",[e._v("(==)")]),e._v("”。[0](http://leino.science/papers/krml243. html#fn-fn-type-mode) 例如，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("method Compare〈T(==)〉(a: T, b: T) returns (eq: bool)\n{\n  if a == b { eq := true; } else { eq := false; }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("是一种方法，其类型参数仅限于支持相等的类型。 同样，请注意 "),t("em",[e._v("all")]),e._v(" 类型在 "),t("em",[e._v("ghost")]),e._v(" 上下文中支持相等； 区别仅适用于非幽灵（即编译）代码。 共归纳数据类型、函数类型以及带有幻像参数的归纳数据类型是不支持等式的类型的示例。\nDafny 有一些推理支持，可以使某些签名不那么混乱（在 Dafny 语言参考的不同部分中进行了描述）。 在某些情况下，这种支持会推断出必须将类型参数限制为支持相等的类型，在这种情况下，Dafny 会自动添加“"),t("code",[e._v("(==)")]),e._v("”。")]),e._v(" "),t("h2",{attrs:{id:"_2-集合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-集合类型"}},[e._v("#")]),e._v(" 2. 集合类型")]),e._v(" "),t("p",[e._v("Dafny 提供了几种内置的集合类型。")]),e._v(" "),t("h3",{attrs:{id:"_2-0-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-集合"}},[e._v("#")]),e._v(" 2.0. 集合")]),e._v(" "),t("p",[e._v("对于任何类型 "),t("code",[e._v("T")]),e._v("，"),t("code",[e._v("set〈T〉")]),e._v(" 类型的每个值都是 "),t("code",[e._v("T")]),e._v(" 值的有限集合。 集合成员资格由类型 "),t("code",[e._v("T")]),e._v(" 中的相等性确定，因此只有当"),t("code",[e._v("T")]),e._v(" 支持相等性时，"),t("code",[e._v("set〈T〉")]),e._v(" 才能在非幽灵上下文中使用。\n可以使用 "),t("em",[e._v("set display")]),e._v(" 表达式形成一个集合，该表达式可能是一个空的、无序的、不区分重复的表达式列表，用花括号括起来。 为了显示，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{}        {2, 7, 5, 3}        {4+2, 1+5, a*b}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("是设置显示的三个示例。 还有一个 "),t("em",[e._v("set comprehension")]),e._v(" 表达式（带有活页夹，就像在逻辑量化中一样），在 Dafny 语言参考的不同部分进行了描述。\n除了相等和不相等之外，集合类型还支持以下关系运算：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<")])]),e._v(" "),t("td",[e._v("真子集")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<=")])]),e._v(" "),t("td",[e._v("子集")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">=")])]),e._v(" "),t("td",[e._v("超集")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">")])]),e._v(" "),t("td",[e._v("真超集")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("与算术关系运算符一样，这​​些运算符是链接的。\n集合支持以下二元运算符，按绑定能力递增的顺序列出：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("!!")])]),e._v(" "),t("td",[e._v("不相交")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("+")])]),e._v(" "),t("td",[e._v("设置联合")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("-")])]),e._v(" "),t("td",[e._v("设置差异")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("*")])]),e._v(" "),t("td",[e._v("设置交点")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[t("code",[e._v("+")]),e._v("、"),t("code",[e._v("-")]),e._v(" 和 "),t("code",[e._v("*")]),e._v(" 的结合性规则类似于同名算术运算符的结合性规则。 表达式"),t("code",[e._v("A !! B")]),e._v("，它的约束力与相等性相同（但它既不与相等性联系也不连锁），说集合"),t("code",[e._v("A")]),e._v("和"),t("code",[e._v("B")]),e._v("没有共同的元素，也就是说，它等价于")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A * B == {}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("但是，不相交运算符是链式的，所以 "),t("code",[e._v("A !! B !! C !! D")]),e._v("表示：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A * B == {} && (A + B) * C == {} && (A + B + C) * D == {}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("此外，对于任何"),t("code",[e._v("set〈T〉")]),e._v("类型的集合"),t("code",[e._v("s")]),e._v("和任何"),t("code",[e._v("T")]),e._v("类型的表达式"),t("code",[e._v("e")]),e._v("，集合支持以下操作：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("表达式")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("|s|")]),e._v(" "),t("td",[e._v("集合基数")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("e in s")])]),e._v(" "),t("td",[e._v("集合成员")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("e !in s")])]),e._v(" "),t("td",[e._v("集合非成员")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("表达式 "),t("code",[e._v("e !in s")]),e._v(" 是 "),t("code",[e._v("!(e in s)")]),e._v(" 的语法简写。")]),e._v(" "),t("h3",{attrs:{id:"_2-1-multisets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-multisets"}},[e._v("#")]),e._v(" 2.1. Multisets")]),e._v(" "),t("p",[t("em",[e._v("multiset")]),e._v(" 类似于集合，但跟踪每个元素的多重性，而不仅仅是它的存在或不存在。 对于任何类型 "),t("code",[e._v("T")]),e._v("，"),t("code",[e._v("multiset〈T〉")]),e._v(" 类型的每个值都是从 "),t("code",[e._v("T")]),e._v(" 值到表示每个元素的多重性的自然数的映射。 Dafny 中的多重集是有限的，也就是说，它们包含有限数量的每个有限元素。 换句话说，多重集仅将有限数量的元素映射到非零（有限）多重性。\n与集合一样，多集成员资格由类型“T”中的相等性确定，因此只有当“T”支持相等时，“多集〈T〉”才能在非幽灵上下文中使用。\n可以使用 "),t("em",[e._v("multiset display")]),e._v(" 表达式来形成多重集，该表达式可能是一个空的、无序列的表达式列表，包含在关键字 "),t("code",[e._v("multiset")]),e._v(" 后面的花括号中。 为了显示，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("multiset{}    multiset{0, 1, 1, 2, 3, 5}    multiset{4+2, 1+5, a*b}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("是多组显示的三个示例。 没有多集理解表达式。\n除了相等和不相等之外，多重集类型还支持以下关系运算：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("<")]),e._v(" "),t("td",[e._v("真多集子集")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<=")])]),e._v(" "),t("td",[e._v("多集子集")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">=")])]),e._v(" "),t("td",[e._v("多集超集")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v(">")])]),e._v(" "),t("td",[e._v("真多集超集")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("与算术关系运算符一样，这​​些运算符是链接的。\n多重集支持以下二元运算符，按绑定能力递增的顺序列出：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("!!")])]),e._v(" "),t("td",[e._v("多集不相交")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("+")])]),e._v(" "),t("td",[e._v("多集联合")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("-")])]),e._v(" "),t("td",[e._v("多集差异")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("*")])]),e._v(" "),t("td",[e._v("多集交集")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[t("code",[e._v("+")]),e._v("、"),t("code",[e._v("-")]),e._v(" 和 "),t("code",[e._v("*")]),e._v(" 的结合性规则类似于同名算术运算符的结合性规则。 表达式'A !! B"),t("code",[e._v("表示多重集")]),e._v("A"),t("code",[e._v("和")]),e._v("B` 没有共同的元素，也就是说，它等价于")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A * B == multiset{}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("与类似的集合运算符一样，"),t("code",[e._v("!!")]),e._v(" 是链式的。\n此外，对于任何类型为"),t("code",[e._v("multiset〈T〉的多重集")]),e._v("s"),t("code",[e._v("、类型为")]),e._v("T"),t("code",[e._v("的表达式")]),e._v("e"),t("code",[e._v("和基于非负整数的数字n")]),e._v("，多重集支持以下操作：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("表达式")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("|s|")]),e._v(" "),t("td",[e._v("多集基数")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("e in s")])]),e._v(" "),t("td",[e._v("多集成员")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("e !in s")])]),e._v(" "),t("td",[e._v("多集非成员")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[e]")])]),e._v(" "),t("td",[t("code",[e._v("e")]),e._v(" 在 "),t("code",[e._v("s")]),e._v(" 中的多样性")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[e := n]")])]),e._v(" "),t("td",[e._v("多集更新 (多样性变化)")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("当且仅当 "),t("code",[e._v("s[e] != 0")]),e._v(" 时，表达式 "),t("code",[e._v("e in s")]),e._v(" 才会返回 "),t("code",[e._v("true")]),e._v("。 表达式 "),t("code",[e._v("e !in s")]),e._v(" 是 "),t("code",[e._v("!(e in s)")]),e._v(" 的语法简写。 表达式 "),t("code",[e._v("s[e := n]")]),e._v(" 表示类似于 "),t("code",[e._v("s")]),e._v(" 的多重集，但元素 "),t("code",[e._v("e")]),e._v(" 的多重性是 "),t("code",[e._v("n")]),e._v("。 请注意，多重集更新 "),t("code",[e._v("s[e := 0]")]),e._v(" 会产生类似 "),t("code",[e._v("s")]),e._v(" 的多重集，但不会出现任何 "),t("code",[e._v("e")]),e._v("（无论 "),t("code",[e._v("s")]),e._v(" 首先是否出现过"),t("code",[e._v("e")]),e._v("）。 作为另一个示例，请注意 "),t("code",[e._v("s - multiset{e}")]),e._v(" 等价于：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if e in s then s[e := s[e] - 1] else s\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_2-2-序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-序列"}},[e._v("#")]),e._v(" 2.2. 序列")]),e._v(" "),t("p",[e._v("对于任何类型“T”，“seq〈T〉”类型的值表示“T”元素的"),t("em",[e._v("序列")]),e._v("，即从连续自然数的有限集合（称为"),t("em",[e._v("indicies")]),e._v("）到“T”的映射 `价值观。 （将其视为一个映射，因此序列是多重集的对偶。）可以使用 "),t("em",[e._v("sequence display")]),e._v(" 表达式形成序列，该表达式可能是一个包含在方括号中的空的、有序的表达式列表。 为了阐释，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[]        [3, 1, 4, 1, 5, 9, 3]        [4+2, 1+5, a*b]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("是顺序显示的三个示例。 没有序列理解表达式。\n除了相等和不相等之外，序列类型还支持以下关系运算：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("<")]),e._v(" "),t("td",[e._v("真前缀")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("<=")])]),e._v(" "),t("td",[e._v("前缀")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("与算术关系运算符一样，这​​些运算符是链接的。 注意没有"),t("code",[e._v(">")]),e._v("和"),t("code",[e._v(">=")]),e._v("。\n序列支持以下二元运算符：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("操作符")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("+")])]),e._v(" "),t("td",[e._v("连接")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("运算符 "),t("code",[e._v("+")]),e._v(" 是关联的，就像同名的算术运算符一样。\n此外，对于任何类型为“seq〈T〉”的序列“s”，类型为“T”的表达式“e”，基于整数的数字“i”满足“0 <= i < |s|”，以及整数- 基于数字 "),t("code",[e._v("lo")]),e._v(" 和 "),t("code",[e._v("hi")]),e._v(" 满足 "),t("code",[e._v("0 <= lo <= hi <= |s|")]),e._v("，序列支持以下操作：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("表达式")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("|s|")]),e._v(" "),t("td",[e._v("序列长度")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[i]")])]),e._v(" "),t("td",[e._v("序列选择")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[i := e]")])]),e._v(" "),t("td",[e._v("序列更新")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("e in s")])]),e._v(" "),t("td",[e._v("序列成员")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("e !in s")])]),e._v(" "),t("td",[e._v("序列非成员")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[lo..hi]")])]),e._v(" "),t("td",[e._v("子序列")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[lo..]")])]),e._v(" "),t("td",[e._v("drop")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[..hi]")])]),e._v(" "),t("td",[e._v("take")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("s[*slices*]")])]),e._v(" "),t("td",[e._v("切片")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("multiset(s)")])]),e._v(" "),t("td",[e._v("序列转换为 "),t("code",[e._v("multiset〈T〉")])])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("表达式 "),t("code",[e._v("s[i := e]")]),e._v(" 返回一个类似 "),t("code",[e._v("s")]),e._v(" 的序列，除了索引 "),t("code",[e._v("i")]),e._v(" 处的元素是 "),t("code",[e._v("e")]),e._v("。 表达式 "),t("code",[e._v("e in s")]),e._v(" 表示存在一个索引 "),t("code",[e._v("i")]),e._v(" 使得 "),t("code",[e._v("s[i] == e")]),e._v("。 仅当元素类型“T”支持相等时，才允许在非幽灵上下文中使用。 表达式 "),t("code",[e._v("e !in s")]),e._v(" 是 "),t("code",[e._v("!(e in s)")]),e._v(" 的语法简写。")]),e._v(" "),t("p",[e._v("表达式 "),t("code",[e._v("s[lo..hi]")]),e._v(" 产生一个序列，该序列通过获取第一个 "),t("code",[e._v("hi")]),e._v(" 元素然后删除第一个 "),t("code",[e._v("lo")]),e._v(" 元素而形成。 因此，结果序列的长度为“hi - lo”。 请注意，"),t("code",[e._v("s[0..|s|]")]),e._v(" 等于 "),t("code",[e._v("s")]),e._v("。 如果省略上限，则默认为 "),t("code",[e._v("|s|")]),e._v("，因此 "),t("code",[e._v("s[lo..]")]),e._v(" 会生成通过删除 "),t("code",[e._v("s")]),e._v(" 的第一个 "),t("code",[e._v("lo")]),e._v(" 元素形成的序列。 如果省略下限，则默认为 0，因此 s[..hi] 产生由 s 的第一个 hi 元素形成的序列。")]),e._v(" "),t("p",[e._v("在序列切片操作中，"),t("em",[e._v("slices")]),e._v(" 是一个长度指示符的非空列表，由冒号分隔并可选地终止，并且至少有一个冒号。 每个长度指示符都是一个基于非负整数的数字，其总和不大于"),t("code",[e._v("|s|")]),e._v("。 如果有 "),t("em",[e._v("k")]),e._v(" 个冒号，则该操作会从 "),t("code",[e._v("s")]),e._v(" 生成 "),t("em",[e._v("k")]),e._v(" 个连续子序列，每个长度由相应的长度指示符指示，并将这些作为序列序列返回。"),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#fn-fn-slice-into-tuple",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),t("OutboundLink")],1),e._v(" 如果 "),t("em",[e._v("slices")]),e._v(" 以冒号结尾，那么最后一个切片的长度会一直延伸到 "),t("code",[e._v("s")]),e._v(" 的末尾，即 它的长度是"),t("code",[e._v("|s|")]),e._v("减去给定长度指示符的总和。 例如，对于任何长度至少为 10 的序列 s ，以下等式成立：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var t := [3.14, 2.7, 1.41, 1985.44, 100.0, 37.2][1:0:3];\nassert |t| == 3 && t[0] == [3.14] && t[1] == [];\nassert t[2] == [2.7, 1.41, 1985.44];\nvar u := [true, false, false, true][1:1:];\nassert |u| == 3 && u[0][0] && !u[1][0] && u[2] == [false, true];\nassert s[10:][0] == s[..10];\nassert s[10:][1] == s[10..];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("操作"),t("code",[e._v("multiset(s)")]),e._v("产生序列"),t("code",[e._v("s")]),e._v("的元素的多重集。 仅当元素类型“T”支持相等时，才允许在非幽灵上下文中使用。")]),e._v(" "),t("h4",{attrs:{id:"_2-2-0-字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-0-字符串"}},[e._v("#")]),e._v(" 2.2.0. 字符串")]),e._v(" "),t("p",[e._v("序列类型的一个特例是"),t("code",[e._v("seq〈char〉")]),e._v("，Dafny 提供了一个同义词："),t("code",[e._v("string")]),e._v("。 字符串与其他序列类似，但为序列显示表达式提供了额外的语法，即"),t("em",[e._v("字符串文字")]),e._v("。 字符串文字有两种语法形式："),t("em",[e._v("标准形式")]),e._v("和"),t("em",[e._v("逐字形式")]),e._v("。")]),e._v(" "),t("p",[e._v("标准形式的字符串文字用双引号括起来，如 "),t("code",[e._v('"Dafny"')]),e._v("。 要在这样的字符串文字中包含双引号，必须使用转义序列。 转义序列也可用于包含其他字符。 支持的转义序列与字符文字相同，请参阅第 [0.2] 节(http://leino.science/papers/krml243.html#sec-char)。 例如，Dafny 表达式 "),t("code",[e._v('"say \\"yes\\""')]),e._v(' 表示字符串 say "yes"。 单引号的转义序列是多余的，因为 "\'" 和 "\'" 表示相同的字符串——提供这两种形式是为了支持与字符文字相同的转义序列。')]),e._v(" "),t("p",[e._v('逐字形式的字符串文字用 @" 和 " 括起来，如 '),t("code",[e._v('@"Dafny"')]),e._v("。 要在这样的字符串文字中包含双引号，必须使用转义序列“”，即两次写入字符。 在逐字形式中，没有其他转义序列。 甚至像换行符这样的字符也可以写在字符串文字中（因此在程序文本中跨越多行）。\n例如，以下三个表达式表示相同的字符串：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\"C:\\\\tmp.txt\"\n@\"C:\\tmp.txt\"\n['C', ':', '\\\\', 't', 'm', 'p', '.', 't', 'x', 't']\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("由于字符串是序列，因此在它们上定义了关系运算符 < 和 "),t("code",[e._v("<=")]),e._v("。 但是请注意，这些运算符仍然分别表示正确的前缀和前缀，而不是可能需要的某种字母比较，例如，在对字符串进行排序时。")]),e._v(" "),t("h3",{attrs:{id:"_2-3-有限与无限图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-有限与无限图"}},[e._v("#")]),e._v(" 2.3. 有限与无限图")]),e._v(" "),t("p",[e._v("对于任何类型"),t("code",[e._v("T")]),e._v("和"),t("code",[e._v("U")]),e._v("，"),t("code",[e._v("map〈T，U〉")]),e._v("类型的值表示从"),t("code",[e._v("T")]),e._v("到"),t("code",[e._v("U")]),e._v("的*（有限）映射*。 换句话说，它是一个由"),t("code",[e._v("T")]),e._v("索引的查找表。 地图的 "),t("em",[e._v("domain")]),e._v(" 是一组有限的 "),t("code",[e._v("T")]),e._v(" 值，它们具有关联的 "),t("code",[e._v("U")]),e._v(" 值。 由于域中的键是使用 "),t("code",[e._v("T")]),e._v(" 类型中的相等性进行比较的，因此只有当"),t("code",[e._v("T")]),e._v(" 支持相等性时，类型"),t("code",[e._v("map〈T,U〉")]),e._v(" 才能在非幽灵上下文中使用。")]),e._v(" "),t("p",[e._v("类似地，对于任何类型 "),t("code",[e._v("T")]),e._v(" 和 "),t("code",[e._v("U")]),e._v("，"),t("code",[e._v("imap⟨T,U⟩")]),e._v(" 类型的值表示*（可能）无限映射*。 在大多数情况下，"),t("code",[e._v("imap<T,U>")]),e._v(" 类似于 "),t("code",[e._v("map<T,U>")]),e._v("，但是 "),t("code",[e._v("imap<T,U>")]),e._v(" 类型的映射允许有一个无限域。")]),e._v(" "),t("p",[e._v("可以使用 "),t("em",[e._v("map display")]),e._v(" 表达式形成地图，该表达式可能是一个空的、有序的 "),t("em",[e._v("maplets")]),e._v(" 列表，每个 maplet 具有 "),t("code",[e._v("t := u")]),e._v(" 的形式，其中 "),t("code",[e._v("t")]),e._v(" 是 "),t("code",[e._v("T")]),e._v(" 类型的表达式，并且 "),t("code",[e._v("u")]),e._v(" 是"),t("code",[e._v("U")]),e._v(" 类型的表达式，放在关键字"),t("code",[e._v("map")]),e._v(" 后面的方括号中。 为了显示，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("map[]    map[20 := true, 3 := false, 20 := false]    map[a+b := c+d]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("是地图显示的三个示例。 通过使用关键字 "),t("code",[e._v("imap")]),e._v(" 而不是 "),t("code",[e._v("map")]),e._v("，生成的地图将是 "),t("code",[e._v("imap<T,U>")]),e._v(" 类型而不是 "),t("code",[e._v("map<T,U>")]),e._v("。 请注意，允许无限映射 ("),t("code",[e._v("imap")]),e._v(") 具有有限域，而不允许有限映射 ("),t("code",[e._v("map")]),e._v(") 具有无限域。 如果同一个键出现多次，则结果映射中只出现最后一次出现。"),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#fn-fn-map-display",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),t("OutboundLink")],1),e._v(" 还有一个 * 地图理解表达式*，在 Dafny 语言参考的不同部分进行了解释。")]),e._v(" "),t("p",[e._v("对于"),t("code",[e._v("map<T,U>")]),e._v("类型的任何映射"),t("code",[e._v("fm")]),e._v("，"),t("code",[e._v("map<T,U>")]),e._v("或"),t("code",[e._v("imap<T,U>")]),e._v("类型的任何映射"),t("code",[e._v("m")]),e._v("，"),t("code",[e._v("类型")]),e._v("的任何表达式"),t("code",[e._v("t")]),e._v(" T"),t("code",[e._v("，")]),e._v("U"),t("code",[e._v("类型的任何表达式")]),e._v("u"),t("code",[e._v("，以及")]),e._v("m"),t("code",[e._v("域中的任何")]),e._v("d"),t("code",[e._v("（即满足")]),e._v("d in m`），映射支持以下操作：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("表达式")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("|fm|")]),e._v(" "),t("td",[e._v("地图基数")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("m[d]")])]),e._v(" "),t("td",[e._v("地图选择")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("m[t := u]")])]),e._v(" "),t("td",[e._v("地图更新")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("t in m")])]),e._v(" "),t("td",[e._v("映射域成员")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("t !in m")])]),e._v(" "),t("td",[e._v("映射域非成员")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[t("code",[e._v("|fm|")]),e._v(" 表示"),t("code",[e._v("fm")]),e._v(" 中的映射个数，即"),t("code",[e._v("fm")]),e._v(" 的域的基数。 请注意，无限映射不支持基数运算符。 表达式 "),t("code",[e._v("m[d]")]),e._v(" 返回 "),t("code",[e._v("m")]),e._v(" 与 "),t("code",[e._v("d")]),e._v(" 关联的 "),t("code",[e._v("U")]),e._v(" 值。 表达式 "),t("code",[e._v("m[t := u]")]),e._v(" 是一个类似于 "),t("code",[e._v("m")]),e._v(" 的映射，除了键 "),t("code",[e._v("t")]),e._v(" 处的元素是 "),t("code",[e._v("u")]),e._v("。")]),e._v(" "),t("p",[e._v("表达式 "),t("code",[e._v("t in m")]),e._v(" 表示 "),t("code",[e._v("t")]),e._v(" 在 "),t("code",[e._v("m")]),e._v(" 的域中，而 "),t("code",[e._v("t !in m")]),e._v(" 是 "),t("code",[e._v("!(t in m)")]),e._v(" 的语法简写。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#fn-fn-map-membership",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),t("OutboundLink")],1),e._v(" 这是一个小例子，其中类型为 "),t("code",[e._v("map<int,real>")]),e._v(" 的地图 "),t("code",[e._v("cache")]),e._v(" 用于缓存 Joule-Thomson 系数的计算值 给定温度下的一些固定气体：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if K in cache {  // check if temperature is in domain of cache\n  coeff := cache[K];  // read result in cache\n} else {\n  coeff := ComputeJouleThomsonCoefficient(K);  // do expensive computation\n  cache := cache[K := coeff];  // update the cache\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h2",{attrs:{id:"_3-象征类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-象征类型"}},[e._v("#")]),e._v(" 3. 象征类型")]),e._v(" "),t("p",[e._v("有时通过多个名称了解一个类型或抽象地处理一个类型很有用。")]),e._v(" "),t("h3",{attrs:{id:"_3-0-同义词类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-同义词类型"}},[e._v("#")]),e._v(" 3.0. 同义词类型")]),e._v(" "),t("p",[t("em",[e._v("类型同义词")]),e._v("声明：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Y〈T〉 = G\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("声明 "),t("code",[e._v("Y〈T〉")]),e._v(" 是类型 "),t("code",[e._v("G")]),e._v(" 的同义词。 这里，"),t("code",[e._v("T")]),e._v(" 是一个类型参数的非空列表（每个参数都可选地用后缀“"),t("code",[e._v("(==)")]),e._v("”指定），它可以用作"),t("code",[e._v("G")]),e._v(" 中的自由类型变量。 如果同义词没有类型参数，则删除“"),t("code",[e._v("〈T〉")]),e._v("”。 在所有情况下，类型同义词只是同义词。 也就是说，除了可能产生的错误消息之外，"),t("code",[e._v("Y〈T〉")]),e._v(" 和 "),t("code",[e._v("G")]),e._v(" 之间从来没有区别。")]),e._v(" "),t("p",[e._v("例如，以下类型同义词的名称可能会提高程序的可读性：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Replacements〈T〉 = map〈T,T〉\ntype Vertex = int\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("如第 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#sec-string",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.2.0"),t("OutboundLink")],1),e._v(" 中所述，"),t("code",[e._v("string")]),e._v(" 是"),t("code",[e._v("seq〈char〉")]),e._v(" 的内置类型同义词，好像 它将被宣布如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type string = seq〈char〉\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_3-1-不透明类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-不透明类型"}},[e._v("#")]),e._v(" 3.1. 不透明类型")]),e._v(" "),t("p",[e._v("类型同义词的一个特例是未指定的。 这样的类型简单地通过以下方式声明：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Y〈T〉\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("它被称为"),t("em",[e._v("不透明类型")]),e._v("。 它的定义可以在精炼模块中显示。 为了表明 "),t("code",[e._v("Y")]),e._v(" 表示支持相等的类型，可以在名称“"),t("code",[e._v("Y")]),e._v("”之后紧跟“"),t("code",[e._v("(==)")]),e._v("”。")]),e._v(" "),t("p",[e._v("例如，声明")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type T\nfunction F(t: T): T\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("可用于在某个任意类型“T”上建模未解释的函数“F”。 作为另一个例子，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Monad〈T〉\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("可以抽象地用于表示任意参数化的 monad。")]),e._v(" "),t("h2",{attrs:{id:"_4-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据类型"}},[e._v("#")]),e._v(" 4. 数据类型")]),e._v(" "),t("p",[e._v("Dafny 提供了两种代数数据类型，一种是归纳定义的，另一种是协归纳定义的。 每个数据类型的显着属性是该类型的每个值唯一标识数据类型的构造函数之一，并且每个构造函数的参数都是单射的。")]),e._v(" "),t("h3",{attrs:{id:"_4-0-归纳类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-归纳类型"}},[e._v("#")]),e._v(" 4.0. 归纳类型")]),e._v(" "),t("p",[e._v("归纳数据类型的值可以看作是有限树，其中叶子是基本类型、数值类型、引用类型、共归纳数据类型或函数类型的值。 实际上，可以使用 Dafny 有根据的 < 排序来比较归纳数据类型的值。")]),e._v(" "),t("p",[e._v("归纳数据类型声明如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("datatype D〈T〉 = Ctors\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("其中 "),t("code",[e._v("*Ctors*")]),e._v(" 是一个非空的 "),t("code",[e._v("|")]),e._v(" 分隔的 "),t("em",[e._v("(datatype) 构造函数")]),e._v(" 的数据类型列表。 每个构造函数都有以下形式：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("C(params)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("其中 "),t("code",[e._v("*params*")]),e._v(" 是一个逗号分隔的类型列表，前面可选参数名称和冒号，前面可选关键字 "),t("code",[e._v("ghost")]),e._v("。 如果构造函数没有参数，则可以省略构造函数名称后面的括号。 如果没有构造函数接受参数，则该类型通常称为"),t("em",[e._v("枚举")]),e._v("； 例如：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("datatype Friends = Agnes | Agatha | Jermaine | Jack\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("对于每个构造函数 "),t("code",[e._v("C")]),e._v("，Dafny 定义了一个 "),t("em",[e._v("discriminator")]),e._v(" "),t("code",[e._v("C?")]),e._v("，它是一个返回 "),t("code",[e._v("true")]),e._v(" 的成员，当且仅当数据类型值是使用 "),t("code",[e._v("C")]),e._v(" 构造的。 对于构造函数 "),t("code",[e._v("C")]),e._v(" 的每个命名参数 "),t("code",[e._v("p")]),e._v("，Dafny 定义了一个 "),t("em",[e._v("destructor")]),e._v(" "),t("code",[e._v("p")]),e._v("，它是从用于构造数据类型值的 "),t("code",[e._v("C")]),e._v(" 调用返回 "),t("code",[e._v("p")]),e._v(" 参数的成员； 它的使用要求 "),t("code",[e._v("C?")]),e._v(" 成立。 例如，对于标准的 "),t("code",[e._v("List")]),e._v(" 类型")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("datatype List〈T〉 = Nil | Cons(head: T, tail: List〈T〉)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("以下成立：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Cons(5, Nil).Cons? && Cons(5, Nil).head == 5\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("注意表达式")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Cons(5, Nil).tail.head\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("格式不正确，因为 "),t("code",[e._v("Cons(5, Nil).tail")]),e._v(" 不满足 "),t("code",[e._v("Cons?")]),e._v("。")]),e._v(" "),t("p",[e._v("析构函数的名称在数据类型的所有构造函数中必须是唯一的。 构造函数可以与封闭数据类型同名； 这对于通常称为"),t("em",[e._v("记录类型")]),e._v("的单构造函数数据类型特别有用。 例如，黑白像素的记录类型可能表示如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("datatype Pixel = Pixel(x: int, y: int, on: bool)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("要调用构造函数，通常只需要提及构造函数的名称，但如果这不明确，则始终可以通过数据类型的名称来限定构造函数的名称。 比如上面的"),t("code",[e._v("Cons(5, Nil)")]),e._v("可以写成")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("List.Cons(5, List.Nil)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("作为显式调用数据类型构造函数的替代方法，可以使用 "),t("em",[e._v("datatype update")]),e._v(" 表达式将数据类型值构造为一个参数从给定数据类型值的变化。 对于任何类型为数据类型的“d”，该数据类型包括构造函数“C”，该构造函数具有名为“f”的类型为“T”的参数（析构函数），以及任何类型为“T”的表达式“t”，")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("d[f := t]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("构造一个类似于 "),t("code",[e._v("d")]),e._v(" 但其 "),t("code",[e._v("f")]),e._v(" 参数是 "),t("code",[e._v("t")]),e._v(" 的值。 该操作要求 "),t("code",[e._v("d")]),e._v(" 满足 "),t("code",[e._v("C?")]),e._v("。 例如，以下等式成立：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Cons(4, Nil)[tail := Cons(3, Nil)] == Cons(4, Cons(3, Nil))\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_4-1-元组类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-元组类型"}},[e._v("#")]),e._v(" 4.1. 元组类型")]),e._v(" "),t("p",[e._v("Dafny 构建了对应于元组的记录类型，并为它们提供了一种方便的特殊语法，即括号。 例如，可能已声明为：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("datatype Pair〈T,U〉 = Pair(0: T, 1: U)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("Dafny 提供了类型 "),t("code",[e._v("(T, U)")]),e._v(" 和构造函数 "),t("code",[e._v("(t, u)")]),e._v("，好像数据类型的名称是“”，并且它的类型参数在圆括号中给出，并且好像构造函数名称是“” . 请注意，析构函数名称是“0”和“1”，它们是成员的合法标识符名称。 例如，显示元组析构函数的使用，这里有一个包含 2 元组的属性（即 "),t("em",[e._v("pairs")]),e._v("）：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(5, true).1 == true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("Dafny 声明 "),t("em",[e._v("n")]),e._v(" 元组，其中 "),t("em",[e._v("n")]),e._v(" 为 0 或 2 或更高。 没有 1 元组，因为围绕单个类型或单个值的括号没有语义意义。 0 元组类型 "),t("code",[e._v("()")]),e._v(" 通常被称为 "),t("em",[e._v("unit 类型")]),e._v("，它的单个值，也写作 "),t("code",[e._v("()")]),e._v("，被称为 "),t("em",[e._v("unit")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"_4-2-共同归纳类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-共同归纳类型"}},[e._v("#")]),e._v(" 4.2. 共同归纳类型")]),e._v(" "),t("p",[e._v("尽管 Dafny 坚持认为有一种方法可以从头开始构造每个归纳数据类型值，但 Dafny 还支持 "),t("em",[e._v("co-inductive datatypes")]),e._v("，其构造函数被延迟评估，因此允许无限结构。 使用关键字“codatatype”声明共归纳数据类型； 除此之外，它像归纳数据类型一样被声明和使用。")]),e._v(" "),t("p",[e._v("例如,")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("codatatype IList〈T〉 = Nil | Cons(head: T, tail: IList〈T〉)\ncodatatype Stream〈T〉 = More(head: T, tail: Stream〈T〉)\ncodatatype Tree〈T〉 = Node(left: Tree〈T〉, value: T, right: Tree〈T〉)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("分别声明可能无限的列表（即可以是有限或无限的列表）、无限流（即始终无限的列表）和无限二叉树（即每个分支永远存在的树）。")]),e._v(" "),t("h2",{attrs:{id:"_5-参照类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-参照类型"}},[e._v("#")]),e._v(" 5. 参照类型")]),e._v(" "),t("p",[e._v("Dafny 提供了许多"),t("em",[e._v("参考类型")]),e._v("。 这些代表对程序堆中动态分配的对象的"),t("em",[e._v("引用")]),e._v("。 要访问对象的成员，对对象的引用（即"),t("em",[e._v("指针")]),e._v(" 或"),t("em",[e._v("对象标识")]),e._v("）被"),t("em",[e._v("取消引用")]),e._v("。")]),e._v(" "),t("p",[e._v("特殊值 "),t("code",[e._v("null")]),e._v(" 是每个引用类型的一部分。"),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#fn-fn-nullable",target:"_blank",rel:"noopener noreferrer"}},[e._v("4"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"_5-0-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-类"}},[e._v("#")]),e._v(" 5.0. 类")]),e._v(" "),t("p",[t("em",[e._v("class")]),e._v(" "),t("code",[e._v("C")]),e._v(" 是一个引用类型，声明如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class C〈T〉 extends J\n{\n  members\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("其中类型参数列表"),t("code",[e._v("T")]),e._v("是可选的，“"),t("code",[e._v("extends J")]),e._v("”也是如此，它表示该类扩展了一个特征“J”。 类的成员是 "),t("em",[e._v("fields")]),e._v("、"),t("em",[e._v("functions")]),e._v(" 和 "),t("em",[e._v("methods")]),e._v("。 这些是通过取消引用对“C”实例的引用来访问或调用的。 除非函数或方法声明为 "),t("code",[e._v("static")]),e._v("，否则函数或方法会在 "),t("code",[e._v("C")]),e._v(" 的 "),t("em",[e._v("instance")]),e._v(" 上调用。 机械地，这只是意味着该方法采用隐式 "),t("em",[e._v("receiver")]),e._v(" 参数，即用于访问成员的实例。 在实例函数或方法的规范和主体中，接收器参数可以通过关键字 "),t("code",[e._v("this")]),e._v(" 显式引用。 但是，在这样的地方，"),t("code",[e._v("this")]),e._v("的成员也可以无条件地被提及。 为了说明，合格的 "),t("code",[e._v("this.f")]),e._v(" 和不合格的 "),t("code",[e._v("f")]),e._v(" 在以下示例中指的是同一对象的同一字段：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class C {\n  var f: int;\n  method Example() returns (b: bool)\n  {\n    b := f == this.f;\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("所以方法体总是将 "),t("code",[e._v("true")]),e._v(" 分配给输出参数 "),t("code",[e._v("b")]),e._v("。 对同一接收者和成员的合格和不合格访问之间没有语义差异。")]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("C")]),e._v(" 实例是使用 "),t("code",[e._v("new")]),e._v(" 创建的，例如：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("c := new C;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("请注意，"),t("code",[e._v("new")]),e._v(" 只是分配一个 "),t("code",[e._v("C")]),e._v(" 对象并返回对它的引用； 其字段的初始值是它们各自类型的任意值。 因此，通常在创建后立即调用称为 "),t("em",[e._v("initialization method")]),e._v(" 的方法，例如：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("c := new C;\nc.InitFromList(xs, 3);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("当初始化方法没有out-parameter并且修改不超过"),t("code",[e._v("this")]),e._v("时，那么上面的两个语句可以合并为一个：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("c := new C.InitFromList(xs, 3);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("请注意，一个类可以包含多个初始化方法，这些方法可以随时调用，而不仅仅是作为"),t("code",[e._v("new")]),e._v("的一部分，并且"),t("code",[e._v("new")]),e._v("不需要在创建时调用初始化方法。")]),e._v(" "),t("p",[e._v("要编写结构化的面向对象程序，通常依赖于仅以特定方式构造对象。 为此，Dafny 提供了 "),t("em",[e._v("constructor (method)s")]),e._v("，这是一种受限形式的初始化方法。 构造函数是用关键字"),t("code",[e._v("constructor")]),e._v("而不是"),t("code",[e._v("method")]),e._v("声明的。 当一个类包含构造函数时，对该类的每次调用 "),t("code",[e._v("new")]),e._v(" 都必须伴随对构造函数之一的调用。 此外，不能在其他时间调用构造函数，只能在对象创建期间调用。 除了这些限制之外，使用普通初始化方法和使用构造函数之间没有语义上的区别。")]),e._v(" "),t("p",[e._v("Dafny 设计允许命名构造函数，这促进了使用上面的“InitFromList”之类的名称。 尽管如此，许多类只有一个构造函数或有一个典型的构造函数。 因此，Dafny 允许一个"),t("em",[e._v("匿名构造函数")]),e._v("，即名称本质上是“”的构造函数。 例如：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Item {\n  constructor (x: int, y: int)\n  // ...\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("调用此构造函数时，会删除“"),t("code",[e._v(".")]),e._v("”，如下所示：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("m := new Item(45, 29);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("请注意，匿名构造函数只是命名构造函数的一种方式； 也可以有其他构造函数。")]),e._v(" "),t("h3",{attrs:{id:"_5-1-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-数组"}},[e._v("#")]),e._v(" 5.1. 数组")]),e._v(" "),t("p",[e._v("Dafny 支持任何正维度的可变固定长度"),t("em",[e._v("数组类型")]),e._v("。 数组类型是引用类型。")]),e._v(" "),t("h4",{attrs:{id:"_5-1-0-一维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-0-一维数组"}},[e._v("#")]),e._v(" 5.1.0. 一维数组")]),e._v(" "),t("p",[t("code",[e._v("n")]),e._v(" "),t("code",[e._v("T")]),e._v(" 元素的一维数组创建如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a := new T[n];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("数组元素的初始值是“T”类型的任意值。 使用不可变的 "),t("code",[e._v("Length")]),e._v(" 成员检索数组的长度。 例如上面分配的数组满足：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a.Length == n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("对于 "),t("code",[e._v("0 <= i < a.Length")]),e._v(" 范围内的任何基于整数的数字 "),t("code",[e._v("i")]),e._v("，"),t("em",[e._v("array selection")]),e._v(" 表达式 "),t("code",[e._v("a[i]")]),e._v(" 检索元素 "),t("code",[e._v("i")]),e._v("（即，前面有 "),t("code",[e._v("i")]),e._v(" 数组中的元素）。 可以使用数组更新语句将存储在 "),t("code",[e._v("i")]),e._v(" 的元素更改为值 "),t("code",[e._v("t")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a[i] := t;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("警告：由"),t("code",[e._v("new T[n]")]),e._v("创建的数组类型是"),t("code",[e._v("array〈T〉")]),e._v("。 一个容易犯的错误是在 "),t("code",[e._v("new")]),e._v(" 后面写 "),t("code",[e._v("array<T>")]),e._v(" 而不是 "),t("code",[e._v("T")]),e._v("。 例如，考虑以下情况：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a := new array〈T〉;\nvar b := new array〈T〉[n];\nvar c := new array〈T〉(n);  // resolution error\nvar d := new array(n);  // resolution error\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("第一条语句分配了一个类型为 "),t("code",[e._v("array〈T〉 的数组，但长度未知。 第二个分配一个长度为“n”的“array〈array〈T〉〉”类型的数组，即一个包含“n”类型的“array〈T〉”值的数组。 第三条语句分配一个类型为")]),e._v("array〈T〉"),t("code",[e._v("的数组，然后尝试调用这个数组的匿名构造函数，传递参数")]),e._v("n"),t("code",[e._v("。 由于")]),e._v("array"),t("code",[e._v("没有构造函数，更不用说匿名构造函数了，这个语句会产生错误。 如果对于需要类型参数的类型省略了类型参数列表，Dafny 将尝试填写这些，因此只要可以推断出")]),e._v("array"),t("code",[e._v("类型参数，就可以省略“")]),e._v("〈T〉 "),t("code",[e._v("” 在上面的第四个语句中。 但是，与第三条语句一样，")]),e._v("array` 没有匿名构造函数，因此会生成错误消息。")]),e._v(" "),t("p",[e._v("一维数组支持将一系列连续元素转换为序列的操作。 对于任何类型为"),t("code",[e._v("array〈T〉")]),e._v("的数组"),t("code",[e._v("a")]),e._v("，基于整数的数字"),t("code",[e._v("lo")]),e._v("和"),t("code",[e._v("hi")]),e._v("满足"),t("code",[e._v("0 <= lo <= hi <= a.Length")]),e._v("，以下操作各自产生一个"),t("code",[e._v("seq 〈T〉")]),e._v("：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("表达式")]),e._v(" "),t("td",[e._v("描述")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[t("code",[e._v("a[lo..hi]")])]),e._v(" "),t("td",[e._v("子数组转为序列")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("a[lo..]")])]),e._v(" "),t("td",[e._v("drop")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("a[..hi]")])]),e._v(" "),t("td",[e._v("take")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("a[..]")])]),e._v(" "),t("td",[e._v("数组转换为序列")])]),e._v(" "),t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("表达式 "),t("code",[e._v("a[lo..hi]")]),e._v(" 获取数组的第一个 "),t("code",[e._v("hi")]),e._v(" 元素，然后删除其中的第一个 "),t("code",[e._v("lo")]),e._v(" 元素并返回剩余的序列。 因此，结果序列的长度为“hi - lo”。 其他操作是第一个操作的特殊实例。 如果省略 "),t("code",[e._v("lo")]),e._v("，则默认为 "),t("code",[e._v("0")]),e._v("，如果省略 "),t("code",[e._v("hi")]),e._v("，则默认为 "),t("code",[e._v("a.Length")]),e._v("。 在最后一个操作中，"),t("code",[e._v("lo")]),e._v(" 和 "),t("code",[e._v("hi")]),e._v(" 都被省略了，因此 "),t("code",[e._v("a[..]")]),e._v(" 返回由 "),t("code",[e._v("a")]),e._v(" 的所有数组元素组成的序列。")]),e._v(" "),t("p",[e._v("子数组操作在规范中特别有用。 例如，使用变量“lo”和“hi”来划分仍然可以找到搜索“key”的子数组的二分搜索算法的循环不变量可以表示如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("key !in a[..lo] && key !in a[hi..]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("另一个用途是说某个范围的数组元素自方法开始以来没有改变：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a[lo..hi] == old(a[lo..hi])\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("或从循环开始：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ghost var prevElements := a[..];\nwhile // ...\n  invariant a[lo..hi] == prevElements[lo..hi];\n{\n  // ...\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("注意这个例子中的"),t("code",[e._v("prevElements")]),e._v("的类型是"),t("code",[e._v("seq<T>")]),e._v("，如果"),t("code",[e._v("a")]),e._v("的类型是"),t("code",[e._v("array<T>")]),e._v("。")]),e._v(" "),t("p",[e._v("子数组操作的最后一个示例在于表示数组的元素是方法开头的数组元素的排列，就像在大多数排序算法中所做的那样。 在这里，子数组操作与序列到多集的转换相结合：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("multiset(a[..]) == multiset(old(a[..]))\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h4",{attrs:{id:"_5-1-1-多维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-多维数组"}},[e._v("#")]),e._v(" 5.1.1. 多维数组")]),e._v(" "),t("p",[e._v("2 维或更多维的数组大多类似于一维数组，不同之处在于 "),t("code",[e._v("new")]),e._v(" 需要更多长度参数（每个维度一个），并且数组选择表达式和数组更新语句需要更多索引。 例如：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("matrix := new T[m, n];\nmatrix[i, j], matrix[x, y] := matrix[x, y], matrix[i, j];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("创建一个二维数组，其维度的长度分别为“m”和“n”，然后交换“i,j”和“x,y”处的元素。 "),t("code",[e._v("matrix")]),e._v(" 的类型是 "),t("code",[e._v("array2<T>")]),e._v("，对于高维数组（"),t("code",[e._v("array3<T>")]),e._v("、"),t("code",[e._v("array4<T>")]),e._v(" 等）也是如此。 但是请注意，没有类型 "),t("code",[e._v("array0<T>")]),e._v("，本来可以是 "),t("code",[e._v("array1<T>")]),e._v(" 的东西实际上只是命名为 "),t("code",[e._v("array<T>")]),e._v("。")]),e._v(" "),t("p",[e._v("上面的 "),t("code",[e._v("new")]),e._v(" 操作要求 "),t("code",[e._v("m")]),e._v(" 和 "),t("code",[e._v("n")]),e._v(" 是基于非负整数的数字。 可以使用不可变字段 "),t("code",[e._v("Length0")]),e._v(" 和 "),t("code",[e._v("Length1")]),e._v(" 检索这些长度。 例如，以下保存了上面创建的数组：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("matrix.Length0 == m && matrix.Length1 == n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("高维数组类似（"),t("code",[e._v("Length0")]),e._v("、"),t("code",[e._v("Length1")]),e._v("、"),t("code",[e._v("Length2")]),e._v("、...）。 数组选择表达式和数组更新语句要求索引在范围内。 例如，上面的交换语句只有在以下情况下才是格式正确的：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("0 <= i < matrix.Length0 && 0 <= j < matrix.Length1 &&\n0 <= x < matrix.Length0 && 0 <= y < matrix.Length1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("与一维数组相比，没有将元素的延伸从多维数组转换为序列的操作。")]),e._v(" "),t("h3",{attrs:{id:"_5-2-特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-特征"}},[e._v("#")]),e._v(" 5.2. 特征")]),e._v(" "),t("p",[t("em",[e._v("trait")]),e._v(" 是一个“抽象超类”，或者称它为“接口”或“mixin”。 特征对 Dafny 来说是新的，并且可能会发展一段时间。\n一个 trait 的声明很像一个类的声明：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("trait J\n{\n  members\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("其中 "),t("code",[e._v("*members*")]),e._v(" 可以包含字段、函数和方法，但不能包含构造函数方法。 允许将函数和方法声明为“静态”。")]),e._v(" "),t("p",[e._v("扩展特征“J”的引用类型“C”可以分配给“J”，但不能反过来。 "),t("code",[e._v("J")]),e._v(" 的成员可以作为"),t("code",[e._v("C")]),e._v(" 的成员使用。 "),t("code",[e._v("J")]),e._v(" 中的成员不允许在"),t("code",[e._v("C")]),e._v(" 中重新声明，除非该成员是在"),t("code",[e._v("J")]),e._v(" 中没有主体的非"),t("code",[e._v("static")]),e._v(" 函数或方法。 通过这样做，类型“C”可以为成员提供更强大的规范和主体。")]),e._v(" "),t("p",[t("code",[e._v("new")]),e._v(" 不允许与特征一起使用。 因此，没有分配类型是特征的对象。 但是当然可以有一个类 C 的对象实现了一个特征 J ，并且对这样一个 C 对象的引用可以用作类型 J 的值。")]),e._v(" "),t("p",[e._v("例如，以下特征表示可移动的几何形状：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("trait Shape\n{\n  function method Width(): real\n    reads this\n  method Move(dx: real, dy: real)\n    modifies this\n  method MoveH(dx: real)\n    modifies this\n  {\n    Move(dx, 0.0);\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("p",[e._v("成员 "),t("code",[e._v("Width")]),e._v(" 和 "),t("code",[e._v("Move")]),e._v(" 是 "),t("em",[e._v("abstract")]),e._v(" （即无主体），并且可以由扩展 trait 的不同类以不同方式实现。 方法 "),t("code",[e._v("MoveH")]),e._v(" 的实现在 trait 中给出，因此被所有扩展 "),t("code",[e._v("Shape")]),e._v(" 的类使用。 这里有两个类，每个类都扩展了“Shape”：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class UnitSquare extends Shape\n{\n  var x: real, y: real;\n  function method Width(): real {  // note the empty reads clause\n    1.0\n  }\n  method Move(dx: real, dy: real)\n    modifies this\n  {\n    x, y := x + dx, y + dy;\n  }\n}\nclass LowerRightTriangle extends Shape\n{\n  var xNW: real, yNW: real, xSE: real, ySE: real;\n  function method Width(): real\n    reads this\n  {\n    xSE - xNW\n  }\n  method Move(dx: real, dy: real)\n    modifies this\n  {\n    xNW, yNW, xSE, ySE := xNW + dx, yNW + dy, xSE + dx, ySE + dy;\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br")])]),t("p",[e._v("请注意，类可以声明其他成员，它们为特征的抽象成员提供实现，它们重复成员签名，并且它们负责提供自己的成员规范，这些规范既加强了特征中的相应规范，又是 对提供的机构感到满意。 最后，这是一些创建两个类实例并将它们一起用作形状的代码:")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var myShapes: seq〈Shape〉;\nvar A := new UnitSquare;\nmyShapes := [A];\nvar tri := new LowerRightTriangle;\nmyShapes := myShapes + [tri];  // myShapes contains two Shape values, of different classes\nmyShapes[1].MoveH(myShapes[0].Width());  // move shape 1 to the right by the width of shape 0\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h3",{attrs:{id:"_5-3-类型-object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-类型-object"}},[e._v("#")]),e._v(" 5.3. 类型 "),t("code",[e._v("object")])]),e._v(" "),t("p",[e._v("有一个内置的引用类型"),t("code",[e._v("object")]),e._v("，它就像所有引用类型的超类型。"),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#fn-fn-object-trait",target:"_blank",rel:"noopener noreferrer"}},[e._v("5"),t("OutboundLink")],1),e._v(" type "),t("code",[e._v("object")]),e._v(" 是为了启用对"),t("em",[e._v("动态帧")]),e._v("的统一处理。 特别是，保留类型为 "),t("code",[e._v("set〈object〉 的幽灵字段（通常命名为")]),e._v("Repr` 表示“表示”）很有用。")]),e._v(" "),t("h3",{attrs:{id:"_5-4-迭代器类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-迭代器类型"}},[e._v("#")]),e._v(" 5.4. 迭代器类型")]),e._v(" "),t("p",[t("em",[e._v("iterator")]),e._v(" 为编写迭代返回元素的代码提供了编程抽象。 这些 CLU 风格的迭代器是"),t("em",[e._v("协同例程")]),e._v("，因为它们跟踪自己的程序计数器，并且控制可以传入和传出迭代器主体。")]),e._v(" "),t("p",[e._v("迭代器声明如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("iterator Iter〈T〉(in-params) yields (yield-params)\n  specification\n{\n  body\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("其中 "),t("code",[e._v("T")]),e._v(" 是类型参数的列表（通常，如果没有类型参数，则省略“"),t("code",[e._v("〈T〉")]),e._v("”）。 这个声明产生了一个同名的引用类型，"),t("code",[e._v("Iter〈T〉")]),e._v("。 在签名中，in-parameters 和 yield-parameters 是迭代器对方法的 in-parameters 和 out-parameters 的模拟。 不同之处在于，方法的输出参数只返回给调用者一次，而迭代器的 yield 参数在迭代器主体执行 "),t("code",[e._v("yield")]),e._v(" 时返回。 规范的详细信息在 Dafny 语言参考的不同部分中进行了描述。 主体由语句组成，就像在方法主体中一样，但也可以使用 "),t("code",[e._v("yield")]),e._v(" 语句。")]),e._v(" "),t("p",[e._v("从迭代器客户端的角度来看，"),t("code",[e._v("iterator")]),e._v(" 声明可以理解为生成具有各种成员的类"),t("code",[e._v("Iter〈T〉")]),e._v("，下面将描述其简化版本。")]),e._v(" "),t("p",[e._v("`Iter〈T〉 类包含一个匿名构造函数，其参数是迭代器的内参数：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("predicate Valid()\nconstructor (in-params)\n  modifies this\n  ensures Valid()\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("使用 "),t("code",[e._v("new")]),e._v(" 和这个匿名构造函数创建了一个迭代器。 例如，一个愿意从 "),t("code",[e._v("start")]),e._v(" 返回十个连续整数的迭代器可以声明如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("iterator Gen(start: int) yields (x: int)\n{\n  var i := 0;\n  while i < 10 {\n    x := start + i;\n    yield;\n    i := i + 1;\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("p",[e._v("这个迭代器的一个实例是使用以下方法创建的：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("iter := new Gen(30);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("谓词“Valid()”表示迭代器何时处于可以尝试计算更多元素的状态。 它是构造函数的后置条件，出现在“MoveNext”成员的规范中：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("method MoveNext() returns (more: bool)\n  requires Valid()\n  modifies this\n  ensures more ==> Valid()\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("请注意，只要 "),t("code",[e._v("MoveNext")]),e._v(" 返回 "),t("code",[e._v("true")]),e._v("，迭代器仍然有效。 一旦 "),t("code",[e._v("MoveNext")]),e._v(" 返回 "),t("code",[e._v("false")]),e._v("，就不能再调用 "),t("code",[e._v("MoveNext")]),e._v(" 方法。 请注意，客户端没有义务继续调用 "),t("code",[e._v("MoveNext")]),e._v(" 直到它返回 "),t("code",[e._v("false")]),e._v("，并且允许迭代器的主体永远保持返回元素。")]),e._v(" "),t("p",[e._v("迭代器的输入参数存储在迭代器类的不可变字段中。 为了根据上面的示例进行说明，迭代器类“Gen”包含以下字段：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var start: int;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("产量参数也导致迭代器的成员\nclass:")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var x: int;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("这些字段由“MoveNext”方法设置。 如果 "),t("code",[e._v("MoveNext")]),e._v(" 返回 "),t("code",[e._v("true")]),e._v("，则这些字段中提供了最新的收益率值，客户端可以从那里读取它们。")]),e._v(" "),t("p",[e._v("为了帮助编写规范，迭代器类还包含保留“MoveNext”返回值的历史记录的幽灵成员。 这些幽灵字段的名称跟在 yield 参数的名称之后，并在名称后面附加了一个“"),t("code",[e._v("s")]),e._v("”（表示复数）。 名称检查规则确保这些名称不会引起歧义。 因此，上述“Gen”的迭代器类包含：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ghost var xs: seq〈int〉;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("这些历史字段由“MoveNext”自动更改，但不能由用户代码分配。")]),e._v(" "),t("p",[e._v("最后，迭代器类包含一些用于规范的特殊字段。 特别是，迭代器规范记录在以下不可变字段中：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ghost var _reads: set〈object〉;\nghost var _modifies: set〈object〉;\nghost var _decreases0: T0;\nghost var _decreases1: T1;\n// ...\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("其中，迭代器的 "),t("code",[e._v("decreases")]),e._v(" 子句的每个组件都有一个 "),t("code",[e._v("_decreases*i*: T*i*")]),e._v(" 字段。 [6](http://leino.science/papers/krml243.html#fn-fn-iterator -field-names) 另外还有一个字段：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ghost var _new: set〈object〉;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("代表迭代器主体分配的任何对象都将添加到其中。 迭代器主体可以从 "),t("code",[e._v("_new")]),e._v(" 集中删除元素，但不能通过赋值给 "),t("code",[e._v("_new")]),e._v(" 添加任何元素。")]),e._v(" "),t("p",[e._v("请注意，在迭代器的前提条件中，即坚持构造迭代器，内参数确实是内参数，而不是 "),t("code",[e._v("this")]),e._v(" 的字段。")]),e._v(" "),t("h3",{attrs:{id:"_5-5-异步任务类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-异步任务类型"}},[e._v("#")]),e._v(" 5.5. 异步任务类型")]),e._v(" "),t("p",[e._v("Dafny 中另一个可能会经历一些演变的实验性功能是"),t("em",[e._v("异步方法")]),e._v("。 调用异步方法时，它不会返回 out-parameters 的值，而是返回 *async-task 类型 * 的实例。 在"),t("code",[e._v("C")]),e._v("类中声明的异步方法，具有以下签名：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("async method AM〈T〉(in-params) returns (out-params)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("也产生了一个异步任务类型"),t("code",[e._v("AM〈T〉")]),e._v("（在封闭类之外，类型的名称需要限定"),t("code",[e._v("C.AM〈T〉")]),e._v("）。 async-task 类型是一个引用类型，可以理解为一个有各种成员的类，下面介绍它的简化版本。\n异步方法的每个类型为"),t("code",[e._v("X")]),e._v("的参数"),t("code",[e._v("x")]),e._v("都会产生一个异步任务类型的不可变幽灵字段：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ghost var x: X;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("每个"),t("code",[e._v("Y")]),e._v("类型的输出参数"),t("code",[e._v("y")]),e._v("都会产生一个字段")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var y: Y;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("这些字段会在异步方法成功等待时自动更改，但不能由用户代码分配。")]),e._v(" "),t("p",[e._v("async-task 类型还有一些特殊字段，用于跟踪依赖关系、未完成的任务、新分配的对象等。随着异步方法设计的发展，这些字段将被更详细地描述。")]),e._v(" "),t("h2",{attrs:{id:"_6-函数类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-函数类型"}},[e._v("#")]),e._v(" 6. 函数类型")]),e._v(" "),t("p",[e._v("函数是 Dafny 中的一等值。 函数类型具有 "),t("code",[e._v("(T) -> U")]),e._v(" 的形式，其中 "),t("code",[e._v("T")]),e._v(" 是一个以逗号分隔的类型列表，而 "),t("code",[e._v("U")]),e._v(" 是一个类型。 "),t("code",[e._v("T")]),e._v(" 被称为函数的 "),t("em",[e._v("domain type(s)")]),e._v(" 并且 "),t("code",[e._v("U")]),e._v(" 是它的 "),t("em",[e._v("range type")]),e._v("。 例如，函数的类型")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function F(x: int, b: bool): real\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("是"),t("code",[e._v("(int, bool) -> real")]),e._v("。 参数不允许为ghost。")]),e._v(" "),t("p",[e._v("为了简化函数域由一个类型列表组成的基本情况的外观，在这种情况下可以删除域类型周围的括号，如 "),t("code",[e._v("T -> U")]),e._v("。 在一种类型是元组类型的情况下，这种无害的简化需要额外的解释，因为元组类型也是用括号括起来的。 如果函数接受一个元组参数，则需要额外的一组括号。 例如，函数")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function G(pair: (int, bool)): real\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("类型为 "),t("code",[e._v("((int, bool)) -> real")]),e._v("。 注意必要的双括号。 类似地，不带参数的函数与带 0 元组作为参数的函数不同。 例如，函数")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function NoArgs(): real\nfunction Z(unit: ()): real\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("分别有 "),t("code",[e._v("() -> real")]),e._v(" 和 "),t("code",[e._v("(()) -> real")]),e._v(" 类型。")]),e._v(" "),t("p",[e._v("函数箭头 "),t("code",[e._v("->")]),e._v(" 是右结合的，所以 "),t("code",[e._v("A -> B -> C")]),e._v(" 表示 "),t("code",[e._v("A -> (B -> C)")]),e._v("。 另一个关联需要显式括号："),t("code",[e._v("(A -> B) -> C")]),e._v("。")]),e._v(" "),t("p",[e._v("请注意，命名函数的接收器参数不是类型的一部分。 相反，它在查找函数时使用，然后可以被认为是被捕获到函数定义中。 例如，假设上面的函数“F”在类“C”中声明，而“c”引用了一个“C”类型的对象； 那么，以下是正确的类型：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var f: (int, bool) -> real := c.F;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("而写如下内容是不正确的：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var f': (C, int, bool) -> real := F;  // not correct\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("在其类型签名之外，每个函数值都具有三个属性，如下所述。")]),e._v(" "),t("p",[e._v("每个函数都隐含地将堆作为参数。 然而，没有任何函数依赖于"),t("em",[e._v("整个")]),e._v("堆。 函数的一个属性是它在给定输入所依赖的堆位置集上声明的上限。 这让验证者可以确定某些堆修改对某个函数返回的值没有影响。 对于函数"),t("code",[e._v("f: T -> U")]),e._v("和"),t("code",[e._v("T")]),e._v("类型的值"),t("code",[e._v("t")]),e._v("，依赖集表示为"),t("code",[e._v("f.reads(t)")]),e._v("并且具有"),t("code",[e._v("set〈object〉")]),e._v("类型。")]),e._v(" "),t("p",[e._v("函数的第二个属性源于每个函数都可能是"),t("em",[e._v("部分的")]),e._v("。 换句话说，函数的属性是它的"),t("em",[e._v("前提条件")]),e._v("。 对于函数"),t("code",[e._v("f: T -> U")]),e._v("，"),t("code",[e._v("T")]),e._v("类型的参数值"),t("code",[e._v("t")]),e._v("的"),t("code",[e._v("f")]),e._v("的前提条件表示为"),t("code",[e._v("f.requires(t)")]),e._v("并且具有"),t("code",[e._v("bool")]),e._v("类型。")]),e._v(" "),t("p",[e._v("函数的第三个属性更为明显——函数体。 对于函数“f: T -> U”，该函数对“T”类型的输入“t”产生的值表示为“f(t)”，并且具有“U”类型。")]),e._v(" "),t("p",[e._v("请注意，"),t("code",[e._v("f.reads")]),e._v(" 和 "),t("code",[e._v("f.requires")]),e._v(" 本身就是函数。 假设 "),t("code",[e._v("f")]),e._v(" 的类型为 "),t("code",[e._v("T -> U")]),e._v("，而 "),t("code",[e._v("t")]),e._v(" 的类型为 "),t("code",[e._v("T")]),e._v("。 那么，"),t("code",[e._v("f.reads")]),e._v(" 是 "),t("code",[e._v("T -> set〈object〉")]),e._v(" 类型的函数，其 "),t("code",[e._v("reads")]),e._v(" 和 "),t("code",[e._v("requires")]),e._v(" 属性是：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("f.reads.reads(t) == f.reads(t)\nf.reads.requires(t) == true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("code",[e._v("f.requires")]),e._v(" 是 "),t("code",[e._v("T -> bool")]),e._v(" 类型的函数，其 "),t("code",[e._v("reads")]),e._v(" 和 "),t("code",[e._v("requires")]),e._v(" 属性为：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("f.requires.reads(t) == f.reads(t)\nf.requires.requires(t) == true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("h3",{attrs:{id:"_6-0-lambda表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-lambda表达式"}},[e._v("#")]),e._v(" 6.0. Lambda表达式")]),e._v(" "),t("p",[e._v("除了命名函数之外，Dafny 还支持定义函数的表达式。 这些被称为 "),t("em",[e._v("lambda (expression)s")]),e._v("（一些语言将它们称为 "),t("em",[e._v("匿名函数")]),e._v("）。 lambda 表达式具有以下形式：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(params) specification => body\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("其中 "),t("code",[e._v("*params*")]),e._v(" 是以逗号分隔的参数声明列表，每个参数声明的形式为 "),t("code",[e._v("x")]),e._v(" 或 "),t("code",[e._v("x: T")]),e._v("。 参数的类型‘T’在可以推断时可以省略。 如果不需要标识符"),t("code",[e._v("x")]),e._v("，可以用“"),t("code",[e._v("_")]),e._v("”代替。 如果 "),t("code",[e._v("*params*")]),e._v(" 包含一个没有明确类型的参数 "),t("code",[e._v("x")]),e._v("（或 "),t("code",[e._v("_")]),e._v("），则可以删除括号； 例如，返回给定整数的后继的函数可以写成以下 lambda 表达式：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("x => x + 1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("code",[e._v("*specification*")]),e._v(" 是 "),t("code",[e._v("requires E")]),e._v(" 或 "),t("code",[e._v("reads W")]),e._v(" 的子句列表，其中 "),t("code",[e._v("E")]),e._v(" 是布尔表达式， "),t("code",[e._v("W")]),e._v(" 是框架表达式。")]),e._v(" "),t("p",[t("code",[e._v("*body*")]),e._v(" 是定义函数返回值的表达式。 对于满足前提条件的参数的所有可能值，主体必须格式正确（就像命名函数和方法的主体一样）。 在某些情况下，这意味着有必要编写明确的 "),t("code",[e._v("requires")]),e._v(" 和 "),t("code",[e._v("reads")]),e._v(" 子句。 例如，lambda 表达式")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("x requires x != 0 => 100 / x\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("如果省略 "),t("code",[e._v("requires")]),e._v(" 子句，则格式不正确，因为可能会被零除。")]),e._v(" "),t("p",[e._v("在函数不能是部分的并且对读取堆没有限制的设置中，函数 "),t("code",[e._v("F: T -> U")]),e._v(" 的 "),t("em",[e._v("eta 扩展")]),e._v("（即，将 "),t("code",[e._v("F")]),e._v(" 包装在这样的 lambda 表达式中） lambda 表达式等价于 "),t("code",[e._v("F")]),e._v(") 的方式将写作 "),t("code",[e._v("x => F(x)")]),e._v("。 在 Dafny 中，eta 扩展还必须考虑函数的前提条件和读取集，因此 "),t("code",[e._v("F")]),e._v(" 的 eta 扩展如下所示：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("x requires F.requires(x) reads F.reads(x) => F(x)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"_7-新类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-新类型"}},[e._v("#")]),e._v(" 7. 新类型")]),e._v(" "),t("p",[e._v("可以使用 "),t("em",[e._v("newtype")]),e._v(" 声明"),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#fn-fn-newtype-name",target:"_blank",rel:"noopener noreferrer"}},[e._v("7"),t("OutboundLink")],1),e._v(" 声明新的数字类型")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("newtype N = x: M | Q\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("其中“M”是数字类型，“Q”是布尔表达式，可以将“x”用作自由变量。 如果"),t("code",[e._v("M")]),e._v("是一个基于整数的数值类型，那么"),t("code",[e._v("N")]),e._v("也是； 如果“M”是实数，那么“N”也是如此。 如果可以从 "),t("code",[e._v("Q")]),e._v(" 推断出类型 "),t("code",[e._v("M")]),e._v("，则可以省略“"),t("code",[e._v(":M")]),e._v("”。 如果 "),t("code",[e._v("Q")]),e._v(" 只是 "),t("code",[e._v("true")]),e._v("，那么声明可以简单地给出：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("newtype N = M\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("类型“M”被称为“N”的"),t("em",[e._v("基本类型")]),e._v("。")]),e._v(" "),t("p",[e._v("newtype 是一种数字类型，它支持与其基本类型相同的操作。 newtype 与其他数字类型不同且不兼容； 特别是，如果没有显式转换，它就不能分配给它的基本类型。 对 newtype 的操作与其基类型的操作之间的一个重要区别是 newtype 操作仅在结果满足谓词 "),t("code",[e._v("Q")]),e._v(" 时才被定义，对于 newtype 的字面量也是如此。 [8](http:// /leino.science/papers/krml243.html#fn-fn-newtype-design-question）")]),e._v(" "),t("p",[e._v("例如，假设 "),t("code",[e._v("lo")]),e._v(" 和 "),t("code",[e._v("hi")]),e._v(" 是基于整数的数字，它们满足 "),t("code",[e._v("0 <= lo <= hi")]),e._v(" 并考虑以下代码片段：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var mid := (lo + hi) / 2;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("如果 "),t("code",[e._v("lo")]),e._v(" 和 "),t("code",[e._v("hi")]),e._v(" 的类型为 "),t("code",[e._v("int")]),e._v("，那么代码片段是合法的； 特别是，它永远不会溢出，因为 "),t("code",[e._v("int")]),e._v(" 没有上限。 相反，如果 "),t("code",[e._v("lo")]),e._v(" 和 "),t("code",[e._v("hi")]),e._v(" 是新类型 "),t("code",[e._v("int32")]),e._v(" 的变量，声明如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("newtype int32 = x | -0x80000000 <= x < 0x80000000\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("那么代码片段是错误的，因为加法的结果可能无法满足"),t("code",[e._v("int32")]),e._v("定义中的谓词。 代码片段可以重写为")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var mid := lo + (hi - lo) / 2;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("在这种情况下，"),t("code",[e._v("int")]),e._v(" 和 "),t("code",[e._v("int32")]),e._v(" 都是合法的。")]),e._v(" "),t("p",[e._v("由于 newtype 与其基类型不兼容，并且由于 newtype 操作的所有结果都是 newtype 的成员，因此 Dafny 的编译器可以自由地专门化 newtype 的运行时表示。 例如，通过仔细检查上面 "),t("code",[e._v("int32")]),e._v(" 的定义，编译器可能会决定在目标硬件中使用带符号的 32 位整数来存储 "),t("code",[e._v("int32")]),e._v(" 值。")]),e._v(" "),t("p",[e._v("请注意，"),t("code",[e._v("Q")]),e._v(" 中的绑定变量"),t("code",[e._v("x")]),e._v(" 的类型为"),t("code",[e._v("M")]),e._v("，而不是"),t("code",[e._v("N")]),e._v("。 n因此，可能无法就“N”值说明“Q”。 例如，考虑以下类型的 8 位 2 的补码整数：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("newtype int8 = x: int | -128 <= x < 128\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("并考虑一个类型为"),t("code",[e._v("int8")]),e._v("的变量"),t("code",[e._v("c")]),e._v("。 表达式")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("-128 <= c < 128\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("定义不明确，因为比较要求每个操作数的类型为“int8”，这意味着文字“128”被检查为“int8”类型，但事实并非如此。 编写此表达式的正确方法是在 "),t("code",[e._v("c")]),e._v(" 上使用转换操作，如下所述，将其转换为基本类型：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("-128 <= int(c) < 128\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("有一个限制，即值"),t("code",[e._v("0")]),e._v("必须是每个新类型的一部分。"),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#fn-fn-newtype-zero",target:"_blank",rel:"noopener noreferrer"}},[e._v("9"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"_7-0-数字转换操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-0-数字转换操作"}},[e._v("#")]),e._v(" 7.0. 数字转换操作")]),e._v(" "),t("p",[e._v("对于每个数字类型"),t("code",[e._v("N")]),e._v("，都有一个同名的转换函数。 它是一个部分恒等函数。 它是在给定值（可以是任何数字类型）是转换为的类型的成员时定义的。 当从基于实数的数值类型转换为基于整数的数值类型时，该操作要求基于实数的参数没有小数部分。 （要将基于实数的数值向下舍入到最接近的整数，请使用 "),t("code",[e._v(".Trunc")]),e._v(" 成员，请参阅第 [0.1] 节（http://leino.science/papers/krml243.html#sec-numeric-types）。 )")]),e._v(" "),t("p",[e._v("使用上面的例子来说明，如果 "),t("code",[e._v("lo")]),e._v(" 和 "),t("code",[e._v("hi")]),e._v(" 的类型是 "),t("code",[e._v("int32")]),e._v("，那么代码片段可以合法地写成如下")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var mid := (int(lo) + int(hi)) / 2;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("其中"),t("code",[e._v("mid")]),e._v("的类型被推断为"),t("code",[e._v("int")]),e._v("。 由于除法的结果值是 "),t("code",[e._v("int32")]),e._v(" 类型的成员，因此可以引入另一种转换操作，使 "),t("code",[e._v("mid")]),e._v(" 的类型为 "),t("code",[e._v("int32")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var mid := int32((int(lo) + int(hi)) / 2);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("如果编译器确实专门针对"),t("code",[e._v("int32")]),e._v("的运行时表示，那么这些语句的代价是两个或三个运行时转换。")]),e._v(" "),t("h2",{attrs:{id:"_8-子集类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-子集类型"}},[e._v("#")]),e._v(" 8. 子集类型")]),e._v(" "),t("p",[t("em",[e._v("子集类型")]),e._v("是对现有类型的限制使用，称为子集类型的"),t("em",[e._v("基本类型")]),e._v("。 子集类型就像基类型和基类型上的谓词的组合使用。")]),e._v(" "),t("p",[e._v("始终允许从子集类型到其基本类型的赋值。 如果分配的值确实满足子集类型的谓词，则允许从基本类型到子集类型的另一个方向的分配。 （注意，相比之下，newtype 和它的基类型之间的赋值是不允许的，即使赋值是目标类型的值。对于这样的赋值，必须使用显式转换，参见第 [7.0]（http: //leino.science/papers/krml243.html#sec-numeric-conversions)。) Dafny 支持一种子集类型，即内置类型 "),t("code",[e._v("nat")]),e._v("，其基本类型为 "),t("code",[e._v("int")]),e._v("。[10](http: //leino.science/papers/krml243.html#fn-fn-more-subset-types）")]),e._v(" "),t("p",[e._v("类型"),t("code",[e._v("nat")]),e._v("指定"),t("code",[e._v("int")]),e._v("的非负子范围。 一个很好地使用子集类型“nat”的简单示例是标准斐波那契函数：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Fib(n: nat): nat\n{\n  if n < 2 then n else Fib(n-2) + Fib(n-1)\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("此函数的等效但笨拙的公式（以调用站点产生的任何错误消息的措辞为模）将使用类型"),t("code",[e._v("int")]),e._v("并在前置条件和后置条件中编写限制谓词：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Fib(n: int): int\n  requires 0 <= n  // the function argument must be non-negative\n  ensures 0 <= Fib(n)  // the function result is non-negative\n{\n  if n < 2 then n else Fib(n-2) + Fib(n-1)\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("类型推断永远不会将变量的类型推断为子集类型。 相反，它会将类型推断为子集类型的基本类型。 例如，"),t("code",[e._v("x")]),e._v(" 的类型")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("forall x :: P(x)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("将是 "),t("code",[e._v("int")]),e._v("，即使谓词 "),t("code",[e._v("P")]),e._v(" 声明其参数的类型为 "),t("code",[e._v("nat")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("p",[e._v("由于 Nadia Polikarpova 和 Paqui Lucio 的评论，本文档得到了改进。")]),e._v(" "),t("hr"),e._v(" "),t("ol",{attrs:{start:"0"}},[t("li",[e._v("支持平等只是人们可以想象的丰富类型系统中的类型拥有的众多"),t("em",[e._v("模式")]),e._v("之一。 例如，其他模式可能包括具有总订单、可零初始化以及可能无人居住。 如果 Dafny 将来支持更多模式，“"),t("code",[e._v("( )")]),e._v("”后缀语法可能会被扩展。 目前，后缀只能表示支持平等的模式。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-type-mode",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("现在Dafny支持内置元组，打算把序列切片操作改成返回 不是子序列的序列，而是子序列的元组。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-slice-into-tuple",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("这可能会在未来发生变化，不允许多次出现相同的键。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-map-display",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("这在未来可能会改变如下："),t("code",[e._v("in")]),e._v("和"),t("code",[e._v("!in")]),e._v(" 地图将不再支持操作。 相反，对于任何地图 "),t("code",[e._v("m")]),e._v("，"),t("code",[e._v("m.Domain")]),e._v(" 将返回其域作为一个集合，而 "),t("code",[e._v("m.Range")]),e._v(" 将返回，也作为一个集合，在其域下的 "),t("code",[e._v("m")]),e._v(" 的图像。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-map-membership",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("这将在 Dafny 的未来版本中发生变化，它将同时支持可空和（默认情况下）非 -null 引用类型。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-nullable",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("很快，"),t("code",[e._v("object")]),e._v(" 将成为一个内置的 trait 而不是内置的特殊 班级。 发生这种情况时，将不再可能执行“新对象”。 "),t("code",[e._v("object")]),e._v(" 不能用作类型参数的当前编译器限制也将消失。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-object-trait",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("将特殊字段"),t("code",[e._v("_reads")]),e._v("和"),t("code",[e._v("_modifies")]),e._v("重命名为相同是有意义的 名称作为相应的关键字，“读取”和“修改”，就像对函数值所做的那样。 此外，各种 "),t("code",[e._v("_decreases*i*")]),e._v(" 字段可以组合成一个名为 "),t("code",[e._v("decreases")]),e._v(" 的字段，其类型是 "),t("em",[e._v("n")]),e._v(" 元组。\n"),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-iterator-field-names",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("是否应该将"),t("code",[e._v("newtype")]),e._v("重命名为"),t("code",[e._v("numtype")]),e._v("？ "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-newtype-name",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("自动定义“谓词N”有用吗？(m:M){Q} `? "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-newtype-design-question",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("限制是由于当前编译器的限制。 这将在未来发生变化，也将为子集类型和非空引用类型开辟可能性。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-newtype-zero",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Dafny 的未来版本将支持用户定义的子集类型。 "),t("a",{attrs:{href:"http://leino.science/papers/krml243.html#back-fn-fn-more-subset-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("↩"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=v.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{542:function(e,n,a){"use strict";a.r(n);var s=a(18),t=Object(s.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"自动归纳"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动归纳"}},[e._v("#")]),e._v(" 自动归纳")]),e._v(" "),a("blockquote",[a("p",[a("em",[e._v("K. Rustan M. Leino Manuscript KRML 269, 31 May 2019")])])]),e._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[e._v("摘要")]),e._v(" "),a("p",[e._v("对于简单的例子，"),a("code",[e._v("Dafny")]),e._v("的自动归纳法足够强大，可以在不需要人工输入的情况下证明一些引理，并帮助减少证明其他引理所需的人工输入。本说明解释了自动感应是如何应用的，以及如何使用两个主要旋钮来调整自动化的功能。")])]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("Dafny")]),e._v("不仅支持手工编写的引理，而且还提供了一些自动化功能，帮助通过归纳来证明"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#leino:induction",target:"_blank",rel:"noopener noreferrer"}},[e._v("引理[0]"),a("OutboundLink")],1),e._v("。让我们从手动证明的变化开始，然后看看自动感应如何提供或无法提供证明，最后看看如何调整自动化的功能。")])]),e._v(" "),a("h2",{attrs:{id:"运行实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行实例"}},[e._v("#")]),e._v(" 运行实例")]),e._v(" "),a("h3",{attrs:{id:"列表和函数定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表和函数定义"}},[e._v("#")]),e._v(" 列表和函数定义")]),e._v(" "),a("p",[e._v("考虑以下递归定义列表的标准定义，以及一个"),a("code",[e._v("Length")]),e._v("函数和一个构造递增整数列表的函数。")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("datatype List<A> = Nil | Cons(A, List<A>)\n\nfunction method Length(list: List): nat {\n  match list\n  case Nil => 0\n  case Cons(_, tail) => 1 + Length(tail)\n}\n\nfunction method Range(start: int, len: nat): List<int>\n  decreases len\n{\n  if len == 0 then Nil else Cons(start, Range(start+1, len-1))\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("有了这些定义，我们开始证明列表"),a("code",[e._v("Range(start, len)")]),e._v("的长度是"),a("code",[e._v("len")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"引理和证明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引理和证明"}},[e._v("#")]),e._v(" 引理和证明")]),e._v(" "),a("p",[e._v("我们要证明"),a("code",[e._v("list Range(start, len)")]),e._v("的长度是"),a("code",[e._v("len")]),e._v("。我们从手工验证开始。为了确保在第一个示例中自动归纳不会对我们有帮助，我用属性"),a("code",[e._v("{:induction false}")]),e._v("标记了引理。")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lemma {:induction false} RangeLength(start: nat, len: nat)\n  ensures Length(Range(start, len)) == len\n  decreases len\n{\n  if len == 0 {\n    // trivial\n  } else {\n    calc {\n      Length(Range(start, len));\n    ==  // def. Range, since len > 0\n      Length(Cons(start, Range(start+1, len-1)));\n    ==  // def. Length on Cons\n      1 + Length(Range(start+1, len-1));\n    ==  { RangeLength(start+1, len-1); }  // apply induction hypothesis\n      1 + len - 1;\n    ==  // arithmetic\n      len;\n    }\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),a("p",[e._v("出于本文的目的，我假设您已经基本了解如何手动编写这样的证明，无论是在Dafny还是在纸上。我将在这里描述证明的要素，但不会试图解释所有可能的考虑因素。")])]),e._v(" "),a("p",[e._v("引理称为"),a("code",[e._v("RangeLength")]),e._v("，由"),a("code",[e._v("start")]),e._v("和"),a("code",[e._v("len")]),e._v("参数化，就像"),a("code",[e._v("Range")]),e._v("函数一样。引理证明的属性在"),a("code",[e._v("ensures")]),e._v("子句中陈述。它也被称为“证明目标”。")]),e._v(" "),a("p",[e._v("引理的签名部分还定义了一个"),a("code",[e._v("decreases")]),e._v("子句，该子句表示表达式"),a("code",[e._v("len")]),e._v("将被用作引理的任何递归调用的终止度量。这个终止度规与“范围”函数的终止度规相同。这很常见，因为在引理的证明目标中，证明的结构通常遵循函数的结构。")]),e._v(" "),a("p",[e._v("引理主体分为两种情况，遵循“范围”定义中的情况。第一个例子是"),a("code",[e._v("len == 0")]),e._v("，它给出了一个非常简单的证明:当"),a("code",[e._v("len == 0")]),e._v("时，"),a("code",[e._v("Range")]),e._v("返回长度为"),a("code",[e._v("0")]),e._v("的"),a("code",[e._v("Nil")]),e._v("。")]),e._v(" "),a("p",[e._v("另一种情况是使用"),a("em",[e._v("已验证的计算")]),e._v("，通常称为"),a("code",[e._v("calc")]),e._v("语句["),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#leinopolikarpova:calc",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),a("OutboundLink")],1),e._v("]。这个计算从表达式"),a("code",[e._v("Length(Range(start, len))")]),e._v("开始，并使用保持等式的转换来得到"),a("code",[e._v("len")]),e._v("，这正是证明目标所说的引理必须证明的。计算的前两个步骤应用"),a("code",[e._v("Range")]),e._v("和"),a("code",[e._v("Length")]),e._v("的定义，将表达式重写为我们可以看到表达式的形式")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Length(Range(start+1, len-1))\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这就是证明过程中有趣的一步。我们想用"),a("code",[e._v("len - 1")]),e._v("替换这个表达式，这需要证明表达式确实等于"),a("code",[e._v("len - 1")]),e._v("。用正确的参数，这就是我们要证明的引理。因此，我们使用"),a("code",[e._v("calc")]),e._v("语句提示并调用引理:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("RangeLength(start+1, len-1);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("因为这是对我们要证明的引理的递归调用，我们必须证明终止。对引理的递归调用通常被称为“归纳假设”的应用。这样，我们的终止检查对应于确保归纳是“有根据的”。在Dafny中，通过显示每个递归调用都会减少一些"),a("em",[e._v("终止度量")]),e._v("来证明终止，也就是说，递归调用的某个表达式的计算值比调用者的值要小。这个更小的终止度规表达式是什么“更小”是什么意思?表达式是"),a("code",[e._v("len")]),e._v("，由"),a("code",[e._v("decreases")]),e._v("子句给出，由于"),a("code",[e._v("len")]),e._v("是一个整数，Dafny使用“小于，以"),a("code",[e._v("0")]),e._v("为界的整数”作为顺序。")]),e._v(" "),a("h3",{attrs:{id:"终止的细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终止的细节"}},[e._v("#")]),e._v(" 终止的细节")]),e._v(" "),a("p",[e._v("这太拗口了。让我们再回顾一下最后一部分，关于终止的部分。")]),e._v(" "),a("p",[e._v("为了证明对一个(函数、方法或)引理的递归调用会终止，我们将引理的每次调用按照合理的顺序与一个值关联起来。有充分的理由意味着不存在无限的降序链。也就是说，存在固定的排序，并且在该排序中，每一个连续的小值序列都是有限的。例如，在“小于，以“0”为界的整数”排序中，一个降序链是")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("57, 56, 48, 39, 20, 4\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这个链是有限的。无论您写下的降序链是什么，它都是有限的(否则，您最终会得到一个负数，但请记住我们说过“以‘0’为界”"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#fn-fn-int-order",target:"_blank",rel:"noopener noreferrer"}},[e._v("0"),a("OutboundLink")],1),e._v(")。")]),e._v(" "),a("p",[e._v("Dafny为每种类型构建了一个固定的、基于良好基础的顺序。"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#fn-fn-across-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),a("OutboundLink")],1),e._v("它还支持值的"),a("em",[e._v("字典元组")]),e._v("，这种元组的良好基础顺序是每个组件上类型的字典顺序。")]),e._v(" "),a("p",[e._v("我们将引理调用与这个固定的、有根据的顺序的值关联的方式是声明一个"),a("code",[e._v("decreases")]),e._v("子句。它的参数是一个表达式列表，这些表达式构成一个字典元组。对于“RangeLength”引理，我们使用了“减小len”。这意味着每次对引理的调用都将与传入参数"),a("code",[e._v("len")]),e._v("的相同值相关联。")]),e._v(" "),a("p",[e._v("函数"),a("code",[e._v("Range")]),e._v("也是递归的，对于它的调用，我们还使用"),a("code",[e._v("len")]),e._v("作为终止度量。函数"),a("code",[e._v("Length")]),e._v("也是递归的，但显然我们没有给它一个"),a("code",[e._v("decreases")]),e._v("子句。在缺少"),a("code",[e._v("decreases")]),e._v("子句的情况下，Dafny为我们提供了一个子句，即按给定顺序由函数/方法/引词的参数组成的字典元组。"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#fn-fn-auto-decr",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),a("OutboundLink")],1),a("code",[e._v("Length")]),e._v("的终止度量是"),a("code",[e._v("list")]),e._v("(Dafny的有理有据的归纳数据类型的顺序是结构包含)。Dafny的ide提供了一个工具提示(你可以在函数/方法/引理声明上看到)，告诉你它为递归函数/方法/引理选择了哪个“减小”子句。")]),e._v(" "),a("p",[e._v("到目前为止，我已经说过Dafny定义了一个固定的、有根据的排序，而将引理调用与该排序中的值关联的方法是声明一个“减小”子句。验证者如何使用这些东西来证明终止?它证明了与被调用方关联的值严格低于与调用方关联的值。换句话说，它证明了每个递归调用都在递减链中采取了一步。因为每个链都是有限的，所以不存在无限递归。换句话说，递归调用终止。")]),e._v(" "),a("p",[e._v("在这个例子中，有一个从"),a("code",[e._v("RangeLength(start, len)")]),e._v("到"),a("code",[e._v("RangeLength(start+1, len-1)")]),e._v("的递归调用。引理使用了"),a("code",[e._v("decreases len")]),e._v("，所以验证器检查"),a("code",[e._v("len-1 < len")]),e._v("，这证明了终止。")]),e._v(" "),a("p",[e._v("类似地，有一个从"),a("code",[e._v("Range(start, len)")]),e._v("到"),a("code",[e._v("Range(start+1, len-1)")]),e._v("的递归调用。验证器检查"),a("code",[e._v("len-1 < len")]),e._v("，这证明了终止。")]),e._v(" "),a("p",[e._v("最后，有一个从"),a("code",[e._v("Length(list)")]),e._v("到"),a("code",[e._v("Length(tail)")]),e._v("的递归调用，其中"),a("code",[e._v("tail")]),e._v("在结构上包含在"),a("code",[e._v("list")]),e._v("中。因此，验证者也可以在这里证明终止。")]),e._v(" "),a("h3",{attrs:{id:"rangelength的其他终止度量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rangelength的其他终止度量"}},[e._v("#")]),e._v(" "),a("code",[e._v("RangeLength")]),e._v("的其他终止度量")]),e._v(" "),a("p",[e._v("考虑一下如果我们为“RangeLength”选择不同的终止度量会发生什么是有指导意义的。对于我们考虑的每一个元素，证明义务的构造方式都是相同的:"),a("code",[e._v("RangeLength(start+1, len-1)")]),e._v("的值必须小于"),a("code",[e._v("RangeLength(start, len)")]),e._v("的值。")]),e._v(" "),a("p",[e._v("假设我们声明"),a("code",[e._v("RangeLength")]),e._v("带有"),a("code",[e._v("decreases 10*len + 28")]),e._v("。是的，这个终止度规足以证明终止，因为"),a("code",[e._v("10*len + 18")]),e._v("小于"),a("code",[e._v("10*len + 28")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("decreases len - 6")]),e._v("呢?不，Dafny会抱怨不能证明终止，如果你给它这个终止度量。它将无法证明在整数排序中"),a("code",[e._v("lens -7")]),e._v("低于"),a("code",[e._v("lens -6")]),e._v("，因为它们可能是负的。"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#fn-fn-fast-loose",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("让我们试试"),a("code",[e._v("decreases start + len")]),e._v("。不，因为"),a("code",[e._v("start+1 + len-1")]),e._v("不小于"),a("code",[e._v("start+ len")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("decreases start + 2*len")]),e._v("怎么样?是的，这证明了终止，因为"),a("code",[e._v("start+1 + 2*(len-1)")]),e._v("小于"),a("code",[e._v("start+ 2*len")]),e._v("。")]),e._v(" "),a("p",[e._v("使用字典元组"),a("code",[e._v("start, len")]),e._v("怎么样?不，这不会证明终止，因为"),a("code",[e._v("start+1, len-1")]),e._v("在字典上并不小于"),a("code",[e._v("start, len")]),e._v("(事实上，它在字典上更大)。如果我们把“RangeLength”中的“减小”去掉，"),a("code",[e._v("Dafny")]),e._v("会为我们生成一个。它生成的值是"),a("code",[e._v("decreases start, len")]),e._v("，因为"),a("code",[e._v("RangeLength")]),e._v("的参数是"),a("code",[e._v("start")]),e._v("和"),a("code",[e._v("len")]),e._v("，按这个顺序。因此，如果没有明确的“减少”条款，Dafny会抱怨无法证明终止合同。")]),e._v(" "),a("p",[e._v("如何切换参数的顺序，比如"),a("code",[e._v("len, start")]),e._v(" ?是的，这证明了终止，因为"),a("code",[e._v("len-1, start+1")]),e._v("小于"),a("code",[e._v("len, start")]),e._v("。")]),e._v(" "),a("p",[e._v("如果你改变"),a("code",[e._v("RangeLength")]),e._v("来交换它的参数"),a("code",[e._v("start")]),e._v("和"),a("code",[e._v("len")]),e._v("(并且对"),a("code",[e._v("RangeLength")]),e._v("做同样的交换递归调用)，那么你可以忽略"),a("code",[e._v("decreases")]),e._v("子句。在本例中，Dafny将生成"),a("code",[e._v("decreases len, start")]),e._v("，这证明了终止。然而，通常建议坚持参数顺序，这是手边函数/方法/引理最自然的顺序。")]),e._v(" "),a("p",[e._v("最后，这个奇怪的终止指标"),a("code",[e._v("decreases 7,len")]),e._v("怎么样?当你第一次大声读到这个的时候，你可能会说")]),e._v(" "),a("blockquote",[a("p",[e._v("减少7 ?什么东西能减少呢?7是我曾祖父母在世时的数字，7将永远是这个数字。没有办法降低!")])]),e._v(" "),a("p",[e._v("你是对的，但“减少”条款不是这么说的。“减小”子句只是简单地说明了如何将每个引理调用以合理的顺序映射到一个值。所以，有了这个奇怪的终止度量，证明的义务是检查"),a("code",[e._v("7,len-1")]),e._v("在字典上小于"),a("code",[e._v("7,len")]),e._v("，它确实是。其实也没那么古怪。")]),e._v(" "),a("h3",{attrs:{id:"一个较短的证明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个较短的证明"}},[e._v("#")]),e._v(" 一个较短的证明")]),e._v(" "),a("p",[e._v("让我们简化我们为"),a("code",[e._v("RangeLength")]),e._v("编写的手动证明。当我们写一个证明的时候，"),a("code",[e._v("calc")]),e._v("语句是很有用的，它也提供了一个可读的证明。但一旦我们找到了一个证明，我们有时会选择缩短它，也许是因为回想起来，我们发现自己太拘谨了，即使是对我们自己的口味来说。")]),e._v(" "),a("p",[e._v("我们上面写的"),a("code",[e._v("calc")]),e._v("陈述实际上只有一个重要步骤，即归纳假设的应用。事实上，我们可以用一个调用来替换整个"),a("code",[e._v("calc")]),e._v("语句:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lemma {:induction false} RangeLength(start: nat, len: nat)\n  ensures Length(Range(start, len)) == len\n  decreases len\n{\n  if len == 0 {\n  } else {\n    RangeLength(start+1, len-1);\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("因为"),a("code",[e._v("if")]),e._v('的" then "分支是空的，我们当然也可以否定守卫，交换分支，并省略空的'),a("code",[e._v("else")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lemma {:induction false} RangeLength(start: nat, len: nat)\n  ensures Length(Range(start, len)) == len\n  decreases len\n{\n  if len != 0 {\n    RangeLength(start+1, len-1);\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h3",{attrs:{id:"强感应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强感应"}},[e._v("#")]),e._v(" 强感应")]),e._v(" "),a("p",[e._v("我们还能比这个if语句做得更好吗?那要看你觉得什么更好了，但在达芙妮有办法消除这个分支。我们可以通过替换整个"),a("code",[e._v("if")]),e._v("语句和它对"),a("code",[e._v("RangeLength")]),e._v("的一次调用，用"),a("code",[e._v("forall")]),e._v("语句调用"),a("code",[e._v("RangeLength")]),e._v("来获取一大堆值。")]),e._v(" "),a("p",[e._v("首先，假设我们尝试使用以下代码作为"),a("code",[e._v("RangeLength")]),e._v("的主体:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("forall start`, len` {\n  RangeLength(start`, len`);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("这个漫不经心的语句对所有可能的"),a("code",[e._v("start")]),e._v("和"),a("code",[e._v("len")]),e._v("值调用"),a("code",[e._v("RangeLength")]),e._v("。这是行不通的，因为很多递归调用都不会终止。我们需要限制自己的值为"),a("code",[e._v("start")]),e._v("和"),a("code",[e._v("len")]),e._v("，以减少终止度量。")]),e._v(" "),a("p",[e._v("那么，让我们试试这个:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lemma {:induction false} RangeLength(start: nat, len: nat)\n  ensures Length(Range(start, len)) == len\n  decreases len\n{\n  forall start`, len` | 0 <= len` < len {\n    RangeLength(start`, len`);\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[e._v("对于所有的"),a("code",[e._v("start")]),e._v("值和所有小于"),a("code",[e._v("len")]),e._v("值，调用"),a("code",[e._v("RangeLength")]),e._v("。也就是说，这个"),a("code",[e._v("forall")]),e._v("语句一次性对"),a("code",[e._v("RangeLength")]),e._v("进行了无数次递归调用。由于"),a("code",[e._v("len")]),e._v(" 的值小于"),a("code",[e._v("len")]),e._v("，这无数次调用中的每一次都会终止。"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#fn-fn-inf-calls",target:"_blank",rel:"noopener noreferrer"}},[e._v("4"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("这个版本的"),a("code",[e._v("RangeLength")]),e._v("进行验证。对于所有这样的小值的归纳假设的数学名称叫做“强归纳”。")]),e._v(" "),a("p",[e._v("好的，"),a("code",[e._v("start")]),e._v("的值可以大于"),a("code",[e._v("start")]),e._v("(在这一点上，它对于证明"),a("code",[e._v("start + 1")]),e._v("是其中一个值是至关重要的)。所以，你可能认为上面的“为所有人”的陈述不仅仅是强归纳。事实上，有些人可能会争辩说，这个"),a("code",[e._v("forall")]),e._v("语句也执行了所谓的“泛化”引理到所有的"),a("code",[e._v("start")]),e._v("值。但是如果你认为决定"),a("code",[e._v("smaller")]),e._v("的排序只是比较"),a("code",[e._v("len")]),e._v("组件，那么"),a("code",[e._v("start")]),e._v("， "),a("code",[e._v("len")]),e._v(" "),a("code",[e._v("decreases")]),e._v("确实比"),a("code",[e._v("start, len")]),e._v(" 小，只要"),a("code",[e._v("len")]),e._v(" 小于"),a("code",[e._v("len")]),e._v("。不管你想怎么想，或者你想给它起什么数学名字，"),a("code",[e._v("Dafny")]),e._v("都接受上面的“所有人”的说法作为证明。在编程术语中，我们所做的就是证明每个递归调用都会终止，这与我们定义终止度规的方式是一样的，即"),a("code",[e._v("decreases len")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"自动归纳-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动归纳-2"}},[e._v("#")]),e._v(" 自动归纳")]),e._v(" "),a("p",[e._v("有了这些背景知识，我们终于可以了解"),a("code",[e._v("Dafny")]),e._v("是如何实现自动感应的了。简而言之:如果你删除属性"),a("code",[e._v("{:inducerfalse}")]),e._v("(我引入这个属性只是为了禁用自动感应，而我们在一开始讨论什么是证明)，那么"),a("code",[e._v("Dafny")]),e._v("在默认情况下所做的就是插入我们刚才看到的"),a("code",[e._v("forall")]),e._v("语句。这意味着你可以删除手动插入的"),a("code",[e._v("forall")]),e._v("语句，因为"),a("code",[e._v("Dafny")]),e._v("会为你添加它。换句话说，"),a("code",[e._v("Dafny")]),e._v("接受了下面这个引理的证明:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lemma RangeLength(start: nat, len: nat)\n  ensures Length(Range(start, len)) == len\n  decreases len\n{\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("简洁明了")]),e._v(" "),a("h3",{attrs:{id:"自动归纳的详细情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动归纳的详细情况"}},[e._v("#")]),e._v(" 自动归纳的详细情况")]),e._v(" "),a("p",[a("code",[e._v("Dafny")]),e._v("自动归纳法归根结底就是在每个引理的开头自动生成一个"),a("code",[e._v("forall")]),e._v("语句。这并不能解决所有的归纳法问题，但我很惊讶，这个简单的方法确实解决了这么多简单的归纳法问题。让我们来看看这个动作的组成部分。")]),e._v(" "),a("p",[e._v("对于带有形式参数"),a("code",[e._v("args")]),e._v("、前置条件"),a("code",[e._v("P(args)")]),e._v("、"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#fn-fn-pre",target:"_blank",rel:"noopener noreferrer"}},[e._v("5"),a("OutboundLink")],1),e._v("和终止度量"),a("code",[e._v("T(args)")]),e._v("的引理"),a("code",[e._v("L")]),e._v("， Dafny自动归纳在"),a("code",[e._v("L")]),e._v("的主体开头插入以下"),a("code",[e._v("forall")]),e._v("语句:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("forall aa` | P(args`) && T(args`) < T(args) {\n  L(args`);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("此处")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("aa")]),e._v("是形式参数"),a("code",[e._v("args")]),e._v("的子集，")]),e._v(" "),a("li",[a("code",[e._v("aa ’")]),e._v("是"),a("code",[e._v("aa")]),e._v("，适当地重命名有新的名字，")]),e._v(" "),a("li",[a("code",[e._v("args’")]),e._v("表示"),a("code",[e._v("args")]),e._v("，但是"),a("code",[e._v("aa ’")]),e._v("中的每个变量都被"),a("code",[e._v("aa")]),e._v("中的相应变量替换，并且")]),e._v(" "),a("li",[a("code",[e._v("<")]),e._v("表示"),a("code",[e._v("Dafny")]),e._v("的字典顺序是有根据的。")])]),e._v(" "),a("p",[e._v("变量"),a("code",[e._v("args")]),e._v("的子集"),a("code",[e._v("aa")]),e._v("可以通过在引理上放置属性"),a("code",[e._v("{:induction aa}")]),e._v("来定制。如果没有给出这样的属性，那么"),a("code",[e._v("Dafny")]),e._v("启发式地选择"),a("code",[e._v("aa")]),e._v("。当您将鼠标悬停在引理的名称上时，"),a("code",[e._v("Dafny")]),e._v("会在工具提示中报告它所选择的内容。")]),e._v(" "),a("p",[e._v("我们可以把"),a("code",[e._v("{:induction x}")]),e._v("看作是‘对"),a("code",[e._v("x")]),e._v("进行归纳法’，但是要小心一点。我发现“归纳法胜过……”这个短语在数学上的常用用法合并了几个概念。因此，准确地说，"),a("code",[e._v("{:induction aa}")]),e._v("属性指定的是"),a("em",[e._v("哪些参数要在")]),e._v("上统一量化。")]),e._v(" "),a("p",[e._v("还有一个很容易忘记的微妙之处:“减少”条款很重要。当我们写一个类似于"),a("code",[e._v("RangeLength")]),e._v("的引理时，我们可能期望证明足够简单，以至于"),a("code",[e._v("Dafny")]),e._v("的自动归纳法会自动处理它。如果是这样，我们可以写下引理的类型签名和(前置和后置条件)。这通常是所有需要的，但在"),a("code",[e._v("RangeLength")]),e._v("的情况下，还需要提供"),a("code",[e._v("减少")]),e._v("子句。通常，如果引理所涉及的主函数(运行示例中的"),a("code",[e._v("Range")]),e._v(")需要一个显式的"),a("code",[e._v("减小")]),e._v("子句，那么引理也需要。唉，这很容易被忘记。")]),e._v(" "),a("p",[e._v("接下来，让我们考虑一些自定义"),a("code",[e._v("RangeLength")]),e._v("自动归纳的方法。")]),e._v(" "),a("h3",{attrs:{id:"例如-缺少decreases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例如-缺少decreases"}},[e._v("#")]),e._v(" 例如:缺少"),a("code",[e._v("decreases")])]),e._v(" "),a("p",[e._v("如果你忘记了“RangeLength”的“减小”子句会发生什么?引理看起来是这样的:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lemma RangeLength(start: nat, len: nat)\n  ensures Length(Range(start, len)) == len\n{\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("对于这个引理，"),a("code",[e._v("Dafny")]),e._v("提出了"),a("code",[e._v("{:induction start，len}")]),e._v("和"),a("code",[e._v("decreases start，len")]),e._v("."),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#fn-fn-no-decr-tooltip",target:"_blank",rel:"noopener noreferrer"}},[e._v("6"),a("OutboundLink")],1),e._v("这意味着诱导操作插入隐含的"),a("code",[e._v("forall")]),e._v("语句")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("forall start`: nat, len`: nat |\n  start` < start || (start` == start && len` < len)\n{\n  RangeLength(start`, len`);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("正如我们在前一节中所探讨的，这并不能证明这个引理，因为关键的调用"),a("code",[e._v("RangeLength(start+1, len-1)")]),e._v("不在执行的调用中。")]),e._v(" "),a("h3",{attrs:{id:"例如-只对len进行量化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例如-只对len进行量化"}},[e._v("#")]),e._v(" 例如:只对"),a("code",[e._v("len")]),e._v("进行量化")]),e._v(" "),a("p",[e._v("如果我们手动覆盖量化变量，只列出"),a("code",[e._v("len")]),e._v("会怎么样?")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lemma {:induction len} RangeLength(start: nat, len: nat)\n  ensures Length(Range(start, len)) == len\n{\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("然后我们得到下面的"),a("code",[e._v("forall")]),e._v("语句:")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("forall len`: nat |\n  start < start || (start == start && len` < len)\n{\n  RangeLength(start, len`);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("注意，这个例子中没有"),a("code",[e._v("start")]),e._v("。相反，原始的形式参数"),a("code",[e._v("start")]),e._v("用于公式化的范围表达式")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("P(start, len`) && T(start, len`) < T(start, len)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("在这个例子中没有先决条件，所以"),a("code",[e._v("P")]),e._v("部分是"),a("code",[e._v("true")]),e._v("。因为我们没有提供一个明确的"),a("strong",[e._v("减少")]),e._v("条款，"),a("code",[e._v("Dafny")]),e._v("生成了"),a("code",[e._v("decreases start，len")]),e._v("。因此，限制全局量化变量(即"),a("code",[e._v("len ’")]),e._v(")的范围表达式是")]),e._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("start < start || (start == start && len` < len)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("简化为"),a("code",[e._v("len ’ < len")])]),e._v(" "),a("p",[e._v("同样，由于"),a("code",[e._v("forall")]),e._v("语句所包含的递归调用不包括关键的调用"),a("code",[e._v("RangeLength(start+1, len-1)")]),e._v("，"),a("code",[e._v("Dafny")]),e._v("将报告一个错误，引理的后置条件可能不成立。")]),e._v(" "),a("p",[e._v("即使我们手动提供了一个“减少”条款，结果也是一样的。这仍然会将"),a("code",[e._v("len ’")]),e._v("限制为小于"),a("code",[e._v("len")]),e._v("的值，这是可以的，但问题仍然是归纳假设只考虑给定的"),a("code",[e._v("start")]),e._v("值。")]),e._v(" "),a("h4",{attrs:{id:"致谢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#致谢"}},[e._v("#")]),e._v(" 致谢")]),e._v(" "),a("p",[e._v("我很感谢Sean McLaughlin，他提供了跑步的例子和关于"),a("code",[e._v("RangeLength")]),e._v("自动感应的问题。")]),e._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),a("p",[e._v("[0]K. Rustan M. Leino. Automating induction with an SMT solver. In Viktor Kuncak and Andrey Rybalchenko, editors, "),a("em",[e._v("Verification, Model Checking, and Abstract Interpretation — 13th International Conference, VMCAI 2012")]),e._v(", volume 7148 of "),a("em",[e._v("Lecture Notes in Computer Science")]),e._v(", pages 315–331. Springer, January 2012. "),a("a",{attrs:{href:"http://www.bing.com/search?q=Automating+induction+with+solver+++Rustan+Leino+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("[1]K. Rustan M. Leino and Nadia Polikarpova. Verified calculations. In Ernie Cohen and Andrey Rybalchenko, editors, "),a("em",[e._v("Verified Software: Theories, Tools, Experiments — 5th International Conference, VSTTE 2013, Revised Selected Papers")]),e._v(", volume 8164 of "),a("em",[e._v("Lecture Notes in Computer Science")]),e._v(", pages 170–190. Springer, 2014. "),a("a",{attrs:{href:"http://www.bing.com/search?q=Verified+calculations+++Rustan+Leino+Nadia+Polikarpova+",target:"_blank",rel:"noopener noreferrer"}},[e._v("🔎"),a("OutboundLink")],1)]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("0.我化简了一下。Dafny对整数的合理排序实际上是“小于，且不超过一个负数的整数”。所以，一条链允许下降到0以下，但一旦它包含一个负数，它就必须停止。这个扩展是一个有根据的顺序，因为仍然没有办法做出一个无限递减链。[↩](http://leino.science/papers/krml269.html # back-fn-fn-int-order)")]),e._v(" "),a("p",[e._v("1.我化简了一下。Dafny的固定的有根据的顺序也对不同类型的值进行排序。[↩](http://leino.science/papers/krml269.html # back-fn-fn-across-types)")]),e._v(" "),a("p",[e._v("2.这是一个轻微的简化。Dafny为递归函数/方法/引理提出“减小”子句的启发式方法省略了类型对证明终止没有帮助的参数。例如，类型为类型参数的参数会在自动生成的“减小”子句中被省略。[↩](http://leino.science/papers/krml269.html # back-fn-fn-auto-decr)")]),e._v(" "),a("p",[e._v("3.在前面的例子中，我把握得很准，因为我也应该指出"),a("code",[e._v("10*len + 18")]),e._v("是非负的。)"),a("a",{attrs:{href:"http://leino.science/papers/krml269.html#back-fn-fn-fast-loose",target:"_blank",rel:"noopener noreferrer"}},[e._v("作者系"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v('4.“无数个电话?!”你对自己说。"即使每个调用都终止了，终止是怎么回事? "我不会在这里深入研究，但我至少要指出，我们调用的是一个引理，而不是一个编译的方法。因此，您不需要担心是否有足够的计算资源来进行无限次调用。[↩](http://leino.science/papers/krml269.html # back-fn-fn-inf-calls)')]),e._v(" "),a("p",[e._v("5.引理的前提条件是使用关键字"),a("code",[e._v("requires")]),e._v("声明的。它就像引理的一个先行词，在每个呼叫点都要检查它是否成立。运行的示例不包含前置条件。一个简单的方法是将"),a("code",[e._v("start")]),e._v("的类型从"),a("code",[e._v("nat")]),e._v("更改为"),a("code",[e._v("int")]),e._v("，并添加"),a("code",[e._v("require 0 <= start")]),e._v("。[↩](http://leino.science/papers/krml269.html # back-fn-fn-pre)")]),e._v(" "),a("p",[e._v("6.我提到过Dafny ide中的工具提示会告诉你Dafny选择了哪些“减少”条款。在撰写本文时，只有当函数/方法/引理的主体包含显式递归调用时，才会显示这样的工具提示。特别是，如果引理的主体是空的，则没有工具提示显示生成了什么“减小”子句。[↩](http://leino.science/papers/krml269.html # back-fn-fn-no-decr-tooltip)")])])}),[],!1,null,null,null);n.default=t.exports}}]);
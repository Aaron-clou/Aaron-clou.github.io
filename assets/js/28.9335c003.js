(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{514:function(s,n,e){"use strict";e.r(n);var t=e(18),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"泛型-generics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型-generics"}},[s._v("#")]),s._v(" "),e("strong",[s._v("泛型 Generics")])]),s._v(" "),e("p",[s._v("Dafny同其他语言一样都有泛型，任何类、方法、函数都可以有类型参数，在<>中申明该数据类型"),e("code",[s._v("T")])]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class MyMultiset<T> {\n /*...*/\n}\t\t//类泛型\n\ndatatype Tree<T> = Leaf | Node(Tree<T>, T, Tree<T>) //自定义数据泛型\nmethod Find<T>(key: T, collection: Tree<T>) { //方法泛型\n /*...*/\n}\n\nfunction IfThenElse<T>(b: bool, x: T, y: T): T {\t//函数泛型\n /*...*/\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);
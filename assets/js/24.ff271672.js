(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{510:function(e,s,t){"use strict";t.r(s);var a=t(18),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"方法-methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法-methods"}},[e._v("#")]),e._v(" 方法 methods")]),e._v(" "),t("p",[e._v("方法的声明如下：")]),e._v(" "),t("div",{staticClass:"language-dafny line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("method M(a: A, b: B, c: C) r eturns (x: X, y: Y, z: Y)  //输入输出参数\n\trequires Pre\t//前置条件  \n\tmodifies Frame  //框架\n\tensures Post\t//后置条件\n  decreases TerminationMetric //变体函数\n{\n \tmethod M(a: A, b: B, c: C) r eturns (x: X, y: Y, z: Y)  //输入输出参数\n \t requires Pre\t//前置条件\t\n \t modifies Frame  //框架\t\n \t ensures Post\t//后置条件\n \t decreases TerminationMetric //变体函数\n\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[e._v("其中：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("a")]),e._v(", "),t("code",[e._v("b")]),e._v(", "),t("code",[e._v("c")]),e._v(" : 输入参数")]),e._v(" "),t("li",[t("code",[e._v("x")]),e._v(", "),t("code",[e._v("y")]),e._v(", "),t("code",[e._v("z")]),e._v(" :  输出参数")]),e._v(" "),t("li",[t("code",[e._v("Pre")]),e._v(": 表示方法 前提条件 的 布尔表达式")]),e._v(" "),t("li",[t("code",[e._v("Frame")]),e._v(": 表示类对象的集合，可以被方法更新")]),e._v(" "),t("li",[t("code",[e._v("Post")]),e._v(": 是方法 后置条件 的 布尔表达式")]),e._v(" "),t("li",[t("code",[e._v("TerminationMetric")]),e._v(": 是方法的变体函数")])]),e._v(" "),t("h2",{attrs:{id:"框架frame"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#框架frame"}},[e._v("#")]),e._v(" 框架Frame")]),e._v(" "),t("p",[t("strong",[e._v("框架Frame")]),e._v(" 是单个或多个对象组成的表达式的集合。(见下面例子)")]),e._v(" "),t("p",[e._v("框架"),t("code",[e._v("Frame")]),e._v("是由类内对象和类外方法内对象两部分组成。(反正就是一堆类对象的集合）")]),e._v(" "),t("p",[e._v("例如，如果 "),t("code",[e._v("c")]),e._v(" 和 "),t("code",[e._v("d")]),e._v(" 是类"),t("code",[e._v("C")]),e._v("的对象，那么以下每行意思是一样的。")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("modifies {c, d}")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("modifies {c} + {d}")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("modifies c, {d}")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("modifies c, d")])])])]),e._v(" "),t("p",[e._v("如果方法内啥都没写，那么前置和后置条件默认为真，框架默认为空集。")]),e._v(" "),t("h2",{attrs:{id:"变体函数-variant-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变体函数-variant-function"}},[e._v("#")]),e._v(" "),t("strong",[e._v("变体函数 variant function")])]),e._v(" "),t("p",[e._v("变体函数是一个表达式组成的列表，表示由给定表达式组成的字典元组，后跟隐含的"),t("code",[e._v("top")]),e._v("元素。")]),e._v(" "),t("p",[e._v("如果省略没写的话，Dafny 将猜测该方法的变体函数，通常是以该方法的参数列表开头的字典元组。")]),e._v(" "),t("p",[e._v("Dafny IDE 将在工具提示中显示猜测。")])])}),[],!1,null,null,null);s.default=n.exports}}]);
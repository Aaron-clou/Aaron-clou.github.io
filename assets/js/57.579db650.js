(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{543:function(s,a,n){"use strict";n.r(a);var e=n(18),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"自动调用引理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自动调用引理"}},[s._v("#")]),s._v(" 自动调用引理")]),s._v(" "),n("blockquote",[n("p",[n("em",[s._v("K. Rustan M. Leino Manuscript KRML 265, 8 June 2019")])])]),s._v(" "),n("p",[n("strong",[s._v("摘要")]),s._v(" 函数的某些性质比其他性质更有用。如果你已经证明了这样一个性质作为一个引理，你可能想让它自动应用。本文将讨论在Dafny中实现这类目标的方法。")]),s._v(" "),n("p",[s._v("在"),n("a",{attrs:{href:"https://github.com/Microsoft/dafny/issues/231",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/Microsoft/dafny/issues/231"),n("OutboundLink")],1),s._v("上，一名Dafny用户问道:")]),s._v(" "),n("blockquote",[n("p",[s._v("有一种方法在Dafny标记一个引理为“自动”，并将其添加到z3的知识库?")]),s._v(" "),n("p",[s._v("对于学生的家庭作业，我们经常会遇到一些对于Dafny来说过于复杂的规范，并且需要一些手工制作的断言或引理。")]),s._v(" "),n("p",[s._v("如果我们能够定义那些引理来用特定领域的知识来扩充boogie/z3搜索空间，那就太好了，这样我们就不必向学生解释引理是如何工作的，以及查找和使用所需引理的繁琐和困难的任务。")])]),s._v(" "),n("p",[s._v("类似于{:auto}注释的东西是可行的吗?我们能否增强。bpl的公理化?")]),s._v(" "),n("p",[s._v("下面的例子说明了这个问题。假设你声明了一个函数，并证明了它的属性:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function FibFib(n: nat): nat {\n  if n == 0 then 0\n  else if n == 1 then 2\n  else FibFib(n-2) + FibFib(n-1)\n}\n\nlemma FibFibIsEven(n: nat)\n  ensures FibFib(n) % 2 == 0\n{\n  // automatically proved by induction\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("对于您的应用程序，"),n("code",[s._v("FibFib")]),s._v("总是返回一个偶数可能是至关重要的。使用上面的声明，你将不得不在每次使用函数时调用引理"),n("code",[s._v("FibFibIsEven")]),s._v("。这是乏味的。是否有一些方法来指示Dafny自动应用"),n("code",[s._v("FibFibIsEven")]),s._v("当它需要的时候?")]),s._v(" "),n("p",[s._v("不，Dafny没有这样的特色。(例如，VCC就有这样一个功能。)在某些情况下，这种自动化可能工作得很好。在其他情况下，它可能会导致引理被调用太多次(比如，无限次)，这是有问题的。")]),s._v(" "),n("p",[s._v("如果您有兴趣尝试一些"),n("code",[s._v("{:autoLemma}")]),s._v("特性，请随意使用开放的Dafny源代码。在目前的状态下，我有四个建议你可以尝试，这些建议可能会减轻你正在经历的一些乏味。")]),s._v(" "),n("h2",{attrs:{id:"超级引理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#超级引理"}},[s._v("#")]),s._v(" 超级引理")]),s._v(" "),n("p",[s._v("一个建议是创建一个“超级引理”来收集其他几个引理的陈述。例如，如果你已经有了:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma Lemma0(x: X) ensures P0(x) { ... }\nlemma Lemma1(x: X) ensures P1(x) { ... }\nlemma Lemma2(x: X) ensures P2(x) { ... }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("然后你可以把它们合并成一个:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma Everything(x: X)\n  ensures P0(x) && P1(x) && P2(x)\n{\n  Lemma0(x: X);\n  Lemma1(x: X);\n  Lemma2(x: X);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这让您可以通过调用一个引理来获得所有3个属性。")]),s._v(" "),n("h2",{attrs:{id:"聚合引理调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#聚合引理调用"}},[s._v("#")]),s._v(" 聚合引理调用")]),s._v(" "),n("p",[s._v("另一个建议是在同一时间对多个值调用引理。考虑到:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma LemmaForOneX(x: X) ensures P(x) { ... }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("你可以对"),n("code",[s._v("X")]),s._v("的所有值同时调用这个引理:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("forall x {\n  LemmaForOneX(x);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("通过把这个"),n("code",[s._v("forall")]),s._v("语句放在你要证明的一些代码的开头，你实际上已经为每一个可能的"),n("code",[s._v("X")]),s._v("值调用了它。当然，你也可以把这个表述放入一个引理中，然后称之为这个引理:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lemma LemmaForEveryX()\n  ensures forall x :: P(x)\n{\n  forall x {\n    LemmaForOneX(x);\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("在许多情况下，这将很好地工作。在其他情况下，验证者可能没有意识到你调用了需要单个引理的值上的引理，所以你可能仍然需要手动调用"),n("code",[s._v("LemmaForOneX")]),s._v("。此外，Dafny还采取措施避免在为上面的引理调用生成的量词中出现“匹配循环”(“匹配循环”会导致引理的无限次使用)。然而，这种机制并不完美，因此这种增加的自动化在某些情况下可能会导致性能下降。")]),s._v(" "),n("h2",{attrs:{id:"函数后置条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数后置条件"}},[s._v("#")]),s._v(" 函数后置条件")]),s._v(" "),n("p",[s._v("第三个建议是在函数的后置条件中声明函数的一些最有用的属性，而不是在单独的引理中声明。例如，代替:")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function F(x: X): int { ... }\nlemma AboutF(x: X)\n  ensures F(x) % 2 == 0\n{ ... }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("你可以声明为：")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function F(x: X): int\n  ensures F(x) % 2 == 0\n{ ... }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("要获得引理所声明的属性，必须调用引理。相反，在函数的后置条件中声明的任何属性都会在每次调用函数时自动应用。")]),s._v(" "),n("p",[s._v("正如我所提到的，更多的信息可以帮助验证者自动地做更多的事情，但是过多的信息也会让验证者不知所措。因此，我的建议是只对那些您认为每个函数用户都需要的属性使用函数后置条件。很少需要的属性最好在必须手动调用的引理中声明。")]),s._v(" "),n("p",[s._v("此外，在函数后置条件中可以编写的内容也有限制。特别是，你写的东西必须“终止”。在实践中，这意味着在后置条件中提到函数应用于其他参数时可能会遇到问题。例如,")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("predicate R(x: X, y: X)\n  // commutativity:\n  ensures R(x, y) <==> R(y, x)\n  // transitivity:\n  ensures forall z :: R(x, z) && R(z, y) ==> R(x, y)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("不被允许，因为后置条件中存在自引用非终止(即无限递归)调用。因此，像交换性和及物性这样的性质总是需要表述为独立的引理。")]),s._v(" "),n("h2",{attrs:{id:"基本-高级函数对"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本-高级函数对"}},[s._v("#")]),s._v(" 基本/高级函数对")]),s._v(" "),n("p",[s._v("函数后置条件方便地为函数的所有用户提供它所声明的属性，从而减少了显式调用引理的需要。如果不是所有用户都对该属性感兴趣，那么第四个建议是声明两个函数。基本函数给出了函数的实际定义，附带的引理说明了它的性质。"),n("em",[s._v("premium")]),s._v("函数调用基本函数并将属性声明为后置条件，这是通过调用引理来证明的。")]),s._v(" "),n("div",{staticClass:"language-dafny line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function F(x: X): int { ... }\nlemma AboutF(x: X)\n  ensures F(x) % 2 == 0\n{ ... }\n\nfunction F_premium(x: X): int\n  ensures F_premium(x) % 2 == 0\n{ AboutF(x); F(x) }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("用户现在可以选择:调用"),n("code",[s._v("F_premium")]),s._v("可以获得函数的值和被证明的属性，而调用"),n("code",[s._v("F")]),s._v("只能获得函数的值。如果你希望高级版本比基础版本更受欢迎，你当然可以将"),n("code",[s._v("F")]),s._v("和"),n("code",[s._v("F_premium")]),s._v("分别重命名为"),n("code",[s._v("F_basic")]),s._v("和"),n("code",[s._v("F")]),s._v("。")]),s._v(" "),n("p",[s._v("除了后置条件之外，这两个函数是同义词。语义。需要注意的是，验证器用来指导其量词使用的机制是语法上的。因此，当验证者决定实例化量词时，你在量词主体中使用的两个函数中的哪一个可以产生差异。出于这个原因，我建议您在编写的任何量词中使用函数的基本版本。")]),s._v(" "),n("h2",{attrs:{id:"致谢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#致谢"}},[s._v("#")]),s._v(" 致谢")]),s._v(" "),n("p",[s._v("Bryan Parno提出了第四个建议，将函数的基本版本及其引理包装成函数的高级版本。")])])}),[],!1,null,null,null);a.default=t.exports}}]);
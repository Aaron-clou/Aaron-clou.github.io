(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{526:function(s,n,e){"use strict";e.r(n);var a=e(18),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[s._v("#")]),s._v(" 断言")]),s._v(" "),e("p",[s._v("与前置条件和后置条件不同，断言被放置在方法的中间。像前面两个注释一样，断言有一个关键字"),e("code",[s._v("assert")]),s._v("，后面跟着布尔表达式和结束简单语句的分号。断言表示，当控制到达代码的这一部分时，特定的表达式总是保持不变。例如，下面是一个在虚拟方法中使用断言的简单例子:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('method Testing()\n{\n   assert 2 < 3;\n   // Try "asserting" something that is not true.\n   // What does Dafny output?\n}\nmethod Testing()\n{\n   assert 2 < 3;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("code",[s._v("Dafny")]),s._v("证明了这种方法是正确的，因为"),e("code",[s._v("2")]),s._v("总是小于"),e("code",[s._v("3")]),s._v("。断言有几个用途，但其中最主要的是检查你的期望在不同的点上是否真的是真的。如上所述，您可以使用它来检查基本的算术事实，但它们也可以用于更复杂的情况。通过检查"),e("code",[s._v("Dafny")]),s._v("能够证明您的代码，断言是调试注释的强大工具。例如，我们可以用它来研究"),e("code",[s._v("Dafny")]),s._v("对"),e("code",[s._v("Abs")]),s._v("函数的了解。\n为此，我们还需要一个概念:局部变量。局部变量的行为与您所期望的完全一样，除了可能存在一些与遮蔽有关的问题。(详见参考资料)局部变量用"),e("code",[s._v("var")]),s._v("关键字声明，并且可以有类型声明。与需要类型的方法参数不同，"),e("code",[s._v("Dafny")]),s._v("几乎可以在所有情况下推断出局部变量的类型。下面是一个初始化的显式类型变量声明的例子:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method m()\n{\n   var x: int := 5;\n}\n   var x: int := 5;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("在这种情况下，可以删除类型注释:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method m()\n{\n   var x := 5;\n}\n   var x := 5;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("可以同时声明多个变量:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method m()\n{\n   var x, y, z: bool := 1, 2, true;\n}\n   var x, y, z: bool := 1, 2, true;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("显式类型声明只适用于紧接在前面的变量，因此这里的"),e("code",[s._v("bool")]),s._v("声明只适用于"),e("code",[s._v("z")]),s._v("，而不适用于"),e("code",[s._v("x")]),s._v("或"),e("code",[s._v("y")]),s._v("，它们都被推断为"),e("code",[s._v("int")]),s._v("。我们需要变量，因为我们想讨论"),e("code",[s._v("Abs")]),s._v("方法的返回值。我们不能直接将"),e("code",[s._v("Abs")]),s._v("放入规范中，因为该方法可能会改变内存状态以及其他问题。因此，我们捕获调用"),e("code",[s._v("Abs")]),s._v("的返回值如下:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   ensures 0 <= y\n{\n   if x < 0 {\n      return -x;\n   } else {\n      return x;\n   }\n}\nmethod Testing()\n{\n   var v := Abs(3);\n   assert 0 <= v;\n}\n// use definition of Abs() from before.\nmethod Testing()\n{\n   var v := Abs(3);\n   assert 0 <= v;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("这是一个例子，我们可以问"),e("code",[s._v("Dafny")]),s._v("它知道代码中的值，在这个例子中是"),e("code",[s._v("v")]),s._v("。我们通过添加断言来实现，就像上面的断言一样。每当"),e("code",[s._v("Dafny")]),s._v("遇到断言时，它都会试图证明该条件适用于代码的所有执行。在本例中，通过该方法只有一条控制路径，"),e("code",[s._v("Dafny")]),s._v("能够轻松地证明注释，因为它正是"),e("code",[s._v("Abs")]),s._v("方法的后向条件。"),e("code",[s._v("Abs")]),s._v("保证返回值是非负的，所以它很容易跟随"),e("code",[s._v("v")]),s._v("，也就是这个值，在调用"),e("code",[s._v("Abs")]),s._v("之后是非负的。")]),s._v(" "),e("p",[e("strong",[s._v("练习1")])]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("点击查看题目及代码")]),s._v(" "),e("p",[s._v("编写一个测试方法，调用练习0中的"),e("code",[s._v("Max")]),s._v("方法，然后对结果进行断言处理。")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Max(a: int, b:int) returns (c: int)\n  // Use your code from Exercise 0\nmethod Testing() {\n  // Assert some things about Max. Does it operate as you expect?\n  // If it does not, can you think of a way to fix it?\n}\nmethod Testing() { ... }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])])]),s._v(" "),e("p",[s._v("但我们对"),e("code",[s._v("Abs")]),s._v("法有更深的了解。特别是对于非负的"),e("code",[s._v("x")]),s._v("，"),e("code",[s._v("Abs(x) == x")]),s._v("。具体来说，在上面的程序中，"),e("code",[s._v("v")]),s._v("的值为3。如果我们尝试添加一个断言(或更改现有的断言):")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   ensures 0 <= y\n{\n   if x < 0 {\n      return -x;\n   } else {\n      return x;\n   }\n}\nmethod Testing()\n{\n   var v := Abs(3);\n   assert 0 <= v;\n   assert v == 3;\n}\n   assert v == 3;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("我们发现"),e("code",[s._v("Dafny")]),s._v("不能证明我们的断言，并给出一个错误。发生这种情况的原因是，"),e("code",[s._v("Dafny")]),e("em",[s._v("忘记")]),s._v("了除当前正在处理的方法之外的所有方法的主体。这极大地简化了"),e("code",[s._v("Dafny")]),s._v("的工作，也是它能够以合理速度运行的原因之一。它还通过将程序分解来帮助我们对程序进行推理，这样我们就可以单独分析每个方法*(给出其他方法的注释)*。当我们调用每个方法时，我们根本不关心它内部发生了什么，只要它满足它的注解。这是可行的，因为"),e("code",[s._v("Dafny")]),s._v("将证明所有的方法都满足它们的注释，并拒绝编译我们的代码，直到它们满足。")]),s._v(" "),e("p",[s._v("对于"),e("code",[s._v("Abs")]),s._v("方法，这意味着"),e("code",[s._v("Dafny")]),s._v("在"),e("code",[s._v("test")]),s._v("方法中所知道的关于"),e("code",[s._v("Abs")]),s._v("返回值的唯一信息就是后置条件对它的说明，仅此而已。这意味着"),e("code",[s._v("Dafny")]),s._v("不知道关于"),e("code",[s._v("Abs")]),s._v("和非负整数的好属性，除非我们把它放在"),e("code",[s._v("Abs")]),s._v("方法的后置条件中。另一种方法是将方法注释(以及参数和返回值的类型)视为修复方法行为的方法。在任何使用该方法的地方，我们假定它是满足前置和后置条件的任何一种可想象的方法。在"),e("code",[s._v("Abs")]),s._v("情况下，我们可以这样写:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   ensures 0 <= y\n{\n   y := 0;\n}\nmethod Testing()\n{\n   var v := Abs(3);\n   assert 0 <= v;\n   // this stil does not verify, but now it is actually not true:\n   assert v == 3;\n}\nmethod Abs(x: int) returns (y: int)\n   ensures 0 <= y\n{\n   y := 0;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("该方法满足后置条件，但显然满足程序片段:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   ensures 0 <= y\n{\n   y := 0;\n}\nmethod Testing()\n{\n   var v := Abs(3);\n   assert 0 <= v;\n   assert v == 3;\n}\n   var v := Abs(3);\n   assert v == 3;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("在这个例子中是不成立的。"),e("code",[s._v("Dafny")]),s._v("正在以一种抽象的方式考虑带有这些注释的所有方法。数学绝对值当然是这样一种方法，但是所有返回正常数的方法也是这样。我们需要更强的后置条件来消除这些其他可能性，并将方法"),e("em",[s._v("修正")]),s._v("为我们想要的方法。我们可以通过以下方法部分地做到这一点:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   ensures 0 <= y\n   ensures 0 <= x ==> y == x\n{\n   if x < 0 {\n      return -x;\n   } else {\n      return x;\n   }\n}\nmethod Abs(x: int) returns (y: int)\n   ensures 0 <= y\n   ensures 0 <= x ==> y == x\n{\n   // body as before\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("这正好表达了我们之前讨论过的性质，即非负整数的绝对值是相同的。第二个确保是通过隐含操作符表示的，它基本上说，在数学意义上，左边意味着右边(它的绑定比布尔"),e("code",[s._v("and")]),s._v("和比较更弱，所以上面说，"),e("code",[s._v("0 <= x")]),s._v("意味着"),e("code",[s._v("y == x")]),s._v(")。左右两边必须都是布尔表达式。\n后置条件是，在"),e("code",[s._v("Abs")]),s._v("被调用后，如果"),e("code",[s._v("x")]),s._v("的值是非负的，那么"),e("code",[s._v("y")]),s._v("等于"),e("code",[s._v("x")]),s._v("。这个暗示的一个警告是，如果左部分(先行词)为假，它仍然为真。所以当x为负时第二个后置条件是成立的。事实上，注解说的唯一一件事是当"),e("code",[s._v("x")]),s._v("为负时，结果"),e("code",[s._v("y")]),s._v("为正。但这仍然不足以修复该方法，所以我们必须添加另一个后置条件，以使以下完整的注释覆盖所有情况:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   ensures 0 <= y\n   ensures 0 <= x ==> y == x\n   ensures x < 0 ==> y == -x\n{\n   if x < 0 {\n      return -x;\n   } else {\n      return x;\n   }\n}\nmethod Abs(x: int) returns (y: int)\n   ensures 0 <= y\n   ensures 0 <= x ==> y == x\n   ensures x < 0 ==> y == -x\n{\n   // body as before\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("这些注释足以要求我们的方法实际计算"),e("code",[s._v("x")]),s._v("的绝对值。这些后置条件并不是表示该属性的唯一方法。例如，这是表达同一件事的一种不同的，稍微简短的方式:")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   ensures 0 <= y && (y == x || y == -x)\n{\n   if x < 0 {\n      return -x;\n   } else {\n      return x;\n   }\n}\n   ensures 0 <= y && (y == x || y == -x)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("一般来说，有很多方法可以写出一个给定的性质。大多数时候，选择哪一个并不重要，但是一个好的选择可以使您更容易理解所述的属性并验证其正确性。\n但我们仍然有一个问题:似乎有很多重复。方法的主体在注释中得到了非常密切的反映。虽然这是正确的代码，但我们希望消除这种冗余。正如您可能猜到的，"),e("code",[s._v("Dafny")]),s._v("提供了一种实现这一点的方法:函数。")]),s._v(" "),e("p",[e("strong",[s._v("练习2")])]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("点击查看题目及代码")]),s._v(" "),e("p",[s._v("使用前置条件，改变"),e("code",[s._v("Abs")]),s._v("，说它只能调用负值。将"),e("code",[s._v("Abs")]),s._v("的主体简化为一个返回语句，并确保该方法仍然被验证。")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   // Add a precondition here.\n   ensures 0 <= y\n   ensures 0 <= x ==> y == x\n   ensures x < 0 ==> y == -x\n{\n   // Simplify the body to just one return statement\n   if x < 0 {\n      return -x;\n   } else {\n      return x;\n   }\n}\nmethod Abs(x: int) returns (y: int) { ... }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])])]),s._v(" "),e("p",[e("strong",[s._v("练习3")])]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("点击查看题目及代码")]),s._v(" "),e("p",[s._v("保持"),e("code",[s._v("Abs")]),s._v("的后置条件与上面相同，将"),e("code",[s._v("Abs")]),s._v("的主体更改为"),e("code",[s._v("y:= x + 2")]),s._v("。为了进行验证，您需要使用什么前提条件来注释方法?如果主体是"),e("code",[s._v("y:= x + 1")]),s._v("，你需要什么前提条件?当你可以调用这个方法时，先决条件说了什么?")]),s._v(" "),e("div",{staticClass:"language-dafny line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("method Abs(x: int) returns (y: int)\n   // Add a precondition here so that the method verifies.\n   // Don't change the postconditions.\n   ensures 0 <= y\n   ensures 0 <= x ==> y == x\n   ensures x < 0 ==> y == -x\n{\n  y:= x + 2;\n}\nmethod Abs2(x: int) returns (y: int)\n   // Add a precondition here so that the method verifies.\n   // Don't change the postconditions.\n   ensures 0 <= y\n   ensures 0 <= x ==> y == x\n   ensures x < 0 ==> y == -x\n{\n  y:= x + 1;\n}\nmethod Abs(x: int) returns (y: int) { ... }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])])]),s._v(" "),e("h2",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")])])])}),[],!1,null,null,null);n.default=t.exports}}]);
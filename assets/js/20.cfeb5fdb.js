(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{506:function(s,e,a){"use strict";a.r(e);var v=a(18),t=Object(v.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"基础学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础学习"}},[s._v("#")]),s._v(" 基础学习")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("页面说明")]),s._v(" "),a("p",[s._v("​此页面说明了 Dafny 中许多最常见的语言功能。 为了让您更快上手，这里的描述被简化了——这个页面不是语言参考。例如，此页面不会涉及模块、迭代器或细化，除非您在 Dafny 中编写更大或更高级的程序，否则您将不需要这些。")])]),s._v(" "),a("p",[s._v("Dafny程序长这样：xxxxx.dfy，Dafny文件是以dfy结尾的。")]),s._v(" "),a("p",[s._v("程序主要包含以下几部分：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("类型("),a("code",[s._v("types")]),s._v(")")])]),s._v(" "),a("li",[a("p",[s._v("方法("),a("code",[s._v("methods")]),s._v(")")])]),s._v(" "),a("li",[a("p",[s._v("函数("),a("code",[s._v("functions")]),s._v(")")])]),s._v(" "),a("li",[a("p",[s._v("用户自定义的类型包括类（"),a("code",[s._v("class")]),s._v("）和归纳数据类型("),a("code",[s._v("inductive class")]),s._v(")")])]),s._v(" "),a("li",[a("p",[s._v("类class本身也包含一组声明("),a("code",[s._v("declarations")]),s._v(")、介绍字段（"),a("code",[s._v("introducing fields")]),s._v("）、方法("),a("code",[s._v("methods")]),s._v(")和函数("),a("code",[s._v("functions")]),s._v(")。")]),s._v(" "),a("p",[s._v("如果有"),a("code",[s._v("main")]),s._v("方法那就从"),a("code",[s._v("main开始验证程序，没有也没关系，")]),s._v("main`不是必须的。")])])]),s._v(" "),a("blockquote",[a("p",[s._v("注释：// 双斜杠 或者  /* xxxxx */")])]),s._v(" "),a("h2",{attrs:{id:"基本定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本定义"}},[s._v("#")]),s._v(" 基本定义")]),s._v(" "),a("p",[s._v("在类中，定义字段x为数据类型"),a("code",[s._v("(types)T")]),s._v("：")]),s._v(" "),a("p",[a("strong",[s._v("var x: T")])]),s._v(" "),a("p",[s._v("注意事项：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("数据类型必需手动申明的，不会被自动推断。")])]),s._v(" "),a("li",[a("p",[s._v("通过在声明前加上关键 "),a("strong",[s._v("ghost")]),s._v(" 可以将该字段声明为幽灵（即用于规范"),a("strong",[s._v("而不是执行")]),s._v("）字段。")])])]),s._v(" "),a("p",[s._v("Dafny 的9种数据类型包括：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("bool")]),s._v("：布尔值")]),s._v(" "),a("li",[a("code",[s._v("int")]),s._v("：无界整数")]),s._v(" "),a("li",[a("code",[s._v("string")]),s._v(": 字符串")]),s._v(" "),a("li",[a("code",[s._v("class/inductive class")]),s._v(": 用户自定义的类和归纳类、")]),s._v(" "),a("li",[a("code",[s._v("set<T>")]),s._v("：不可变的无序集合")]),s._v(" "),a("li",[a("code",[s._v("seq<T>")]),s._v("：不可变的有序集合")]),s._v(" "),a("li",[a("code",[s._v("array<T>")]),s._v("、"),a("code",[s._v("array2<T>")]),s._v("、"),a("code",[s._v("array3<T>")]),s._v(": 多维数组类型")]),s._v(" "),a("li",[a("code",[s._v("object")]),s._v("：所有类型的超类")]),s._v(" "),a("li",[a("code",[s._v("nat")]),s._v("：范围是int一半，非负整数。")])]),s._v(" "),a("h2",{attrs:{id:"方法-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-methods"}},[s._v("#")]),s._v(" 方法 methods")]),s._v(" "),a("p",[s._v("方法的声明如下：")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("method M(a: A, b: B, c: C) r eturns (x: X, y: Y, z: Y)  //输入输出参数\nrequires Pre\t//前置条件\nmodifies Frame  //框架\nensures Post\t//后置条件\ndecreases TerminationMetric //变体函数\n{\nBody //函数体`\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("其中：")]),s._v(" "),a("ul",[a("li",[s._v("a, b, c : 输入参数")]),s._v(" "),a("li",[s._v("x, y, z :  输出参数")]),s._v(" "),a("li",[s._v("Pre: 表示方法 前提条件 的 布尔表达式")]),s._v(" "),a("li",[s._v("Frame: 表示类对象的集合，可以被方法更新(Frame denotes a set of objects whose fields may be updated by the method)")]),s._v(" "),a("li",[s._v("Post: 是方法 后置条件 的 布尔表达式")]),s._v(" "),a("li",[s._v("TerminationMetric: 是方法的变体函数(TerminationMetric is the method’s variant function)")]),s._v(" "),a("li",[s._v("Body: 是实现方法的语句。")])]),s._v(" "),a("h3",{attrs:{id:"框架frame"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#框架frame"}},[s._v("#")]),s._v(" 框架Frame")]),s._v(" "),a("p",[a("strong",[s._v("框架Frame")]),s._v(" 是单个或多个对象组成的表达式的集合。(见下面例子)")]),s._v(" "),a("p",[s._v("框架"),a("code",[s._v("Frame")]),s._v("是由类内对象和类外方法内对象两部分组成。(反正就是一堆类对象的集合）")]),s._v(" "),a("p",[s._v("例如，如果 c 和 d 是类C的对象，那么以下每行意思是一样的。")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("modifies {c, d}")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("modifies {c} + {d}")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("modifies c, {d}")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("modifies c, d")])])])]),s._v(" "),a("p",[s._v("如果方法内啥都没写，那么前置和后置条件默认为真，框架默认为空集。")]),s._v(" "),a("h3",{attrs:{id:"变体函数-variant-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变体函数-variant-function"}},[s._v("#")]),s._v(" "),a("strong",[s._v("变体函数 variant function")])]),s._v(" "),a("p",[s._v("变体函数是一个表达式组成的列表，表示由给定表达式组成的字典元组，后跟隐含的“top”元素。")]),s._v(" "),a("p",[s._v("如果省略没写的话，Dafny 将猜测该方法的变体函数，通常是以该方法的参数列表开头的字典元组。")]),s._v(" "),a("p",[s._v("Dafny IDE 将在工具提示中显示猜测。")]),s._v(" "),a("h3",{attrs:{id:"ghost-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ghost-关键字"}},[s._v("#")]),s._v(" "),a("strong",[s._v("ghost 关键字")])]),s._v(" "),a("p",[s._v("通过在声明之前加上关键字 "),a("code",[s._v("ghost")]),s._v(" 可以将方法声明为 "),a("code",[s._v("ghost")]),s._v("方法（仅规范而不用于执行）。")]),s._v(" "),a("h3",{attrs:{id:"this-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-关键字"}},[s._v("#")]),s._v(" "),a("strong",[s._v("this 关键字")])]),s._v(" "),a("p",[s._v("默认情况下，类中的方法都具有隐式接收器参数 "),a("code",[s._v("this")]),s._v("。可以通过在方法声明之前使用关键字 static 来删除此参数。")]),s._v(" "),a("p",[s._v("类 C 中的静态方法 M 可以由 "),a("code",[s._v("C.M(...)")]),s._v(" 调用。")]),s._v(" "),a("h3",{attrs:{id:"构造函数-构造体-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数-构造体-constructor"}},[s._v("#")]),s._v(" "),a("strong",[s._v("构造函数/构造体 constructor")])]),s._v(" "),a("p",[s._v("在类中，一个方法可以通过将"),a("code",[s._v("method")]),s._v("关键字替换为"),a("code",[s._v("constructor")]),s._v("，申明一个构造方法。")]),s._v(" "),a("p",[s._v("构造函数(构造方法)只能在分配对象时调用（参见示例）")]),s._v(" "),a("p",[s._v("对于包含一个或多个构造函数的类，对象创建必须与对构造函数的调用一起完成。")]),s._v(" "),a("p",[s._v("通常，一个方法当然得有一个名字，但是一个类可以有一个没有名字的构造函数，也就是"),a("strong",[s._v("匿名构造函数")]),s._v(" "),a("code",[s._v("constructor (n:int )")])]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("constructor (n: int) //constructor 匿名构造器` \nmodifies this //框架内对象的构造体 this就是this.frame？`\n\n{\n  Body\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"lemma-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lemma-关键字"}},[s._v("#")]),s._v(" "),a("strong",[s._v("lemma 关键字")])]),s._v(" "),a("p",[s._v("有时，方法("),a("code",[s._v("method")]),s._v(")关键字会被引理("),a("code",[s._v("lemmas")]),s._v(")取代。")]),s._v(" "),a("p",[s._v("通过使用"),a("code",[s._v("lemma")]),s._v("关键字而不是"),a("code",[s._v("method")]),s._v("来声明方法，会让程序更清楚明白")]),s._v(" "),a("p",[s._v("示例：输入三个整数，返回排序后的三个整数")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("method Sort(a: int, b: int, c: int) returns (x: int, y: int, z: int)\nensures x <= y <= z && multiset{a, b, c} == multiset{x, y, z} //后置条件`\n{\nx, y, z := a, b, c;\nif z < y {\ny, z := z, y;\n}\nif y < x {\n    x, y := y, x;\n  }\nif z < y {\n    y, z := z, y;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"函数-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-function"}},[s._v("#")]),s._v(" "),a("strong",[s._v("函数 function")])]),s._v(" "),a("p",[s._v("函数具有以下形式：")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function F(a: A, b: B, c: C): T\nrequires Pre  //前置条件pre\nreads Frame\t//框架frame\nensures Post //后置条件post\ndecreases TerminationMetric //变体函数\n{\n  Body\t//函数体\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ul",[a("li",[a("code",[s._v("a")]),s._v(", "),a("code",[s._v("b")]),s._v(", "),a("code",[s._v("c")]),s._v(" : 输入的形参，")]),s._v(" "),a("li",[a("code",[s._v("T")]),s._v(" : 返回结果的类型，")]),s._v(" "),a("li",[a("code",[s._v("Pre")]),s._v(": 表示函数前提条件的布尔表达式，")]),s._v(" "),a("li",[a("code",[s._v("Frame")]),s._v(": 函数体body需要的对象列表")]),s._v(" "),a("li",[a("code",[s._v("Post")]),s._v(": 函数的后置条件布尔表达式")]),s._v(" "),a("li",[a("code",[s._v("TerminationMetric")]),s._v(": 变体函数")]),s._v(" "),a("li",[a("code",[s._v("Body")]),s._v(": 定义函数的表达式。")])]),s._v(" "),a("p",[s._v("前置条件允许函数是部分的(只用前置就行不用写后置），即前置条件表示函数何时定义，并且 Dafny 会验证函数的每次使用都满足前置条件。")]),s._v(" "),a("p",[s._v("通常不需要后置条件，因为函数在函数体内已经给出了完整的定义。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("p",[s._v("（写个后置加个保险也行，一般后置就是声明该函数的基本属性，比如Factorial这个函数所有数字都≥1）")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Factorial(n: int): int\nrequires 0 <= n //前置条件pre\nensures 1 <= Factorial(n) //后置条件post\n{\n if n == 0 then 1 else Factorial(n-1) * n //函数体body\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("要在后置条件中引用函数的结果，请使用"),a("strong",[s._v("函数本身的名称")]),s._v("，如示例中所示。")]),s._v(" "),a("p",[s._v("默认情况下，函数是"),a("code",[s._v("ghost")]),s._v("，不能从可执行（非"),a("code",[s._v("ghost")]),s._v("）代码中调用。")]),s._v(" "),a("p",[s._v("为了使它从"),a("code",[s._v("ghost")]),s._v("变成非"),a("code",[s._v("ghost")]),s._v("，用关键字"),a("strong",[s._v("function method")]),s._v("替换 function.")]),s._v(" "),a("p",[s._v("一个返回布尔值的函数可以用关键字声明，然后省略冒号和返回类型。")]),s._v(" "),a("p",[s._v("如果函数或方法被声明为类class成员，则它具有隐式接收器参数 this。可以通过在声明之前加上关键字"),a("code",[s._v("static")]),s._v("来删除此参数。")]),s._v(" "),a("p",[s._v("类 C 中的静态函数 F 可以被 "),a("code",[s._v("C.F(...)")]),s._v(" 调用。")]),s._v(" "),a("h3",{attrs:{id:"类-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类-class"}},[s._v("#")]),s._v(" 类 class")]),s._v(" "),a("p",[s._v("一个类定义如下：")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class C {\n // member declarations go here\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("其中类的成员（字段、方法和函数）在花括号内定义（如上所述）。")]),s._v(" "),a("h3",{attrs:{id:"数据类型-datatypes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型-datatypes"}},[s._v("#")]),s._v(" "),a("strong",[s._v("数据类型 datatypes")])]),s._v(" "),a("p",[s._v("归纳数据类型（inductive datatype）是一种类型，其值是用"),a("strong",[s._v("一组固定的构造函数")]),s._v("创建的。")]),s._v(" "),a("p",[s._v("数据类型 为Tree带有构造函数 Leaf 和 Node 的函数声明如下：")]),s._v(" "),a("p",[a("code",[s._v("datatype Tree = Leaf | Node(Tree, int, Tree)//Leaf为无参构造函数 Node为有参")])]),s._v(" "),a("p",[s._v("构造函数由竖线分隔。 无参数构造函数不需要使用括号，如 Leaf 所示。")]),s._v(" "),a("p",[s._v("对于每个构造函数 Ct，数据类型隐式声明了一个布尔成员 Ct?，对于已经使用 Ct 构造函数赋的值的成员，它返回 true。 例如，在代码片段之后：")]),s._v(" "),a("p",[a("code",[s._v("var t0 := Leaf;")]),s._v(" "),a("code",[s._v("var t1 := Node(t0, 5, t0);")])]),s._v(" "),a("p",[s._v("表达式 "),a("code",[s._v("t1.Node")]),s._v("结果为 true, "),a("code",[s._v("t0.Node")]),s._v("结果为false。")]),s._v(" "),a("p",[s._v("如果两个数据类型值是使用相同的构造函数和该构造函数的相同参数创建的，则它们是相等的。因此，对于像 "),a("code",[s._v("Leaf")]),s._v("、"),a("code",[s._v("t.Leaf")]),s._v(" 这样的无参数构造函数，Dafny会给出与 "),a("code",[s._v("t == Leaf")]),s._v(" 相同的结果。(没看懂，不管了)")]),s._v(" "),a("p",[s._v("构造函数可以选择为其任何参数声明析构函数，这是通过为参数引入名称来完成的。 例如，如果 Tree 被声明为：")]),s._v(" "),a("p",[a("code",[s._v("datatype Tree = Leaf | Node(left: Tree, data: int, right: Tree)")])]),s._v(" "),a("p",[s._v("那么"),a("code",[s._v("t1.data == 5")]),s._v("和"),a("code",[s._v("t1.left == t0")]),s._v("在上面的代码片段之后保持不变。(还是没懂)")]),s._v(" "),a("h3",{attrs:{id:"泛型-generics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型-generics"}},[s._v("#")]),s._v(" "),a("strong",[s._v("泛型 Generics")])]),s._v(" "),a("p",[s._v("Dafny同其他语言一样都有泛型，任何类、方法、函数都可以有类型参数，在<>中申明该数据类型T")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class MyMultiset<T> {\n /*...*/\n}\t\t//类泛型\ndatatype Tree<T> = Leaf | Node(Tree<T>, T, Tree<T>) //自定义数据泛型\nmethod Find<T>(key: T, collection: Tree<T>) { //方法泛型`\n /*...*/\n}\n\nfunction IfThenElse<T>(b: bool, x: T, y: T): T {\t//函数泛型\n /*...*/\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"声明-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明-statement"}},[s._v("#")]),s._v(" "),a("strong",[s._v("声明 Statement")])]),s._v(" "),a("p",[s._v("以下是 Dafny 中最常见语句:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var LocalVariables := ExprList;\nLvalues := ExprList;\nassert BoolExpr;\nprint ExprList;\n\nif BoolExpr0 {\n  Stmts0\n} else if BoolExpr1 {\n  Stmts1\n} else {\n  Stmts2\n}\n\n  while BoolExpr\n  invariant Inv\n  modifies Frame\n  decreases Rank\n{\n  Stmts\n}\n match Expr {\n  case Empty => Stmts0\n  case Node(l, d, r) => Stmts1\n}\n break;\n return;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h4",{attrs:{id:"函数-方法的返回值赋值给变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-方法的返回值赋值给变量"}},[s._v("#")]),s._v(" "),a("strong",[s._v("函数/方法的返回值赋值给变量")])]),s._v(" "),a("p",[s._v("(就是将函数/方法返回的值或对象 赋给 一个"),a("strong",[s._v("局部变量")]),s._v("而已）\n"),a("code",[s._v("var LocalVariables := ExprList;")]),s._v("\nvar 语句引入了局部变量。\n"),a("code",[s._v("Lvalues := ExprList;")])]),s._v(" "),a("p",[s._v("赋值语句将 "),a("code",[s._v("ExprList")]),s._v("变量赋给"),a("code",[s._v("Lvalues")]),s._v("。 这些分配是并行执行的（更重要的是，所有必要的读取都发生在写入之前），因此左侧必须表示不同的 L 值。 每个右侧都可以是以下形式之一的表达式或对象创建：")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("new T")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("new T.Init(ExprList)")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("new T(ExprList)")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("new T[SizeExpr]")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("new T[SizeExpr0, SizeExpr1]")])])])]),s._v(" "),a("p",[s._v("第一种形式分配一个类型为 T 的对象。")]),s._v(" "),a("p",[s._v("第二种形式另外在新分配的对象上调用初始化方法或构造函数。")]),s._v(" "),a("p",[s._v("第三种形式是当调用匿名构造函数时的语法。")]),s._v(" "),a("p",[s._v("其他形式分别了T是一维和二维数组对象的匿名构造方法")]),s._v(" "),a("h4",{attrs:{id:"assert-声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assert-声明"}},[s._v("#")]),s._v(" "),a("strong",[s._v("assert 声明")])]),s._v(" "),a("p",[a("code",[s._v("assert")]),s._v(" 语句判断后面的表达式结果是否为真（由验证器验证）。")]),s._v(" "),a("h4",{attrs:{id:"print-打印语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#print-打印语句"}},[s._v("#")]),s._v(" "),a("strong",[s._v("print 打印语句")])]),s._v(" "),a("p",[s._v("打印语句将给定打印表达式的值输出到标准输出。字符串中的字符可以转义；例如，对 "),a("code",[s._v("print")]),s._v(" 语句感兴趣的是 "),a("code",[s._v("\\n")]),s._v(" 表示字符串中的换行符。")]),s._v(" "),a("h4",{attrs:{id:"if-选择语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-选择语句"}},[s._v("#")]),s._v(" "),a("strong",[s._v("if 选择语句")])]),s._v(" "),a("p",[s._v("if 语句是通常的语句。该示例显示了使用 else if 将备选方案串在一起。像往常一样，else 分支是可选的。")]),s._v(" "),a("h4",{attrs:{id:"while-循环语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-循环语句"}},[s._v("#")]),s._v(" "),a("strong",[s._v("while 循环语句")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("while")]),s._v(" 语句是通常的循环，其中")]),s._v(" "),a("li",[a("code",[s._v("invariant")]),s._v(" 声明给出了一个循环变量")]),s._v(" "),a("li",[a("code",[s._v("modifies")]),s._v("语句限制了循环的框架")]),s._v(" "),a("li",[a("code",[s._v("reduction")]),s._v("语句从循环中引入了一个变体函数。")])]),s._v(" "),a("p",[s._v("默认情况下，循环不变式为真，修改框与封闭上下文中的相同（通常是封闭方法的修改子句），并从循环保护中猜测变体函数。(真没看懂）")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("while BoolExpr //布尔表达式-循环条件`\n  invariant Inv\n  modifies Frame\n  decreases Rank\n\n{\n  Statements\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"match语句-阿巴阿巴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#match语句-阿巴阿巴"}},[s._v("#")]),s._v(" "),a("strong",[s._v("match语句(阿巴阿巴)")])]),s._v(" "),a("p",[s._v("match 语句计算源 Expr（一个类型为归纳数据类型的表达式），然后执行与用于创建源数据类型值的构造函数相对应的 case，将构造函数参数绑定到给定的名称。如果不需要它们来标记 match 语句的结尾，则可以省略包围 case 的花括号。")]),s._v(" "),a("h4",{attrs:{id:"break语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#break语句"}},[s._v("#")]),s._v(" "),a("strong",[s._v("break语句")])]),s._v(" "),a("p",[s._v("break 语句可用于退出循环，而 return 语句可用于退出方法。")]),s._v(" "),a("h2",{attrs:{id:"表达式-expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式-expressions"}},[s._v("#")]),s._v(" "),a("strong",[s._v("表达式 Expressions")])]),s._v(" "),a("p",[s._v("Dafny 中的表达式与类 Java 语言中的表达式非常相似。以下是一些值得注意的差异。")]),s._v(" "),a("h3",{attrs:{id:"基本运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本运算符"}},[s._v("#")]),s._v(" "),a("strong",[s._v("基本运算符")])]),s._v(" "),a("p",[s._v("除了短路布尔运算符 "),a("code",[s._v("&&")]),s._v(" (and) 和 "),a("code",[s._v("||")]),s._v(" （或），Dafny 有一个短路蕴涵运算符 "),a("code",[s._v("==>")]),s._v(" 和一个 "),a("code",[s._v("if-and-only-if")]),s._v(" 运算符 "),a("code",[s._v("<==>")]),s._v("。")]),s._v(" "),a("p",[s._v("正如它们的宽度所暗示的那样，"),a("code",[s._v("<==>")]),s._v(" 具有比 "),a("code",[s._v("==>")]),s._v("低的绑定力，而后者又比 "),a("code",[s._v("&&")]),s._v(" 和 "),a("code",[s._v("||")]),s._v("具有更低的绑定力。")]),s._v(" "),a("p",[s._v("Dafny 比较表达式可以是"),a("strong",[s._v("链式")]),s._v("的，这意味着"),a("strong",[s._v("相同方向")]),s._v("的比较可以串在一起。例如，"),a("code",[s._v("0 <= i < j <= a.Length == N")])]),s._v(" "),a("p",[s._v("含义相同： "),a("code",[s._v("0 <= i && i < j && j <= a.Length && a.Length == N")])]),s._v(" "),a("p",[s._v("请注意，布尔相等可以使用 "),a("code",[s._v("==")]),s._v(" 和 "),a("code",[s._v("<==>")]),s._v(" 来表示。这些之间有两个区别。首先，"),a("code",[s._v("==")]),s._v(" 比 "),a("code",[s._v("<==>")]),s._v(" 具有更高的约束力。其次，"),a("code",[s._v("==")]),s._v(" 是链接，而 "),a("code",[s._v("<==>")]),s._v(" 是关联的。也就是说，"),a("code",[s._v("a == b == c")]),s._v(" 与 "),a("code",[s._v("a == b && b == c")]),s._v(" 相同，而 "),a("code",[s._v("a <==> b <==> c")]),s._v(" 与 "),a("code",[s._v("a <==> (b <== > c)")]),s._v("，这也与 "),a("code",[s._v("(a <==> b) <==> c")]),s._v(" 相同。")]),s._v(" "),a("h4",{attrs:{id:"整数运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数运算"}},[s._v("#")]),s._v(" "),a("strong",[s._v("整数运算")])]),s._v(" "),a("p",[s._v("对整数的运算是常用的运算，除了 "),a("code",[s._v("/")]),s._v("（整数除法）和 "),a("code",[s._v("%")]),s._v("（整数模）遵循欧几里德定义，这意味着 "),a("code",[s._v("%")]),s._v(" 总是导致非负数。 （因此，当 "),a("code",[s._v("/")]),s._v(" 或 "),a("code",[s._v("%")]),s._v(" 的第一个参数为负数时，结果与您在 C、Java 或 C# 中得到的结果不同，请参阅 http://en.wikipedia.org/wiki/Modulo_operation。）")]),s._v(" "),a("h4",{attrs:{id:"离-散-数-学"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#离-散-数-学"}},[s._v("#")]),s._v(" 离 散 数 学")]),s._v(" "),a("p",[s._v("Dafny 表达式包括全称量词和存在量词，其形式为："),a("code",[s._v("forall x :: Expr")]),s._v(" 和"),a("code",[s._v("exists x :: Expr")]),s._v("，其中"),a("code",[s._v("x")]),s._v("是绑定变量（可以使用显式类型声明，如"),a("code",[s._v("x: T")]),s._v(" 中所示），而"),a("code",[s._v("Expr")]),s._v(" 是一个布尔表达式。")]),s._v(" "),a("h4",{attrs:{id:"集合运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合运算"}},[s._v("#")]),s._v(" 集合运算")]),s._v(" "),a("p",[s._v("集合上的操作包括"),a("code",[s._v("+")]),s._v("（并）、"),a("code",[s._v("*")]),s._v("（交）和"),a("code",[s._v("-")]),s._v("（集合差）、集合比较运算符"),a("code",[s._v("<")]),s._v("（真子集）、"),a("code",[s._v("<=")]),s._v("（子集）、它们的对偶"),a("code",[s._v(">")]),s._v(" 和"),a("code",[s._v(">=")]),s._v("，以及"),a("code",[s._v("!!")]),s._v(" （脱节）。 S 中的表达式 "),a("code",[s._v("x")]),s._v(" 表示 "),a("code",[s._v("x")]),s._v(" 是集合 "),a("code",[s._v("S")]),s._v(" 的成员，而 "),a("code",[s._v("x !in S")]),s._v(" 是一个方便的写法 "),a("code",[s._v("!(x in S)")]),s._v("。")]),s._v(" "),a("p",[s._v("要从某些元素创建一个集合，请将它们括在花括号中。例如，{x,y} 是由 x 和 y 组成的集合（如果 x == y，则为单例集），{x} 是包含 x 的单例集，{} 是空集。")]),s._v(" "),a("h4",{attrs:{id:"序列运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列运算"}},[s._v("#")]),s._v(" "),a("strong",[s._v("序列运算")])]),s._v(" "),a("p",[s._v("对序列的操作包括 +（连接）和比较运算符 "),a("code",[s._v("<")]),s._v("（适当的前缀）和 "),a("code",[s._v("<=")]),s._v("（前缀）。成员资格可以像集合一样检查："),a("code",[s._v("x in S")]),s._v(" 和 "),a("code",[s._v("x !in S")]),s._v("。序列 S 的长度表示为 |S|，并且此类序列的元素具有从 0 到小于 |S| 的索引。表达式 S[j] 表示序列 S 的索引 j 处的元素。表达式 "),a("code",[s._v("S[m..n]")]),s._v("，其中 "),a("code",[s._v("0 <= m <= n <= |S|")]),s._v("，返回一个序列，其元素是S 从索引 m 开始（即，从 S[m]、S[m+1]、……直到但不包括 S[n]）。表达式 S[m..]; （通常称为“drop m”)与 "),a("code",[s._v("S[m..|S|]")]),s._v(" 相同；也就是说，它返回除 S 的前 m 个元素之外的所有元素的序列。表达式 "),a("code",[s._v("S[..n]")]),s._v(" ; （通常称为“take n”）与 S[0..n] 相同，即它返回由 S 的前 n 个元素组成的序列。")]),s._v(" "),a("p",[s._v("如果 j 是序列 S 的有效索引，则表达式 "),a("code",[s._v("S[j := x]")]),s._v(";是类似于 S 的序列，只是它在索引 j 处有 x。")]),s._v(" "),a("p",[s._v("最后，要从一些元素组成一个序列，请将它们括在方括号中。例如，[x,y] 是由两个元素 x 和 y 组成的序列，使得 "),a("code",[s._v("[x,y][0] == x 和 [x,y][1] == y")]),s._v("，[x] 是唯一元素是 x 的单例序列，[] 是空序列。")]),s._v(" "),a("h4",{attrs:{id:"if-then-else判断语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-then-else判断语句"}},[s._v("#")]),s._v(" "),a("strong",[s._v("if-then-else判断语句")])]),s._v(" "),a("p",[a("code",[s._v("if-then-else")]),s._v(" 表达式的形式为："),a("code",[s._v("if BoolExpr then Expr0 else Expr1")])]),s._v(" "),a("p",[s._v("其中 "),a("code",[s._v("Expr0")]),s._v(" 和 "),a("code",[s._v("Expr1")]),s._v(" 是相同类型的任何表达式。与 "),a("code",[s._v("if")]),s._v(" 语句不同，"),a("code",[s._v("if-then-else")]),s._v(" 表达式使用 "),a("code",[s._v("then")]),s._v(" 关键字，并且必须包含显式的 else 分支。")]),s._v(" "),a("h4",{attrs:{id:"match匹配表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#match匹配表达式"}},[s._v("#")]),s._v(" "),a("strong",[s._v("match匹配表达式")])]),s._v(" "),a("p",[s._v("match 表达式类似于 match 语句并具有以下形式：")]),s._v(" "),a("p",[a("code",[s._v("match Expr { case Empty => Expr0 case Node(l, d, r) => Expr1 }")])]),s._v(" "),a("p",[s._v("大括号可用于标记匹配表达式的结束，但最常见的是不需要这样做，然后可以省略大括号。")])])}),[],!1,null,null,null);e.default=t.exports}}]);
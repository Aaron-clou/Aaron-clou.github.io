(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{519:function(n,e,s){"use strict";s.r(e);var a=s(18),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"线性查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性查询"}},[n._v("#")]),n._v(" 线性查询")]),n._v(" "),s("p",[n._v("输入一个整型数组和一个整数"),s("code",[n._v("key")]),n._v("，返回该数组中等于"),s("code",[n._v("key")]),n._v("的元素所在的位置，显然数组的下标从0开始。")]),n._v(" "),s("p",[n._v("算法上，直接遍历该数组，判断当前元素是否等于"),s("code",[n._v("key")]),n._v("即可，若等于则程序返回，所得的"),s("code",[n._v("n")]),n._v("就是要求的位置，若不等于则往后寻找。")]),n._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("method LinearSearch(a: array<int>, key: int) returns (n: nat)   \nensures 0 <= n <= a.Length\nensures n == a.Length || a[n] == key\n{\n    n := 0;\n    while n < a.Length\n    invariant n <= a.Length\n    decreases a.Length - n      //需保证该表达式递减且不小于0\n    {\n        if a[n] == key \n        {\n            return;\n        }\n        n := n + 1;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("容易想到，"),s("code",[n._v("n")]),n._v("的数值是大于等于0的整数，且不能超过数组的长度，否则产生越界问题，所以要有"),s("code",[n._v("ensures 0 <= n <= a.Length")]),n._v("。")]),n._v(" "),s("p",[n._v("其次，程序返回的条件要么是找到了对应的位置，查找成功；要么是"),s("code",[n._v("n")]),n._v("的值达到了数组的长度还没有找到相应元素，查找失败。因此要有"),s("code",[n._v("ensures n == a.Length || a[n] == key")])]),n._v(" "),s("p",[n._v("函数主体部分，我们在遍历时使用的是"),s("code",[n._v("while")]),n._v("语句，这里涉及到循环不变体"),s("code",[n._v("invariant")]),n._v("的使用，Dafny在执行循环时每次都会判断循环不变体是否满足条件，以判断循环内是否有错误，因此我们加上"),s("code",[n._v("invariant n <= a.Length")]),n._v("是更严谨的做法。同时，由于每次循环后n增大，需要加上"),s("code",[n._v("decreases a.Length - n")]),n._v("保证"),s("code",[n._v("数组长度 - n")]),n._v("是减小的，同时不会比0小。")])])}),[],!1,null,null,null);e.default=t.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{548:function(s,e,a){"use strict";a.r(e);var n=a(18),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"在集合上迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在集合上迭代"}},[s._v("#")]),s._v(" 在集合上迭代")]),s._v(" "),a("blockquote",[a("p",[a("em",[s._v("K. Rustan M. Leino Manuscript KRML 275, 17 February 2020")])])]),s._v(" "),a("p",[a("strong",[s._v("摘要")]),s._v(" 以确定的方式处理集合或映射的内容需要一些工作。通过一个典型的例子，本文说明了一种方法。")]),s._v(" "),a("p",[s._v("数学集合类型包括集合、多集、序列和映射。这些对于规范和程序都是必不可少的。在这样的集合的元素上定义函数比人们想象的要困难(或者至少需要更多的劳动)。在本文中，我开发了一个将映射转换为成对序列的示例的程序和证明。该工作的核心部分涉及获得一个可编译函数，该函数以可预测的顺序返回集合的元素。")]),s._v(" "),a("p",[s._v("本文的目标是生成可编译函数。")]),s._v(" "),a("h2",{attrs:{id:"_0-映射到序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-映射到序列"}},[s._v("#")]),s._v(" 0. 映射到序列")]),s._v(" "),a("p",[s._v("映射是键值对的集合，其中没有键重复。我们可以将一个map转换为一个序列，方法是将它的键放入一个序列中，然后通过获取每个键的值来生成对:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function method MapToSequence<A,B>(m: map<A,B>): seq<(A,B)> {\n  var keys := SetToSequence(m.Keys);\n  seq(|keys|, i requires 0 <= i < |keys| => (keys[i], m[keys[i]]))\n}\n\nfunction method SetToSequence<A>(s: set<A>): seq<A>\n  ensures var q := SetToSequence(s);\n    forall i :: 0 <= i < |q| ==> q[i] in s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("对于map "),a("code",[s._v("m")]),s._v("，表达式"),a("code",[s._v("m。“Keys”表示一组钥匙。函数")]),s._v(" MapToSequence "),a("code",[s._v("将这组键传递给")]),s._v(" SetToSequence `以获得这些键的序列。然后，序列构造函数")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("seq(n, f)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("生成一个长度为"),a("code",[s._v("n")]),s._v("的序列，其中索引"),a("code",[s._v("i")]),s._v("的元素被指定为"),a("code",[s._v("f(i)")]),s._v("。在"),a("code",[s._v("MapToSequence")]),s._v("中，序列推导式的第二个参数是由lambda表达式给出的部分函数")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("i requires 0 <= i < |keys| => (keys[i], m[keys[i]])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对于给定范围内的索引，该函数返回由键"),a("code",[s._v("keys[i]")]),s._v("和对应的值"),a("code",[s._v("m")]),s._v("组成的对。必须在函数的前提条件中给出"),a("code",[s._v("i")]),s._v("的范围，否则表达式"),a("code",[s._v("keys[i]")]),s._v("将导致下标错误。")]),s._v(" "),a("p",[s._v("为了避免表达式"),a("code",[s._v("m[keys[i]]")]),s._v("中的key-is-not-in-map错误，我们需要知道"),a("code",[s._v("keys[i]")]),s._v("是"),a("code",[s._v("m")]),s._v("的一个键。这需要我们知道他们之间的联系。key "),a("code",[s._v("和")]),s._v(" Keys "),a("code",[s._v("，这是在(尚未实现)函数")]),s._v(" SetToSequence `的后置条件中声明的。")]),s._v(" "),a("p",[s._v("我们现在需要实现"),a("code",[s._v("SetToSequence")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"_1-虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-虚函数"}},[s._v("#")]),s._v(" 1. 虚函数")]),s._v(" "),a("p",[s._v("让我们从简单的开始。我们将"),a("code",[s._v("SetToSequence")]),s._v("定义为一个虚函数。定义是递归的。当给定的集合非空时，该函数使用choose操作符，也就是let-such-that操作符，并写入"),a("code",[s._v(":|")]),s._v("，从集合中选取一个元素。")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function SetToSequence<A>(s: set<A>): seq<A>\n  ensures var q := SetToSequence(s);\n    forall i :: 0 <= i < |q| ==> q[i] in s\n{\n  if s == {} then [] else\n    var x :| x in s;\n    [x] + SetToSequence(s - {x})\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("那不算太坏")]),s._v(" "),a("h2",{attrs:{id:"_2-编译函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-编译函数"}},[s._v("#")]),s._v(" 2. 编译函数")]),s._v(" "),a("p",[s._v("为了使我们上面写的"),a("code",[s._v("SetToSequence")]),s._v("可编译，我们将关键字"),a("code",[s._v("function")]),s._v("更改为关键字短语"),a("code",[s._v("function method")]),s._v("。这将生成一个错误消息:")]),s._v(" "),a("p",[s._v("如果要使>可编译，则let-such-that表达式的值必须唯一确定")]),s._v(" "),a("p",[s._v("在Dafny中，表达式和函数(其主体是表达式)必须是确定性的。这意味着")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var x :| x in s;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当给定相同的s时，总是需要为"),a("code",[s._v("x")]),s._v("取相同的值。这将在运行时进行计算，因此Dafny将这个负担交给了程序员(参见["),a("a",{attrs:{href:"http://leino.science/papers/krml275.html#lpar-20:compiling_hilberts_epsilon_operator",target:"_blank",rel:"noopener noreferrer"}},[s._v("0"),a("OutboundLink")],1),s._v("])。")]),s._v(" "),a("p",[s._v("一种方法是强化条件"),a("code",[s._v("x in s")]),s._v("，让它总是从"),a("code",[s._v("s")]),s._v("中选取"),a("code",[s._v("最小")]),s._v("值。这将唯一地确定let-such-that表达式的值。但是“最小值”是什么意思呢?我们从已知最小值的整数开始，然后求一般情况。")]),s._v(" "),a("h2",{attrs:{id:"_3-选择最小的整数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-选择最小的整数"}},[s._v("#")]),s._v(" 3. 选择最小的整数")]),s._v(" "),a("p",[s._v("现在，我们只关注整数集。这让我们加强了let-such-that表达式中的条件，从而唯一地讨论集合中的最小元素:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function method SetToSequence(s: set<int>): seq<int>\n  ensures var q := SetToSequence(s);\n    forall i :: 0 <= i < |q| ==> q[i] in s\n{\n  if s == {} then [] else\n    var x :| x in s && forall y :: y in s ==> x <= y;\n    [x] + SetToSequence(s - {x})\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("“唯一确定的”需求现在得到了满足。然而，由于我们新的such-that谓词更加复杂，验证器提出了一个不同的抱怨:")]),s._v(" "),a("blockquote",[a("p",[s._v("不能建立满足该谓词的LHS值的存在性")])]),s._v(" "),a("p",[s._v("对我们来说，一个非空集合有一个最小元素似乎很清楚，但我们需要说服验证者。让我们用一个单独的引理来做这个，我们声明如下:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("lemma ThereIsAMinimum(s: set<int>)\n  requires s != {}\n  ensures exists x :: x in s && forall y :: y in s ==> x <= y\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("我们将在"),a("code",[s._v("SetToSequence")]),s._v("中的let-such表达式之前插入对这个引理的调用。这样，函数体就变成了")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if s == {} then [] else\n  ThereIsAMinimum(s);\n  var x :| x in s && forall y :: y in s ==> x <= y;\n  [x] + SetToSequence(s - {x})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_4-证明存在最小值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-证明存在最小值"}},[s._v("#")]),s._v(" 4. 证明存在最小值")]),s._v(" "),a("p",[s._v("我们的下一个任务是证明“存在最小”引理。下面是一个注释证明:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("lemma ThereIsAMinimum(s: set<int>)\n  requires s != {}\n  ensures exists x :: x in s && forall y :: y in s ==> x <= y\n{\n  var x :| x in s;\n  if s == {x} {\n    // obviously, x is the minimum\n  } else {\n    // The minimum in s might be x, or it might be the minimum\n    // in s - {x}. If we knew the minimum of the latter, then\n    // we could compare the two.\n    // Let`s start by giving a name to the smaller set:\n    var s` := s - {x};\n    // So, s is the union of s` and {x}:\n    assert s == s` + {x};\n    // The following lemma call establishes that there is a\n    // minimum in s`.\n    ThereIsAMinimum(s`);\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("证明从从s中选取任意元素x开始。如果它是s中唯一的元素，它就是最小值。否则，这个证明引出了"),a("code",[s._v("s")]),s._v("是"),a("code",[s._v("s")]),s._v(" + {x} `的事实。对引理的递归调用，通过它的后置条件，告诉我们在s中存在一个最小元素。验证器会自动提供剩余的验证胶，这样我们就完成了。")]),s._v(" "),a("p",[s._v("证明中的断言可能看起来很愚蠢。我们只是定义s为s - {x}。因为"),a("code",[s._v("x")]),s._v("在"),a("code",[s._v("s")]),s._v("中，所以属性"),a("code",[s._v("s == s")]),s._v(" + {x} "),a("code",[s._v("紧跟其后。是的,确实。验证者可以很容易地确认这一点，但验证者没有足够的创造力来意识到这是一个值得了解的好属性。这是处理集合时的典型情况。例如，如果你正在处理一个序列")]),s._v(" q "),a("code",[s._v("，你可以单独考虑")]),s._v(" q[0] "),a("code",[s._v("，并对")]),s._v(" q[1..] `进行递归调用。如果是这样，您可能需要手动供应")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("assert [q[0]] + q[1..] == q;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("与set属性一样，验证器很容易证明这个属性，但它自己不会想到它。")]),s._v(" "),a("p",[s._v("这个证明的寓意是，当你将一个集合分割成更小的块，你想要分别进行推理时，断言整个集合等于更小块的组合是一个好主意。")]),s._v(" "),a("h2",{attrs:{id:"_5-总命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-总命令"}},[s._v("#")]),s._v(" 5. 总命令")]),s._v(" "),a("p",[s._v("上面对整数集的限制很好用，因为整数集的最小值很容易定义，并且给出唯一的元素。要对其他类型应用相同的技巧，我们还需要能够为这些类型定义一个“最小值”。为了定义最小值，你需要一个“总顺序”。让我们回顾一下这是什么意思。")]),s._v(" "),a("p",[s._v("类型"),a("code",[s._v("A")]),s._v("上的关系是一个函数"),a("code",[s._v("(A, A) -> bool")]),s._v("。当满足以下三个条件时，这种关系称为“R”，称为“偏序”:")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("R")]),s._v("是自反的，也就是说，\n"),a("code",[s._v("forall a:: R(a, a)")]),s._v("\n-“R”是反对称的，即\n"),a("code",[s._v("forall a, b:: R(a, b) && R(b, a) ==> a == b")]),s._v("\n-“R”是可传递的，即\n的原则,a, b, c:: R (a, b) & & (b, c) = = > R (a, c) `")])]),s._v(" "),a("p",[s._v("A "),a("em",[s._v("total order")]),s._v("是另外满足以下条件的部分order:")]),s._v(" "),a("p",[s._v("-“R”是连接(紧密连接)，即:\n"),a("code",[s._v("forall a, b:: R(a, b) || R(b, a)")])]),s._v(" "),a("p",[s._v("请注意，连接意味着自反性。")]),s._v(" "),a("p",[s._v("下面是一个谓词，它表示一个给定的关系是否是一个完整的顺序:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("predicate IsTotalOrder<A(!new)>(R: (A, A) -> bool) {\n  // connexity\n  && (forall a, b :: R(a, b) || R(b, a))\n  // antisymmetry\n  && (forall a, b :: R(a, b) && R(b, a) ==> a == b)\n  // transitivity\n  && (forall a, b, c :: R(a, b) && R(b, c) ==> R(a, c))\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("Dafny不允许我们在谓词中写这些量词，除非它对类型“a”有更多的了解。如果"),a("code",[s._v("A")]),s._v("是一个类类型，那么在Dafny中的"),a("code",[s._v("forall")]),s._v("意味着量化类"),a("code",[s._v("A")]),s._v("的"),a("em",[s._v("分配")]),s._v("实例。这意味着分配另一个“A”实例可能会导致“IsTotalOrder(R)”更改值。为了防止这种情况的发生，Dafny坚持认为，无限制的量化，如“IsTotalOrder”中的那些，应该在不依赖于分配状态的类型上。我们用"),a("em",[s._v("类型特征")]),s._v(" "),a("code",[s._v("(!new)")]),s._v("来表示，它被写成类型参数声明中类型名的后缀。")]),s._v(" "),a("h2",{attrs:{id:"_6-通用集合为序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-通用集合为序列"}},[s._v("#")]),s._v(" 6. 通用集合为序列")]),s._v(" "),a("p",[s._v("我们修改了"),a("code",[s._v("SetToSequence")]),s._v("，也取了一个关系"),a("code",[s._v("R")]),s._v("，我们要求它是一个完整的顺序。在此过程中，我们将整数的总顺序"),a("code",[s._v("<=")]),s._v("更改为"),a("code",[s._v("R")]),s._v("，并将"),a("code",[s._v("R")]),s._v("作为参数添加到"),a("code",[s._v("thereisminimum")]),s._v("引理中:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function method SetToSequence<A(!new)>(s: set<A>, R: (A, A) -> bool): seq<A>\n  requires IsTotalOrder(R)\n  ensures var q := SetToSequence(s, R);\n    forall i :: 0 <= i < |q| ==> q[i] in s\n{\n  if s == {} then [] else\n    ThereIsAMinimum(s, R);\n    var x :| x in s && forall y :: y in s ==> R(x, y);\n    [x] + SetToSequence(s - {x}, R)\n}\n\nlemma ThereIsAMinimum<A(!new)>(s: set<A>, R: (A, A) -> bool)\n  requires s != {} && IsTotalOrder(R)\n  ensures exists x :: x in s && forall y :: y in s ==> R(x, y)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("修改后的“SetToSequence”引理进行验证。我们剩下的任务是证明这个引理。")]),s._v(" "),a("h2",{attrs:{id:"_7-总命令有最小值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-总命令有最小值"}},[s._v("#")]),s._v(" 7. 总命令有最小值")]),s._v(" "),a("p",[s._v("我们开始证明泛型的"),a("code",[s._v("thereisminimum")]),s._v("，类似于上面对整数集的证明:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{\n  var x :| x in s;\n  if s == {x} {  // error: postcondition might not hold on this return path\n  } else {\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("以前“显而易见”的情况这次却给验证者带来了麻烦。让我们帮助它。我们的证明义务是证明s中的某个元素和s中的任何一个元素一样小。如果"),a("code",[s._v("s")]),s._v("是单集"),a("code",[s._v("{x}")]),s._v("，那么我们要寻找的元素只能是"),a("code",[s._v("x")]),s._v("。现在，如果y是s中的元素，我们需要证明R(x, y)因为"),a("code",[s._v("s")]),s._v("是一个单例，所以我们有"),a("code",[s._v("y == x")]),s._v("，然后"),a("code",[s._v("R(x, y)")]),s._v("紧跟着连通性。验证者丢失了这两个事实中的一个。让我们对第一个事实添加一个断言:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  if s == {x} {\n    assert forall y :: y in s ==> x == y;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("啊，是的，验证者可以证明这个断言，然后可以进行剩下的证明。")]),s._v(" "),a("p",[s._v("再来看看非单例情况。我们将像上面的整数集证明一样开始:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  } else {\n    var s` := s - {x};\n    assert s == s` + {x};\n    ThereIsAMinimum(s`, R);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("验证者抱怨引理的后置条件可能不成立，所以我们将给验证者更多的帮助。")]),s._v(" "),a("p",[s._v("对引理的递归调用(顺便说一下，这个引理被称为“归纳假说”)表明，在s中存在一个最小值。让我们给它一个名字，我们通过引入一个局部变量来约束它的值，以满足引理的后置条件存在量词中的条件:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    var z :| z in s` && forall y :: y in s` ==> R(z, y);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为"),a("code",[s._v("s")]),s._v("是"),a("code",[s._v("s")]),s._v(" + {x} "),a("code",[s._v("，所以我们要寻找的最小值要么是")]),s._v(" z "),a("code",[s._v("，要么是")]),s._v(" x `。让我们分别对待这些情况。我们用“if”语句来实现这一点。由于这两种情况是如此对称，我认为使用Dafny的if-case语句看起来很好:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    // by connexity, one of the two cases below applies\n    if\n    case R(z, x) =>\n      // prove z is the minimum not just of s`, but of s\n      // ...\n    case R(x, z) =>\n      // prove x is the minimum of s\n      // ...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("我们先来看R(z, x)的情况。最难的部分可能是后置条件中的量词，所以让我们从它开始。要证明一个全称量词，可以使用“forall”语句。")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      forall y | y in s\n        ensures R(z, y)\n      {\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从"),a("code",[s._v("y in s")]),s._v("，我们知道要么y是"),a("code",[s._v("x")]),s._v("要么y是"),a("code",[s._v("s")]),s._v("。对于前者，证明是基于守卫的R(z, x)。对于后者，证明来自于我们用来引入“z”的这种条件下的量化。不知何故，验证者没有注意到这一点，所以让我们帮助它。我们从这里开始:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("        assert x == y || y in s`;\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("你瞧!这就是验证者所需要的。")]),s._v(" "),a("p",[s._v("在"),a("code",[s._v("R(x, z)")]),s._v("的情况下，我们将给出类似的"),a("code",[s._v("forall")]),s._v("命题来证明引理的后置条件中的量词:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      forall y | y in s\n        ensures R(x, y)\n      {\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果"),a("code",[s._v("y")]),s._v("是"),a("code",[s._v("x")]),s._v("，则"),a("code",[s._v("R(x, y)")]),s._v("紧跟在连通性后面。另一方面，如果y在s中，那么引入z的那个条件告诉我们R(z, y)所以我们通过传递性得到R(x, y)你可以用不同的方式添加这些提示，使证明更加有效。这里有一种方法:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("        assert y in s` ==> R(z, y);\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("最后一个评论。当我们证明整数集的最小值时，我认为包含这样的断言通常是有用的:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    assert s == s` + {x};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我也把它包含在通用的“thereisminimum”中。但事实证明，它实际上并不需要(因为我们在两种情况下提供的额外提示中弥补了它)，所以如果你愿意，你可以删除它。")]),s._v(" "),a("h2",{attrs:{id:"_8-返回映射到序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-返回映射到序列"}},[s._v("#")]),s._v(" 8. 返回映射到序列")]),s._v(" "),a("p",[s._v("我们做到了!")]),s._v(" "),a("p",[s._v("在我们宣布成功之前，让我们确保我们能使用我们的函数和引理来写MapToSequence函数，我们要写的函数。下面是通用版本，它需要一个给定的总顺序:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function method MapToSequence<A(!new),B>(m: map<A,B>, R: (A, A) -> bool): seq<(A,B)>\n  requires IsTotalOrder(R)\n{\n  var keys := SetToSequence(m.Keys, (a,a`) => R(a, a`));\n  seq(|keys|, i requires 0 <= i < |keys| => (keys[i], m[keys[i]]))\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("我们也可以将它专门化为整数集:")]),s._v(" "),a("div",{staticClass:"language-dafny line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function method IntMapToSequence<B>(m: map<int,B>): seq<(int,B)> {\n  MapToSequence(m, (a, a`) => a <= a`)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("我们做到了")]),s._v(" "),a("h2",{attrs:{id:"_9-结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-结论"}},[s._v("#")]),s._v(" 9. 结论")]),s._v(" "),a("p",[s._v("我希望这段漫长的旅程向您展示了在Dafny处理藏品的一两件事。")]),s._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),a("p",[s._v("[0]K. Rustan M. Leino. Compiling Hilbert`s epsilon operator. In Ansgar Fehnker, Annabelle McIver, Geoff Sutcliffe, and Andrei Voronkov, editors, "),a("em",[s._v("LPAR-20. 20th International Conferences on Logic for Programming, Artificial Intelligence and Reasoning — Short Presentations")]),s._v(", volume 35 of "),a("em",[s._v("EPiC Series in Computing")]),s._v(", pages 106–118. EasyChair, 2015. "),a("a",{attrs:{href:"http://www.bing.com/search?q=Compiling+Hilbert+epsilon+operator+++Rustan+Leino+",target:"_blank",rel:"noopener noreferrer"}},[s._v("🔎"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=t.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{557:function(e,n,s){"use strict";s.r(n);var a=s(18),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dafny Documentation"),s("OutboundLink")],1)]),e._v(" "),s("h1",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),s("p",[e._v("Dafny Style Guide")]),e._v(" "),s("ul",[s("li",[e._v("Naming Convention\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#method-prefix",target:"_blank",rel:"noopener noreferrer"}},[e._v("Method Prefix"),s("OutboundLink")],1)])])]),e._v(" "),s("li",[e._v("Code Layout\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#braces",target:"_blank",rel:"noopener noreferrer"}},[e._v("Braces"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#imports",target:"_blank",rel:"noopener noreferrer"}},[e._v("Imports"),s("OutboundLink")],1)])])]),e._v(" "),s("li",[e._v("Indentation and Line Breaks\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#tabs-or-spaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tabs or Spaces?"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#maximum-character-limit",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maximum Character Limit"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#newlines",target:"_blank",rel:"noopener noreferrer"}},[e._v("Newlines"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#functions-methods-predicates-and-lemmas",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functions, Methods, Predicates, and Lemmas"),s("OutboundLink")],1)])])]),e._v(" "),s("li",[e._v("Things to Avoid\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#parentheses",target:"_blank",rel:"noopener noreferrer"}},[e._v("Parentheses"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("Whitespace\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#type-declaration",target:"_blank",rel:"noopener noreferrer"}},[e._v("Type Declaration"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#function-method-predicate-and-lemma-declaration",target:"_blank",rel:"noopener noreferrer"}},[e._v("Function, Method, Predicate, and Lemma Declaration"),s("OutboundLink")],1)])])])])]),e._v(" "),s("li",[e._v("Recommendations\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#externs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Externs"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dafny-lang.github.io/dafny/StyleGuide/Style-Guide#things-to-consider",target:"_blank",rel:"noopener noreferrer"}},[e._v("Things to Consider"),s("OutboundLink")],1)])])])]),e._v(" "),s("p",[e._v("This style guide provides coding conventions for the Dafny code.")]),e._v(" "),s("p",[s("em",[e._v("This documentation is still in progress. Please feel free to add more suggestions.")])]),e._v(" "),s("h3",{attrs:{id:"naming-convention"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#naming-convention"}},[e._v("#")]),e._v(" Naming Convention")]),e._v(" "),s("p",[e._v("Any "),s("strong",[e._v("variables")]),e._v(" are named with "),s("code",[e._v("camelCase")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var minValue := 1;\nvar cipherMessage := "Hello World";\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("Any "),s("strong",[e._v("lemmas")]),e._v(", "),s("strong",[e._v("predicates")]),e._v(", "),s("strong",[e._v("functions")]),e._v(", "),s("strong",[e._v("methods")]),e._v(", "),s("strong",[e._v("classes")]),e._v(", "),s("strong",[e._v("modules")]),e._v(", "),s("strong",[e._v("datatypes")]),e._v(", and "),s("strong",[e._v("newtypes")]),e._v(" are named with "),s("code",[e._v("PascalCase")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("method FindIndex(arr: seq<int>, k: int)\n    ...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("Any static or global "),s("strong",[e._v("constants")]),e._v(" are named with "),s("code",[e._v("UPPERCASE_WITH_UNDERSCORES")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("static const MONTHS_IN_A_YEAR := 12\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h4",{attrs:{id:"method-prefix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-prefix"}},[e._v("#")]),e._v(" Method Prefix")]),e._v(" "),s("p",[e._v("Avoid redundant names when variables or methods are in a class/module.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Integer {\n\n    // The following method converts the given integer\n    // to a string.\n    //\n    // this method name can be simplified to ToString()\n    // so that the method call is Integer.ToString(i)\n    // instead of Integer.IntegerToString(i).\n\n    // YES\n    method ToString(i: int) returns (s: string)\n        ...\n\n    // NO\n    method IntegerToString(i: int) returns (s: string)\n        ...\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("h3",{attrs:{id:"code-layout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code-layout"}},[e._v("#")]),e._v(" Code Layout")]),e._v(" "),s("h4",{attrs:{id:"braces"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#braces"}},[e._v("#")]),e._v(" Braces")]),e._v(" "),s("p",[e._v("Opening braces go on the same line by default.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module M {\n    ...\n    method Met() {\n        ...\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("In case the method (or function, lemma, etc) signature is too long to fit in one line, or in case the signature has at least one specification clause, the opening brace goes on a new line.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module M {\n    ...\n    method Met(i: int) returns (j: int)\n        requires i % 2 == 0\n        ensures j > 10\n    {\n        ...\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("This applies to every scope: "),s("code",[e._v("module")]),e._v(", "),s("code",[e._v("class")]),e._v(", "),s("code",[e._v("predicate")]),e._v(", "),s("code",[e._v("if")]),e._v(", "),s("code",[e._v("while")]),e._v(", and more.")]),e._v(" "),s("h4",{attrs:{id:"imports"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#imports"}},[e._v("#")]),e._v(" Imports")]),e._v(" "),s("p",[e._v("By default, import modules without opening them.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import Coffee\n...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("However, if some members of a module are used very frequently, import it using "),s("code",[e._v("opened")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import opened Donut\n...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("When a file uses two modules and both of them define a method of the same name, do not import them "),s("code",[e._v("opened")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import MyModule\nimport YourModule\n...\nmethod MyMethod() {\n    MyModule.foo();\n    YourModule.foo();\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("In this case, if you want to shorten the module name, import it with a shorthand name.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import M = MyModuleWithACumbersomeName\nimport Y = YourModuleWithACumbersomeName\n...\nmethod MyMethod() {\n    M.foo();\n    Y.foo();\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("Common imports, such as "),s("code",[e._v("StandardLibrary")]),e._v(" and "),s("code",[e._v("Native")]),e._v(", should be grouped together, followed by custom module imports with a blank line in-between.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import opened StandardLibrary\nimport opened Native\n\nimport opened Donut\nimport Coffee\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("Although not required, it’s recommended to keep the order of "),s("code",[e._v("import")]),e._v("s and "),s("code",[e._v("include")]),e._v("s alphabetical, except when it makes more sense to group them logically.")]),e._v(" "),s("h3",{attrs:{id:"indentation-and-line-breaks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indentation-and-line-breaks"}},[e._v("#")]),e._v(" Indentation and Line Breaks")]),e._v(" "),s("h4",{attrs:{id:"tabs-or-spaces"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs-or-spaces"}},[e._v("#")]),e._v(" Tabs or Spaces?")]),e._v(" "),s("p",[e._v("Spaces are preferred over tabs. Tabs should only be used to remain consistent with existing code containing tabs.")]),e._v(" "),s("p",[e._v("Use 2 spaces for each indentation.")]),e._v(" "),s("h4",{attrs:{id:"maximum-character-limit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maximum-character-limit"}},[e._v("#")]),e._v(" Maximum Character Limit")]),e._v(" "),s("p",[e._v("Although there is no strict requirement, it is generally recommended to have a maximum of 120 characters per line.")]),e._v(" "),s("h4",{attrs:{id:"newlines"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#newlines"}},[e._v("#")]),e._v(" Newlines")]),e._v(" "),s("p",[e._v("Use newlines between sequential "),s("strong",[e._v("functions")]),e._v(", "),s("strong",[e._v("methods")]),e._v(", "),s("strong",[e._v("predicates")]),e._v(", and "),s("strong",[e._v("lemmas")]),e._v(" to increase readability.")]),e._v(" "),s("p",[e._v("End each file with a newline.")]),e._v(" "),s("h4",{attrs:{id:"functions-methods-predicates-and-lemmas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functions-methods-predicates-and-lemmas"}},[e._v("#")]),e._v(" Functions, Methods, Predicates, and Lemmas")]),e._v(" "),s("p",[e._v("Every Dafny method has the following signature.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("method {:<attributes>} MethodName(param1: Type, param2: Type) returns (ret: Type)\n    requires P()\n    modifies param2\n    ensures Q()\n    decreases param1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("When possible, put "),s("code",[e._v("MethodName")]),e._v(" and the "),s("code",[e._v("returns")]),e._v(" statement on the same line, as the keyword "),s("code",[e._v("returns")]),e._v(" is distinct from other method specification clauses, such as "),s("code",[e._v("requires")]),e._v(", "),s("code",[e._v("modifies")]),e._v(", "),s("code",[e._v("ensures")]),e._v(", and "),s("code",[e._v("decreases")]),e._v(", which should appear in this order. Each method specification clause should be on a separate line, indented.")]),e._v(" "),s("p",[e._v("In case the Method signature is too long, we can break it down.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("method {:<attributes>} MethodName(param1: Type, param2: Type,\n        param3: Type, param4: Type, param5: Type)\n    returns (ret1: Type, ret2: Type, ret3: Type, ret4: Type,\n        ret5: Type)\n    requires P1()\n    requires P2()\n    requires P3()\n    modifies param2\n    modifies param3\n    ensures Q1()\n    ensures Q2()\n    decreases param1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("Multiple "),s("code",[e._v("requires")]),e._v(" or "),s("code",[e._v("ensures")]),e._v(" can be combined into one:")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("requires\n    && P1()\n    && P2()\n    && P3()\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("The same rules apply to "),s("code",[e._v("function")]),e._v(", "),s("code",[e._v("predicate")]),e._v(", and "),s("code",[e._v("lemma")]),e._v(" definitions.")]),e._v(" "),s("h3",{attrs:{id:"things-to-avoid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#things-to-avoid"}},[e._v("#")]),e._v(" Things to Avoid")]),e._v(" "),s("h4",{attrs:{id:"parentheses"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parentheses"}},[e._v("#")]),e._v(" Parentheses")]),e._v(" "),s("p",[e._v("In many cases, Dafny does not require parentheses around expressions. Here are some examples.")]),e._v(" "),s("ul",[s("li",[e._v("If-Else-While Statements")])]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// YES\nvar i := 1;\nwhile i < 10 {\n    ...\n    if 1 < i {\n        ...\n    }\n    ...\n}\n\n// NO\nvar i := 1;\nwhile (i < 10) {\n    ...\n    if (1 < i) {\n        ...\n    }\n    ...\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br")])]),s("ul",[s("li",[e._v("Statements That Take Expression Arguments")])]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// YES\nassert x < 100;\nprint x;\n\n// NO\nassert(x < 100);\nprint(x);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("ul",[s("li",[e._v("Simple Boolean/Arithmetic Expressions")])]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// YES\nmethod Collatz(num: nat)\n    decreases *\n{\n    var n := num;\n    while 1 < n\n        decreases *\n    {\n        n := if n % 2 == 0 then n / 2 else n * 3 + 1;\n    }\n}\n\n// NO\nmethod Collatz(num: nat)\n    decreases *\n{\n    var n := num;\n    while (1 < n) // unnecessary parentheses\n        decreases *\n    {\n        n := if ((n % 2) == 0) then (n / 2) else ((n * 3) + 1); // unnecessary parentheses\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br")])]),s("h4",{attrs:{id:"whitespace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#whitespace"}},[e._v("#")]),e._v(" Whitespace")]),e._v(" "),s("p",[e._v("Avoid unnecessary whitespace inside expressions.")]),e._v(" "),s("h5",{attrs:{id:"type-declaration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-declaration"}},[e._v("#")]),e._v(" Type Declaration")]),e._v(" "),s("p",[e._v("A type declaration should have a form of "),s("code",[e._v("variableName: variableType")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// YES\nconst one: int := 1\nclass {:extern} Util {\n    var {:extern} Exception: System.String\n}\n\n// NO\nconst one : int := 1 // unnecessary whitespace\nclass {:extern} Util {\n    var {:extern} Exception : System.String // unnecessary whitespace\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("If the type can be inferred by Dafny, leave it out, unless you think it provides useful documentation in the program. So, constant "),s("code",[e._v("one")]),e._v(" above is better declared as")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const one := 1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"function-method-predicate-and-lemma-declaration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-method-predicate-and-lemma-declaration"}},[e._v("#")]),e._v(" Function, Method, Predicate, and Lemma Declaration")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("function")]),e._v(", "),s("code",[e._v("method")]),e._v(", "),s("code",[e._v("predicate")]),e._v(", and "),s("code",[e._v("lemma")]),e._v(" definitions should have the form "),s("code",[e._v("FunctionName(parameterName: parameterType, ...)")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// YES\nfunction method Foo<int>(i: int): int\n\n// NO\nfunction method Foo<int> (i : int) : int // unnecessary whitespace\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("Avoid too little or too much whitespace that reduces the overall readability.")]),e._v(" "),s("div",{staticClass:"language-dafny line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// YES\nlemma MyLemma<A, B>(x: seq<seq<A>>, y: B) {\n    ...\n}\n\n// NO\nlemma MyLemma <A,B> ( x : seq<seq<A>> , y :B){\n    ...\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("h3",{attrs:{id:"recommendations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recommendations"}},[e._v("#")]),e._v(" Recommendations")]),e._v(" "),s("p",[e._v("This section describes a few recommendations that can help make code more readable and easy to follow, although not strictly enforced.")]),e._v(" "),s("h4",{attrs:{id:"externs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#externs"}},[e._v("#")]),e._v(" Externs")]),e._v(" "),s("p",[e._v("Try to name them the same in Dafny and the target language (e.g. C#, Java, etc) whenever possible, so that in Dafny we only have to write "),s("code",[e._v("{:extern}")]),e._v(", not "),s("code",[e._v('{:extern "<name>"}')]),e._v(".")]),e._v(" "),s("h4",{attrs:{id:"things-to-consider"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#things-to-consider"}},[e._v("#")]),e._v(" Things to Consider")]),e._v(" "),s("p",[e._v("Ask these questions before designing / implementing a program in Dafny.")]),e._v(" "),s("ul",[s("li",[e._v("Is this variable name / function name "),s("code",[e._v("X")]),e._v(" a good name?")]),e._v(" "),s("li",[e._v("Does it make sense that this method "),s("code",[e._v("M")]),e._v(" is in module "),s("code",[e._v("X")]),e._v("? Shouldn’t it be in module "),s("code",[e._v("Y")]),e._v(" instead?")]),e._v(" "),s("li",[e._v("Does the definition "),s("code",[e._v("X")]),e._v(" belong to the file "),s("code",[e._v("Y.dfy")]),e._v("?")]),e._v(" "),s("li",[e._v("Is "),s("code",[e._v("X.dfy")]),e._v(" a good filename?")])])])}),[],!1,null,null,null);n.default=t.exports}}]);
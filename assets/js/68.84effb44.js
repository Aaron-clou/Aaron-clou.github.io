(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{552:function(v,_,t){"use strict";t.r(_);var e=t(18),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"基础学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础学习"}},[v._v("#")]),v._v(" 基础学习")]),v._v(" "),t("p",[v._v("​      "),t("em",[v._v("此页面说明了 Dafny 中许多最常见的语言功能。 为了让您更快上手，这里的描述被简化了——这个页面不是语言参考。例如，此页面不会涉及模块、迭代器或细化，除非您在 Dafny 中编写更大或更高级的程序，否则您将不需要这些。")])]),v._v(" "),t("p",[v._v("Dafny程序长这样：xxxxx.dfy，Dafny文件是以dfy结尾的。")]),v._v(" "),t("p",[v._v("程序主要包含以下几部分：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("类型(types)")])]),v._v(" "),t("li",[t("p",[v._v("方法(methods)")])]),v._v(" "),t("li",[t("p",[v._v("函数(functions)")])]),v._v(" "),t("li",[t("p",[v._v("用户自定义的类型包括类（class）和归纳数据类型(inductive class)")])]),v._v(" "),t("li",[t("p",[v._v("类class本身也包含一组声明(declarations)、介绍字段（introducing fields）、方法(methods)和函数(functions)。")]),v._v(" "),t("p",[v._v("如果有main方法那就从main开始验证程序，没有也没关系，main不是必须的。")])])]),v._v(" "),t("p",[v._v("注释：// 双斜杠 或者  /* xxxxx */")]),v._v(" "),t("h2",{attrs:{id:"基本定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本定义"}},[v._v("#")]),v._v(" 基本定义")]),v._v(" "),t("p",[v._v("在类中，定义字段x为数据类型(types)T：")]),v._v(" "),t("p",[t("strong",[v._v("var x: T")])]),v._v(" "),t("p",[v._v("注意事项：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("数据类型必需手动申明的，不会被自动推断。")])]),v._v(" "),t("li",[t("p",[v._v("通过在声明前加上关键 "),t("strong",[v._v("ghost")]),v._v(" 可以将该字段声明为幽灵（即用于规范"),t("strong",[v._v("而不是执行")]),v._v("）字段。")])])]),v._v(" "),t("p",[v._v("Dafny 的9种数据类型包括：")]),v._v(" "),t("ul",[t("li",[v._v("bool：布尔值")]),v._v(" "),t("li",[v._v("int：无界整数")]),v._v(" "),t("li",[v._v("string: 字符串")]),v._v(" "),t("li",[v._v("class/inductive class: 用户自定义的类和归纳类、")]),v._v(" "),t("li",[v._v("set<'T>：不可变的无序集合")]),v._v(" "),t("li",[v._v("seq<'T>：不可变的有序集合")]),v._v(" "),t("li",[v._v("array<'T>、array2<'T>、array3<'T>: 多维数组类型")]),v._v(" "),t("li",[v._v("object：所有类型的超类")]),v._v(" "),t("li",[v._v("nat：范围是int一半，非负整数。")])]),v._v(" "),t("p",[v._v("aaaaaaaaaaaa")]),v._v(" "),t("h2",{attrs:{id:"方法-methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法-methods"}},[v._v("#")]),v._v(" 方法 methods")]),v._v(" "),t("p",[v._v("方法的声明如下：")]),v._v(" "),t("p",[t("code",[v._v("sssssss")])]),v._v(" "),t("p",[t("code",[v._v("method M(a: A, b: B, c: C) r eturns (x: X, y: Y, z: Y) //输入输出参数")])]),v._v(" "),t("p",[t("code",[v._v("requires Pre\t//前置条件")])]),v._v(" "),t("p",[t("code",[v._v("modifies Frame //框架")])]),v._v(" "),t("p",[t("code",[v._v("ensures Post\t//后置条件")])]),v._v(" "),t("p",[t("code",[v._v("decreases TerminationMetric //变体函数")])]),v._v(" "),t("p",[t("code",[v._v("{")])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("`sssssss`\n\n`method M(a: A, b: B, c: C) r eturns (x: X, y: Y, z: Y)  //输入输出参数`\n\n `requires Pre\t//前置条件`   \n\n `modifies Frame  //框架`\n\n `ensures Post\t//后置条件`\n\n `decreases TerminationMetric //变体函数`\n\n`{`\n")])])]),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[v._v("其中：")]),v._v(" "),t("ul",[t("li",[v._v("a, b, c : 输入参数")]),v._v(" "),t("li",[v._v("x, y, z :  输出参数")]),v._v(" "),t("li",[v._v("Pre: 表示方法 前提条件 的 布尔表达式")]),v._v(" "),t("li",[v._v("Frame: 表示类对象的集合，可以被方法更新(Frame denotes a set of objects whose fields may be updated by the method)")]),v._v(" "),t("li",[v._v("Post: 是方法 后置条件 的 布尔表达式")]),v._v(" "),t("li",[v._v("TerminationMetric: 是方法的变体函数(TerminationMetric is the method’s variant function)")]),v._v(" "),t("li",[v._v("Body: 是实现方法的语句。")])]),v._v(" "),t("h3",{attrs:{id:"框架frame"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#框架frame"}},[v._v("#")]),v._v(" 框架Frame")]),v._v(" "),t("p",[t("strong",[v._v("框架Frame")]),v._v(" 是单个或多个对象组成的表达式的集合。(见下面例子)")]),v._v(" "),t("p",[v._v("框架Frame是由类内对象和类外方法内对象两部分组成。(反正就是一堆类对象的集合）")]),v._v(" "),t("p",[v._v("例如，如果 c 和 d 是类C的对象，那么以下每行意思是一样的。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("modifies {c, d}")])]),v._v(" "),t("li",[t("p",[v._v("modifies {c} + {d}")])]),v._v(" "),t("li",[t("p",[v._v("modifies c, {d}")])]),v._v(" "),t("li",[t("p",[v._v("modifies c, d")])])]),v._v(" "),t("p",[v._v("如果方法内啥都没写，那么前置和后置条件默认为真，框架默认为空集。")]),v._v(" "),t("h3",{attrs:{id:"变体函数-variant-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变体函数-variant-function"}},[v._v("#")]),v._v(" "),t("strong",[v._v("变体函数 variant function")])]),v._v(" "),t("p",[v._v("变体函数是一个表达式组成的列表，表示由给定表达式组成的字典元组，后跟隐含的“top”元素。")]),v._v(" "),t("p",[v._v("如果省略没写的话，Dafny 将猜测该方法的变体函数，通常是以该方法的参数列表开头的字典元组。")]),v._v(" "),t("p",[v._v("Dafny IDE 将在工具提示中显示猜测。")]),v._v(" "),t("h3",{attrs:{id:"ghost-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ghost-关键字"}},[v._v("#")]),v._v(" "),t("strong",[v._v("ghost 关键字")])]),v._v(" "),t("p",[v._v("通过在声明之前加上关键字 ghost 可以将方法声明为 ghost方法（仅规范而不用于执行）。")]),v._v(" "),t("h3",{attrs:{id:"this-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this-关键字"}},[v._v("#")]),v._v(" "),t("strong",[v._v("this 关键字")])]),v._v(" "),t("p",[v._v("默认情况下，类中的方法都具有隐式接收器参数 this。可以通过在方法声明之前使用关键字 static 来删除此参数。")]),v._v(" "),t("p",[v._v("类 C 中的静态方法 M 可以由 C.M(...) 调用。")]),v._v(" "),t("h3",{attrs:{id:"构造函数-构造体-constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数-构造体-constructor"}},[v._v("#")]),v._v(" "),t("strong",[v._v("构造函数/构造体 constructor")])]),v._v(" "),t("p",[v._v("在类中，一个方法可以通过将method关键字替换为constructor，申明一个构造方法。")]),v._v(" "),t("p",[v._v("构造函数(构造方法)只能在分配对象时调用（参见示例）")]),v._v(" "),t("p",[v._v("对于包含一个或多个构造函数的类，对象创建必须与对构造函数的调用一起完成。")]),v._v(" "),t("p",[v._v("通常，一个方法当然得有一个名字，但是一个类可以有一个没有名字的构造函数，也就是"),t("strong",[v._v("匿名构造函数")]),v._v(" constructor (n:int )")]),v._v(" "),t("p",[t("code",[v._v("constructor (n: int) //constructor 匿名构造器")])]),v._v(" "),t("p",[t("code",[v._v("modifies this //框架内对象的构造体 this就是this.frame？")])]),v._v(" "),t("p",[t("code",[v._v("{")])]),v._v(" "),t("p",[t("code",[v._v("Body")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("h3",{attrs:{id:"lemma-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lemma-关键字"}},[v._v("#")]),v._v(" "),t("strong",[v._v("lemma 关键字")])]),v._v(" "),t("p",[v._v("有时，方法(method)关键字会被引理("),t("strong",[v._v("lemmas")]),v._v(")取代。")]),v._v(" "),t("p",[v._v("通过使用lemma关键字而不是method来声明方法，会让程序更清楚明白")]),v._v(" "),t("p",[v._v("示例：输入三个整数，返回排序后的三个整数")]),v._v(" "),t("p",[t("code",[v._v("method Sort(a: int, b: int, c: int) returns (x: int, y: int, z: int)")])]),v._v(" "),t("p",[t("code",[v._v("ensures x <= y <= z && multiset{a, b, c} == multiset{x, y, z} //后置条件")])]),v._v(" "),t("p",[t("code",[v._v("{")])]),v._v(" "),t("p",[t("code",[v._v("x, y, z := a, b, c;")])]),v._v(" "),t("p",[t("code",[v._v("if z < y {")])]),v._v(" "),t("p",[t("code",[v._v("y, z := z, y;")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[t("code",[v._v("if y < x {")])]),v._v(" "),t("p",[t("code",[v._v("x, y := y, x;")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[t("code",[v._v("if z < y {")])]),v._v(" "),t("p",[t("code",[v._v("y, z := z, y;")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("h2",{attrs:{id:"函数-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数-function"}},[v._v("#")]),v._v(" "),t("strong",[v._v("函数 function")])]),v._v(" "),t("p",[v._v("函数具有以下形式：")]),v._v(" "),t("p",[t("code",[v._v("function F(a: A, b: B, c: C): T")])]),v._v(" "),t("p",[t("code",[v._v("requires Pre //前置条件pre")])]),v._v(" "),t("p",[t("code",[v._v("reads Frame\t//框架frame")])]),v._v(" "),t("p",[t("code",[v._v("ensures Post //后置条件post")])]),v._v(" "),t("p",[t("code",[v._v("decreases TerminationMetric //变体函数")])]),v._v(" "),t("p",[t("code",[v._v("{")])]),v._v(" "),t("p",[t("code",[v._v("Body\t//函数体")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("ul",[t("li",[v._v("a, b, c : 输入的形参，")]),v._v(" "),t("li",[v._v("T : 返回结果的类型，")]),v._v(" "),t("li",[v._v("Pre: 表示函数前提条件的布尔表达式，")]),v._v(" "),t("li",[v._v("Frame: 函数体body需要的对象列表")]),v._v(" "),t("li",[v._v("Post: 函数的后置条件布尔表达式")]),v._v(" "),t("li",[v._v("TerminationMetric: 变体函数")]),v._v(" "),t("li",[v._v("Body: 定义函数的表达式。")])]),v._v(" "),t("p",[v._v("前置条件允许函数是部分的(只用前置就行不用写后置），即前置条件表示函数何时定义，并且 Dafny 会验证函数的每次使用都满足前置条件。")]),v._v(" "),t("p",[v._v("通常不需要后置条件，因为函数在函数体内已经给出了完整的定义。")]),v._v(" "),t("p",[v._v("例如：")]),v._v(" "),t("p",[v._v("（写个后置加个保险也行，一般后置就是声明该函数的基本属性，比如Factorial这个函数所有数字都≥1）")]),v._v(" "),t("p",[t("code",[v._v("function Factorial(n: int): int")])]),v._v(" "),t("p",[t("code",[v._v("requires 0 <= n //前置条件pre")])]),v._v(" "),t("p",[t("code",[v._v("ensures 1 <= Factorial(n) //后置条件post")])]),v._v(" "),t("p",[t("code",[v._v("{")])]),v._v(" "),t("p",[t("code",[v._v("if n == 0 then 1 else Factorial(n-1) * n //函数体body")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[v._v("要在后置条件中引用函数的结果，请使用"),t("strong",[v._v("函数本身的名称")]),v._v("，如示例中所示。")]),v._v(" "),t("p",[v._v("默认情况下，函数是ghost，不能从可执行（非ghost）代码中调用。")]),v._v(" "),t("p",[v._v("为了使它从ghost变成非ghost，用关键字"),t("strong",[v._v("function method")]),v._v("替换 function.")]),v._v(" "),t("p",[v._v("一个返回布尔值的函数可以用关键字声明，然后省略冒号和返回类型。")]),v._v(" "),t("p",[v._v("如果函数或方法被声明为类class成员，则它具有隐式接收器参数 this。可以通过在声明之前加上关键字 static 来删除此参数。")]),v._v(" "),t("p",[v._v("类 C 中的静态函数 F 可以被 C.F(...) 调用。")]),v._v(" "),t("h3",{attrs:{id:"类-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类-class"}},[v._v("#")]),v._v(" 类 class")]),v._v(" "),t("p",[v._v("一个类定义如下：")]),v._v(" "),t("p",[t("code",[v._v("class C {")])]),v._v(" "),t("p",[t("code",[v._v("// member declarations go here")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[v._v("其中类的成员（字段、方法和函数）在花括号内定义（如上所述）。")]),v._v(" "),t("h3",{attrs:{id:"数据类型-datatypes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型-datatypes"}},[v._v("#")]),v._v(" "),t("strong",[v._v("数据类型 datatypes")])]),v._v(" "),t("p",[v._v("归纳数据类型（inductive datatype）是一种类型，其值是用"),t("strong",[v._v("一组固定的构造函数")]),v._v("创建的。")]),v._v(" "),t("p",[v._v("数据类型 为Tree带有构造函数 Leaf 和 Node 的函数声明如下：")]),v._v(" "),t("p",[t("code",[v._v("datatype Tree = Leaf | Node(Tree, int, Tree)//Leaf为无参构造函数 Node为有参")])]),v._v(" "),t("p",[v._v("构造函数由竖线分隔。 无参数构造函数不需要使用括号，如 Leaf 所示。")]),v._v(" "),t("p",[v._v("对于每个构造函数 Ct，数据类型隐式声明了一个布尔成员 Ct?，对于已经使用 Ct 构造函数赋的值的成员，它返回 true。 例如，在代码片段之后：")]),v._v(" "),t("p",[t("code",[v._v("var t0 := Leaf;")])]),v._v(" "),t("p",[t("code",[v._v("var t1 := Node(t0, 5, t0);")])]),v._v(" "),t("p",[v._v("表达式 t1.Node结果为 true, t0.Node结果为false。")]),v._v(" "),t("p",[v._v("如果两个数据类型值是使用相同的构造函数和该构造函数的相同参数创建的，则它们是相等的。因此，对于像 Leaf、t.Leaf 这样的无参数构造函数，Dafny会给出与 t == Leaf 相同的结果。(没看懂，不管了)")]),v._v(" "),t("p",[v._v("构造函数可以选择为其任何参数声明析构函数，这是通过为参数引入名称来完成的。 例如，如果 Tree 被声明为：")]),v._v(" "),t("p",[v._v("datatype Tree = Leaf | Node(left: Tree, data: int, right: Tree)")]),v._v(" "),t("p",[v._v("那么t1.data == 5和t1.left == t0在上面的代码片段之后保持不变。(还是没懂)")]),v._v(" "),t("h3",{attrs:{id:"泛型-generics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型-generics"}},[v._v("#")]),v._v(" "),t("strong",[v._v("泛型 Generics")])]),v._v(" "),t("p",[v._v("Dafny同其他语言一样都有泛型，任何类、方法、函数都可以有类型参数，在<>中申明该数据类型T")]),v._v(" "),t("p",[t("code",[v._v("class MyMultiset<T> {")])]),v._v(" "),t("p",[t("code",[v._v("/*...*/")])]),v._v(" "),t("p",[t("code",[v._v("}\t\t//类泛型")])]),v._v(" "),t("p",[t("code",[v._v("datatype Tree<T> = Leaf | Node(Tree<T>, T, Tree<T>) //自定义数据泛型")])]),v._v(" "),t("p",[t("code",[v._v("method Find<T>(key: T, collection: Tree<T>) { //方法泛型")])]),v._v(" "),t("p",[t("code",[v._v("/*...*/")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[t("code",[v._v("function IfThenElse<T>(b: bool, x: T, y: T): T {\t//函数泛型")])]),v._v(" "),t("p",[t("code",[v._v("/*...*/")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("h3",{attrs:{id:"声明-statement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明-statement"}},[v._v("#")]),v._v(" "),t("strong",[v._v("声明 Statement")])]),v._v(" "),t("p",[v._v("以下是 Dafny 中最常见语句:")]),v._v(" "),t("p",[t("code",[v._v("var LocalVariables := ExprList;")])]),v._v(" "),t("p",[t("code",[v._v("Lvalues := ExprList;")])]),v._v(" "),t("p",[t("code",[v._v("assert BoolExpr;")])]),v._v(" "),t("p",[t("code",[v._v("print ExprList;")])]),v._v(" "),t("p",[t("code",[v._v("if BoolExpr0 {")])]),v._v(" "),t("p",[t("code",[v._v("Stmts0")])]),v._v(" "),t("p",[t("code",[v._v("} else if BoolExpr1 {")])]),v._v(" "),t("p",[t("code",[v._v("Stmts1")])]),v._v(" "),t("p",[t("code",[v._v("} else {")])]),v._v(" "),t("p",[t("code",[v._v("Stmts2")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[t("code",[v._v("while BoolExpr")])]),v._v(" "),t("p",[t("code",[v._v("invariant Inv")])]),v._v(" "),t("p",[t("code",[v._v("modifies Frame")])]),v._v(" "),t("p",[t("code",[v._v("decreases Rank")])]),v._v(" "),t("p",[t("code",[v._v("{")])]),v._v(" "),t("p",[t("code",[v._v("Stmts")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[t("code",[v._v("match Expr {")])]),v._v(" "),t("p",[t("code",[v._v("case Empty => Stmts0")])]),v._v(" "),t("p",[t("code",[v._v("case Node(l, d, r) => Stmts1")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("p",[t("code",[v._v("break;")])]),v._v(" "),t("p",[t("code",[v._v("return;")])]),v._v(" "),t("h4",{attrs:{id:"函数-方法的返回值赋值给变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数-方法的返回值赋值给变量"}},[v._v("#")]),v._v(" "),t("strong",[v._v("函数/方法的返回值赋值给变量")])]),v._v(" "),t("p",[v._v("(就是将函数/方法返回的值或对象 赋给 一个 局部变量 而已）")]),v._v(" "),t("p",[v._v("var LocalVariables := ExprList;")]),v._v(" "),t("p",[v._v("var 语句引入了局部变量。")]),v._v(" "),t("p",[v._v("Lvalues := ExprList;")]),v._v(" "),t("p",[v._v("赋值语句将 ExprList变量赋给Lvalues。 这些分配是并行执行的（更重要的是，所有必要的读取都发生在写入之前），因此左侧必须表示不同的 L 值。 每个右侧都可以是以下形式之一的表达式或对象创建：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("new T")])]),v._v(" "),t("li",[t("p",[v._v("new T.Init(ExprList)")])]),v._v(" "),t("li",[t("p",[v._v("new T(ExprList)")])]),v._v(" "),t("li",[t("p",[v._v("new T[SizeExpr]")])]),v._v(" "),t("li",[t("p",[v._v("new T[SizeExpr0, SizeExpr1]")])])]),v._v(" "),t("p",[v._v("第一种形式分配一个类型为 T 的对象。")]),v._v(" "),t("p",[v._v("第二种形式另外在新分配的对象上调用初始化方法或构造函数。")]),v._v(" "),t("p",[v._v("第三种形式是当调用匿名构造函数时的语法。")]),v._v(" "),t("p",[v._v("其他形式分别了T是一维和二维数组对象的匿名构造方法")]),v._v(" "),t("h4",{attrs:{id:"assert-声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assert-声明"}},[v._v("#")]),v._v(" "),t("strong",[v._v("assert 声明")])]),v._v(" "),t("p",[v._v("assert 语句判断后面的表达式结果是否为真（由验证器验证）。")]),v._v(" "),t("h4",{attrs:{id:"print-打印语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#print-打印语句"}},[v._v("#")]),v._v(" "),t("strong",[v._v("print 打印语句")])]),v._v(" "),t("p",[v._v("打印语句将给定打印表达式的值输出到标准输出。字符串中的字符可以转义；例如，对 print 语句感兴趣的是 \\n 表示字符串中的换行符。")]),v._v(" "),t("h4",{attrs:{id:"if-选择语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-选择语句"}},[v._v("#")]),v._v(" "),t("strong",[v._v("if 选择语句")])]),v._v(" "),t("p",[v._v("if 语句是通常的语句。该示例显示了使用 else if 将备选方案串在一起。像往常一样，else 分支是可选的。")]),v._v(" "),t("h4",{attrs:{id:"while-循环语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while-循环语句"}},[v._v("#")]),v._v(" "),t("strong",[v._v("while 循环语句")])]),v._v(" "),t("ul",[t("li",[v._v("while 语句是通常的循环，其中")]),v._v(" "),t("li",[v._v("invariant 声明给出了一个循环变量")]),v._v(" "),t("li",[v._v("modifies语句限制了循环的框架")]),v._v(" "),t("li",[v._v("reduction语句从循环中引入了一个变体函数。")])]),v._v(" "),t("p",[v._v("默认情况下，循环不变式为真，修改框与封闭上下文中的相同（通常是封闭方法的修改子句），并从循环保护中猜测变体函数。(真没看懂）")]),v._v(" "),t("p",[t("code",[v._v("while BoolExpr //布尔表达式-循环条件")])]),v._v(" "),t("p",[t("code",[v._v("invariant Inv")])]),v._v(" "),t("p",[t("code",[v._v("modifies Frame")])]),v._v(" "),t("p",[t("code",[v._v("decreases Rank")])]),v._v(" "),t("p",[t("code",[v._v("{")])]),v._v(" "),t("p",[t("code",[v._v("Statements")])]),v._v(" "),t("p",[t("code",[v._v("}")])]),v._v(" "),t("h4",{attrs:{id:"match语句-阿巴阿巴"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match语句-阿巴阿巴"}},[v._v("#")]),v._v(" "),t("strong",[v._v("match语句(阿巴阿巴)")])]),v._v(" "),t("p",[v._v("match 语句计算源 Expr（一个类型为归纳数据类型的表达式），然后执行与用于创建源数据类型值的构造函数相对应的 case，将构造函数参数绑定到给定的名称。如果不需要它们来标记 match 语句的结尾，则可以省略包围 case 的花括号。")]),v._v(" "),t("h4",{attrs:{id:"break语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#break语句"}},[v._v("#")]),v._v(" "),t("strong",[v._v("break语句")])]),v._v(" "),t("p",[v._v("break 语句可用于退出循环，而 return 语句可用于退出方法。")]),v._v(" "),t("h2",{attrs:{id:"表达式-expressions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表达式-expressions"}},[v._v("#")]),v._v(" "),t("strong",[v._v("表达式 Expressions")])]),v._v(" "),t("p",[v._v("Dafny 中的表达式与类 Java 语言中的表达式非常相似。以下是一些值得注意的差异。")]),v._v(" "),t("h3",{attrs:{id:"基本运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本运算符"}},[v._v("#")]),v._v(" "),t("strong",[v._v("基本运算符")])]),v._v(" "),t("p",[v._v("除了短路布尔运算符 && (and) 和 || （或），Dafny 有一个短路蕴涵运算符 ==> 和一个 if-and-only-if 运算符 <==>。")]),v._v(" "),t("p",[v._v("正如它们的宽度所暗示的那样，<==> 具有比 ==> 低的绑定力，而后者又比 && 和 || 具有更低的绑定力。")]),v._v(" "),t("p",[v._v("Dafny 比较表达式可以是"),t("strong",[v._v("链式")]),v._v("的，这意味着“相同方向”的比较可以串在一起。例如，0 <= i < j <= a.Length == N")]),v._v(" "),t("p",[v._v("含义相同： 0 <= i && i < j && j <= a.Length && a.Length == N")]),v._v(" "),t("p",[v._v("请注意，布尔相等可以使用 == 和 <==> 来表示。这些之间有两个区别。首先，== 比 <==> 具有更高的约束力。其次，== 是链接，而 <==> 是关联的。也就是说，a == b == c 与 a == b && b == c 相同，而 a <==> b <==> c 与 a <==> (b <== > c)，这也与 (a <==> b) <==> c 相同。")]),v._v(" "),t("h4",{attrs:{id:"整数运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整数运算"}},[v._v("#")]),v._v(" "),t("strong",[v._v("整数运算")])]),v._v(" "),t("p",[v._v("对整数的运算是常用的运算，除了 /（整数除法）和 %（整数模）遵循欧几里德定义，这意味着 % 总是导致非负数。 （因此，当 / 或 % 的第一个参数为负数时，结果与您在 C、Java 或 C# 中得到的结果不同，请参阅 http://en.wikipedia.org/wiki/Modulo_operation。）")]),v._v(" "),t("h4",{attrs:{id:"离-散-数-学"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#离-散-数-学"}},[v._v("#")]),v._v(" 离 散 数 学")]),v._v(" "),t("p",[v._v("Dafny 表达式包括全称量词和存在量词，其形式为：forall x :: Expr 和exists x :: Expr，其中x 是绑定变量（可以使用显式类型声明，如x: T 中所示），而Expr 是一个布尔表达式。")]),v._v(" "),t("h4",{attrs:{id:"集合运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合运算"}},[v._v("#")]),v._v(" 集合运算")]),v._v(" "),t("p",[v._v("集合上的操作包括+（并）、*（交）和-（集合差）、集合比较运算符<（真子集）、<=（子集）、它们的对偶> 和>=，以及!! （脱节）。 S 中的表达式 x 表示 x 是集合 S 的成员，而 x !in S 是一个方便的写法 !(x in S)。")]),v._v(" "),t("p",[v._v("要从某些元素创建一个集合，请将它们括在花括号中。例如，{x,y} 是由 x 和 y 组成的集合（如果 x == y，则为单例集），{x} 是包含 x 的单例集，{} 是空集。")]),v._v(" "),t("h4",{attrs:{id:"序列运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列运算"}},[v._v("#")]),v._v(" "),t("strong",[v._v("序列运算")])]),v._v(" "),t("p",[v._v("对序列的操作包括 +（连接）和比较运算符 <（适当的前缀）和 <=（前缀）。成员资格可以像集合一样检查：x in S 和 x !in S。序列 S 的长度表示为 |S|，并且此类序列的元素具有从 0 到小于 |S| 的索引。表达式 S[j] 表示序列 S 的索引 j 处的元素。表达式 S[m..n]，其中 0 <= m <= n <= |S|，返回一个序列，其元素是S 从索引 m 开始（即，从 S[m]、S[m+1]、……直到但不包括 S[n]）。表达式 S[m..]; （通常称为“drop m”）与 S[m..|S|] 相同；也就是说，它返回除 S 的前 m 个元素之外的所有元素的序列。表达式 S[..n] ; （通常称为“take n”）与 S[0..n] 相同，即它返回由 S 的前 n 个元素组成的序列。")]),v._v(" "),t("p",[v._v("如果 j 是序列 S 的有效索引，则表达式 S[j := x];是类似于 S 的序列，只是它在索引 j 处有 x。")]),v._v(" "),t("p",[v._v("最后，要从一些元素组成一个序列，请将它们括在方括号中。例如，[x,y] 是由两个元素 x 和 y 组成的序列，使得 [x,y][0] == x 和 [x,y][1] == y，[x] 是唯一元素是 x 的单例序列，[] 是空序列。")]),v._v(" "),t("h4",{attrs:{id:"if-then-else判断语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-then-else判断语句"}},[v._v("#")]),v._v(" "),t("strong",[v._v("if-then-else判断语句")])]),v._v(" "),t("p",[v._v("if-then-else 表达式的形式为：if BoolExpr then Expr0 else Expr1")]),v._v(" "),t("p",[v._v("其中 Expr0 和 Expr1 是相同类型的任何表达式。与 if 语句不同，if-then-else 表达式使用 then 关键字，并且必须包含显式的 else 分支。")]),v._v(" "),t("h4",{attrs:{id:"match匹配表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match匹配表达式"}},[v._v("#")]),v._v(" "),t("strong",[v._v("match匹配表达式")])]),v._v(" "),t("p",[v._v("match 表达式类似于 match 语句并具有以下形式：")]),v._v(" "),t("p",[v._v("match Expr { case Empty => Expr0 case Node(l, d, r) => Expr1 }")]),v._v(" "),t("p",[v._v("大括号可用于标记匹配表达式的结束，但最常见的是不需要这样做，然后可以省略大括号。")])])}),[],!1,null,null,null);_.default=a.exports}}]);
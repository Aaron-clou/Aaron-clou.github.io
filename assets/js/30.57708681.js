(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{516:function(v,_,e){"use strict";e.r(_);var t=e(18),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"表达式-expressions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表达式-expressions"}},[v._v("#")]),v._v(" "),e("strong",[v._v("表达式 Expressions")])]),v._v(" "),e("p",[v._v("Dafny 中的表达式与类 Java 语言中的表达式非常相似。以下是一些值得注意的差异。")]),v._v(" "),e("h2",{attrs:{id:"基本运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本运算符"}},[v._v("#")]),v._v(" "),e("strong",[v._v("基本运算符")])]),v._v(" "),e("p",[v._v("除了短路布尔运算符 "),e("code",[v._v("&&")]),v._v(" (and) 和 "),e("code",[v._v("||")]),v._v(" （或），Dafny 有一个短路蕴涵运算符 "),e("code",[v._v("==>")]),v._v(" 和一个 "),e("code",[v._v("if-and-only-if")]),v._v(" 运算符 "),e("code",[v._v("<==>")]),v._v("。")]),v._v(" "),e("p",[v._v("正如它们的宽度所暗示的那样，"),e("code",[v._v("<==>")]),v._v(" 具有比 "),e("code",[v._v("==>")]),v._v(" 低的绑定力，而后者又比 "),e("code",[v._v("&&")]),v._v(" 和 "),e("code",[v._v("||")]),v._v(" 具有更低的绑定力。")]),v._v(" "),e("p",[v._v("Dafny 比较表达式可以是"),e("strong",[v._v("链式")]),v._v("的，这意味着“相同方向”的比较可以串在一起。例如，"),e("code",[v._v("0 <= i < j <= a.Length == N")])]),v._v(" "),e("p",[v._v("含义相同： "),e("code",[v._v("0 <= i && i < j && j <= a.Length")]),v._v(" && "),e("code",[v._v("a.Length == N")])]),v._v(" "),e("p",[v._v("请注意，布尔相等可以使用 "),e("code",[v._v("==")]),v._v("和 "),e("code",[v._v("<==>")]),v._v(" 来表示。这些之间有两个区别。首先，"),e("code",[v._v("==")]),v._v(" 比 "),e("code",[v._v("<==>")]),v._v(" 具有更高的约束力。其次，"),e("code",[v._v("==")]),v._v(" 是链接，而 "),e("code",[v._v("<==>")]),v._v(" 是关联的。也就是说，"),e("code",[v._v("a == b == c")]),v._v(" 与 "),e("code",[v._v("a == b && b == c")]),v._v(" 相同，而 "),e("code",[v._v("a <==> b <==> c")]),v._v(" "),e("code",[v._v("与 a <==> (b <== > c)")]),v._v("，这也与 "),e("code",[v._v("(a <==> b) <==> c")]),v._v(" 相同。")]),v._v(" "),e("h2",{attrs:{id:"整数运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整数运算"}},[v._v("#")]),v._v(" "),e("strong",[v._v("整数运算")])]),v._v(" "),e("p",[v._v("对整数的运算是常用的运算，除了 "),e("code",[v._v("/")]),v._v("（整数除法）和"),e("code",[v._v("%")]),v._v("（整数模）遵循欧几里德定义，这意味着"),e("code",[v._v("%")]),v._v(" 总是导致非负数。")]),v._v(" "),e("blockquote",[e("p",[v._v("因此，当 / 或 % 的第一个参数为负数时，结果与您在 C、Java 或 C# 中得到的结果不同，请参阅 http://en.wikipedia.org/wiki/Modulo_operation。）")])]),v._v(" "),e("h2",{attrs:{id:"离散数学"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#离散数学"}},[v._v("#")]),v._v(" 离散数学")]),v._v(" "),e("p",[v._v("Dafny 表达式包括全称量词和存在量词，其形式为："),e("code",[v._v("forall x :: Expr")]),v._v(" 和"),e("code",[v._v("exists x :: Expr")]),v._v("，其中x 是绑定变量（可以使用显式类型声明，如x: T 中所示），而"),e("code",[v._v("Expr")]),v._v(" 是一个布尔表达式。")]),v._v(" "),e("h2",{attrs:{id:"集合运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合运算"}},[v._v("#")]),v._v(" 集合运算")]),v._v(" "),e("p",[v._v("集合上的操作包括+（并）、*（交）和-（集合差）、集合比较运算符<（真子集）、<=（子集）、它们的对偶> 和>=，以及!! （脱节）。 S 中的表达式 x 表示 x 是集合 S 的成员，而 x !in S 是一个方便的写法 "),e("code",[v._v("!(x in S)")]),v._v("。")]),v._v(" "),e("p",[v._v("要从某些元素创建一个集合，请将它们括在花括号中。例如，{x,y} 是由 x 和 y 组成的集合（如果 x == y，则为单例集），"),e("code",[v._v("{x}")]),v._v(" 是包含 x 的单例集，"),e("code",[v._v("{}")]),v._v(" 是空集。")]),v._v(" "),e("h2",{attrs:{id:"序列运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列运算"}},[v._v("#")]),v._v(" "),e("strong",[v._v("序列运算")])]),v._v(" "),e("p",[v._v("对序列的操作包括 +（连接）和比较运算符 <（适当的前缀）和 <=（前缀）。成员资格可以像集合一样检查：x in S 和 x !in S。序列 S 的长度表示为 |S|，并且此类序列的元素具有从 0 到小于 |S| 的索引。表达式 S[j] 表示序列 S 的索引 j 处的元素。表达式 S[m..n]，其中 0 <= m <= n <= |S|，返回一个序列，其元素是S 从索引 m 开始（即，从 S[m]、S[m+1]、……直到但不包括 S[n]）。表达式 "),e("code",[v._v("S[m..]")]),v._v("; （通常称为“drop m”）与 "),e("code",[v._v("S[m..|S|]")]),v._v(" 相同；也就是说，它返回除 S 的前 m 个元素之外的所有元素的序列。表达式 "),e("code",[v._v("S[..n]")]),v._v(" ; （通常称为“take n”）与 "),e("code",[v._v("S[0..n]")]),v._v(" 相同，即它返回由 S 的前 n 个元素组成的序列。")]),v._v(" "),e("p",[v._v("如果 j 是序列 S 的有效索引，则表达式 S[j := x];是类似于 S 的序列，只是它在索引 j 处有 x。")]),v._v(" "),e("p",[v._v("最后，要从一些元素组成一个序列，请将它们括在方括号中。例如，"),e("code",[v._v("[x,y]")]),v._v(" 是由两个元素 x 和 y 组成的序列，使得"),e("code",[v._v("[x,y][0] == x")]),v._v(" 和 "),e("code",[v._v("[x,y][1] == y")]),v._v("，[x] 是唯一元素是 x 的单例序列，[] 是空序列。")]),v._v(" "),e("h2",{attrs:{id:"if-then-else判断语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-then-else判断语句"}},[v._v("#")]),v._v(" "),e("strong",[v._v("if-then-else判断语句")])]),v._v(" "),e("p",[e("code",[v._v("if-then-else")]),v._v(" 表达式的形式为："),e("code",[v._v("if BoolExpr then Expr0 else Expr1")])]),v._v(" "),e("p",[v._v("其中 Expr0 和 Expr1 是相同类型的任何表达式。与 if 语句不同，"),e("code",[v._v("if-then-else")]),v._v(" 表达式使用 then 关键字，并且必须包含显式的 else 分支。")]),v._v(" "),e("h2",{attrs:{id:"match匹配表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#match匹配表达式"}},[v._v("#")]),v._v(" "),e("strong",[v._v("match匹配表达式")])]),v._v(" "),e("p",[e("code",[v._v("match")]),v._v(" 表达式类似于 match 语句并具有以下形式：")]),v._v(" "),e("p",[e("code",[v._v("match Expr { case Empty => Expr0 case Node(l, d, r) => Expr1 }")])]),v._v(" "),e("p",[v._v("大括号可用于标记匹配表达式的结束，但最常见的是不需要这样做，然后可以省略大括号。")])])}),[],!1,null,null,null);_.default=a.exports}}]);